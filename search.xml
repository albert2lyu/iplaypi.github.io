<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）]]></title>
    <url>%2F2018111601.html</url>
    <content type="text"><![CDATA[本文讲述通过 Vultr 云主机搭建 Shadowsocks 的过程，非常不详细。当然，关于云主机很多 VPS 都可以选择，根据价格、配置、地区等可以自由选择。 主机购买 使用 Vultr 的云主机，选择洛杉矶地区的或者日本的，我的推广链接：我的推广链接，官网：Vultr。 价格有 &#36;2.5 / 月（只有 IP6 地址）、&#36;3.5 / 月、&#36;5 / 月等等，更贵的也有，一般选择这三个中的一个就够用了，但是要注意便宜的经常售罄，而且最便宜的只支持 IP6，慎用。 Shadowsocks 服务安装 云主机选择 CentOS 7 x64 版本，全程操作使用 Linux 命令（注意，如果选择其它系统命令会不一致，请自己查询，例如：Debian/Ubuntu 系统的安装命令更简洁，先 apt-get install python-pip，再 pip install shadowsocks 即可）。 注意如果安装了防火墙（更安全），需要的端口一定要开启，否则启动 Shandowsocks 会失败。 安装组件： 123yum install m2crypto python-setuptoolseasy_install pippip install shadowsocks 过程如图： 配置服务器参数： 1vi /etc/shadowsocks.json 如下列出主要参数解释说明 参数名称 解释说明 server 服务器地址，填 ip 或域名 local_address 本地地址 local_port 本地端口，一般 1080，可任意 server_port 服务器对外开的端口 password 密码，每个端口可以设置不同的密码 port_password server_port + password ，服务器端口加密码的组合 timeout 超时重连 method 加密方法，默认：“aes-256-cfb” fast_open 开启或关闭 TCP_FASTOPEN，填 true / false，需要服务端支持 配置多端口信息（多个帐号，多人也可用）： 12345678910111213&#123; "server": "你的 IP 地址"（例如：192.168.0.1）, "local_address": "127.0.0.1"（默认值）, "local_port":1080（默认值）, "port_password"（开启的端口和密码，自己按需配置，确保端口打开并不被其它程序占用）: &#123; "1227": "pengfeivpn1227", "1226": "pengfeivpn1226", "1225": "pengfeivpn" &#125;, "timeout":300（超时时间，默认值）, "method":"aes-256-cfb"（加密方法，默认值）, "fast_open": false&#125; 配置一个端口信息（只有一个帐号，多人也可用）： 12345678910&#123; "server":"你的 IP 地址"（例如：192.168.0.1）, "server_port":1225（唯一的端口）, "local_address":"127.0.0.1", "local_port":1080, "password":"pengfeivpn"（唯一的密码）, "timeout":300, "method":"aes-256-cfb", "fast_open":false&#125; Shadowsocks 性能优化： 另外还有很多参数可以优化性能，例如设置连接数、字节大小等，比较复杂，在此略过。 防火墙安装： 12345678910# 安装防火墙 yum install firewalld# 启动防火墙 systemctl start firewalld# 端口号是你自己设置的端口 firewall-cmd --permanent --zone=public --add-port=1225/tcpfirewall-cmd --permanent --zone=public --add-port=1226/tcpfirewall-cmd --permanent --zone=public --add-port=1227/tcp# 重载更新的端口信息 firewall-cmd --reload 过程如图： 启动 Shadowsocks： 1234# 后台运行 ssserver -c /etc/shadowsocks.json -d start# 调试时使用下面命令，实时查看日志 ssserver -c /etc/shadowsocks.json 过程如图： 客户端使用 Windows 平台使用 下载 Windows 平台的客户端，下载地址：shadowsocks-windows GitHub，shadowsocks 官网，直接解压放入文件夹即可使用，不需要安装。 但是注意配置内容（端口、密码、加密协议等等），另外注意有些 Windows 系统缺失 Shadowsocks 必要的组件（.NET Framework），需要安装，官网也有说明。 配置示例： 实际上下载程序后，无需安装，直接解压即可，解压后只有一个 exe 文件，双击即可运行（最好放入指定文件夹中，便于程序管理和升级）。第一次启动，需要设置参数，如上图所示，至少配置一台机器，另外还可以设置开机启动，以后不用重新打开。此外，如果有更新版本的程序，会放在 ss_win_temp 文件夹下，直接解压后复制替换掉当前的 exe 文件即可；如果文件夹中有 gui-config.json、statistics-config.json 这 2 个文本文件，它们是程序的配置以及前面设置的翻墙配置，不能删掉；如果使用系统代理的 PAC 模式（推荐使用），会生成 pac.txt 文本文件，存放从 GFWList 获取的被墙的网址，必要时才会通过翻墙代理访问，其它正常的网址则直接访问，这样可以节约流量。 如果有切换代理的需求，搭配浏览器的插件来完成，例如 Proxy SwitchyOmega 就可以。 关于启动系统代理并使用 PAC 模式（根据条件过滤，不满足的直连），如果是入门级别使用，直接设置完就可以用了，不用再管其它设置，切记要定时更新 GFWList 列表，因为如果某些网站最近刚刚被屏蔽，不在以前的 HFWList 列表里面，就会导致无法连接，只有及时更新才能正常连接。但是还有一种极端情况，就是某些网站 GFWList 迟迟没有收录，怎么更新都不会起作用，别着急，此时可以使用用户自定义规则，模仿 GFWList 填写自己的过滤规则，即可实现灵活的切换，使用用户自定义规则后会在安装文件夹中生成 user-rule.txt 文本文件。 其实，PAC 模式的原理就是根据公共的过滤规则（收集被屏蔽的网站列表），自动生成了一个脚本文件，把脚本文件绑定到浏览器的代理设置中，使浏览器访问网站前都会运行这个脚本，根据脚本的结果决定是直接访问还是通过本地代理访问，脚本在 Shadowsocks 的 PAC 设置中可以看到，浏览器的设置信息可以在代理设置中看到（浏览器在 Shadowsocks 开启系统代理的时候会自动设置代理，无需人工干预）。由此可以得知，通过本机访问网络，决定是直接连接还是通过 Shadowsocks 代理连接的是 PAC 脚本，并不是 Shadowsocks 本身，所以如果使用系统的 Ping 命令访问 www.google.com 仍然是不能访问的，因为直接 Ping 没有经过 PAC 脚本，还是直接连接了，不可能访问成功。除了浏览器之外，如果其它程序也想访问被屏蔽的网站（例如 Git、Maven 仓库），只能通过程序自己的代理设置进行配置，完成访问的目的。（如果放弃 PAC 模式，直接使用全局模式，则不需要配置任何信息，本机所有的网络请求会全部经过翻墙代理，当然这样做会导致流量消耗过大，并且国内的正常网站访问速度也会很慢） 获取到的 PAC 脚本地址为：http://127.0.0.1:1080/pac?t=20181118030355597&amp;secret=qZKsW49fDFezR4jJQtRDhUVPRqnFu6JC3Nc+vtXDb0g= 以上是查看 Chrome 浏览器和 IE 浏览器的代理设置信息，对于 Microsoft Edge（Windows 10 自带）浏览器来说，界面有点不一样，在设置 -&gt; 高级 -&gt; 代理设置里面。 此外，如果在浏览器中有更灵活的需求应用， 例如在设置多个代理的情况下，针对公司内网是一套，针对指定的几个网站是一套，针对被屏蔽的网站是一套，剩余的直接连接。在这种情况下仅仅使用代理脚本就不能完成需求了，显得场景很单一，当然也可以把脚本写的复杂一点，但是成本太高，而且不方便维护更新。这个时候就需要浏览器的插件出场了，例如在 Chrome 下我选择了 SwitchyOmega 这个插件，可以设置多种情景模式，根据实际情况自由切换，非常方便。我设置了三种情景模式：hdpProxy（公司内网）、shadowSocks（翻墙代理）、auto switch（根据条件自动切换），前面两种情景模式直接设置完成即可，最后的 auto switch 需要配置得复杂一点，根据正则表达式或者通配符指定某些网站的访问方式必须使用 hdpProxy 代理，另外其它的根据规则列表（https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，和 Shadowsocks 的 GFWList 列表类似）必须通过翻墙代理，剩余的才是直接连接。当然，此时就不需要把 Shadowsocks 设置为系统代理了，保持 Shadowsocks 后台运行就可以了。 Android 平台使用 下载 Android 平台的客户端，下载地址：shadowsocks 官网。 踩坑记录1、在云主机安装服务端后，又安装了防火墙，但是没有开启 Shadowsocks 需要的端口，导致启动 Shadowsocks 总是失败，但是报错信息又是 Python 和 Linux 的，看不懂，搜索资料也搜不到，后来重装，并且想清楚每一步骤是干什么的，会造成什么影响，通过排除法找到了根本原因。 2、在 Windows 平台使用的时候，安装了客户端，也安装了 .NET Framework 组件，配置信息确认无误，但是就是上不了外网，同样的操作使用 Android 客户端却可以，所以有理由怀疑是自己的主机问题。后来，重启系统，检查网络，关闭杀毒软件，还是不行，后来，依靠搜索，找到了是杀毒软件 Avast 的问题，扫描 SSL 连接被开启了，大坑，关闭即可。 3、参考：梯子搭建 4、本来以为 Shadowsocks 的系统代理中的 PAC 模式会在接收到网络请求的基础上进行过滤，即 Shadowsocks 能控制所有的网络请求进行过滤判断，然后该翻墙的翻墙，该直连的直连，后来发现不是的，浏览器插件 SwitchyOmega 设置代理规则后，PAC 脚本就不会生效了，全部使用 Shadowsocks 代理的网站都直接翻墙，不会有任何判断了，导致优酷视频消耗了大量的流量，而且速度还很慢。另外，为了保证国内的网站不是经过翻墙代理，能直接连接，就不能使用全局模式。 5、使用插件 SwitchyOmega 的过程中，一开始是自己整理一些规则，而没有使用 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 列表规则，导致配置信息很多，而且自己看着头都大，不好维护与查看，后来就发现了列表规则，解放了劳动力。 6、解决了 Chrome 浏览器的收藏跨平台自动更新同步的问题，以前在三台电脑之间添加取消收藏，总是不能更新同步，需要手动开启系统代理设置全局模式（Chrome 浏览器的收藏同步功能被屏蔽了，我又不知道 url 是什么），等一会更新同步之后再关闭（防止其它场景也翻墙了）。目前使用规则列表，收藏可以自动更新同步了，不需要手动来回切换了，也不用担忘记同步的情况了。]]></content>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>Vultr</tag>
        <tag>Avast</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Aria2 Web 管理面板使用]]></title>
    <url>%2F2018110902.html</url>
    <content type="text"><![CDATA[浏览器默认下载器下载百度云的文件速度大多不理想，非客户端下载限速，大文件下载中途失败，让人体验非常不友好。 哈哈哈哈]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用 Aria2 加速百度云下载]]></title>
    <url>%2F2018110901.html</url>
    <content type="text"><![CDATA[浏览器默认下载器下载百度云的文件速度大多不理想，非客户端下载限速，大文件下载中途失败，让人体验非常不友好。 哈哈哈哈]]></content>
  </entry>
  <entry>
    <title><![CDATA[归来]]></title>
    <url>%2F2018090501.html</url>
    <content type="text"><![CDATA[好，整理完成后，重新出发。 二级标题，自动创建锚点和目录 三级标题 - 开始1$ hexo new "My New Post" More info: Writing 三级标题 - 中间1$ hexo server More info: Server 三级标题 - 结束1$ hexo generate More info: Generating 三级标题 - 备注1$ hexo deploy More info: Deployment 踩坑记录 注意使用 hexo 对 Markdown 文件进行解析时，有一些转义字符是会失败的（使用反斜杠 \ 进行转义的，例如美元符号 &#36;，成对出现有特殊含义，所以需要转义，在 Markdown 中可以使用 \$ 进行转义，但是 hexo 解析完成 html 文件是失败的），所以最好使用编码解决，例如美元符号使用 &amp;#36; 替代。]]></content>
      <categories>
        <category>基础技术知识</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017102901.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>基础技术知识</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
</search>
