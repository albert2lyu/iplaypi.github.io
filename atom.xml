<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>虾丸派</title>
  
  <subtitle>烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.playpi.org/"/>
  <updated>2019-04-13T08:27:18.000Z</updated>
  <id>https://www.playpi.org/</id>
  
  <author>
    <name>虾丸派</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>预估 Mysql 数据表的数据大小和索引大小</title>
    <link href="https://www.playpi.org/2019041001.html"/>
    <id>https://www.playpi.org/2019041001.html</id>
    <published>2019-04-10T08:27:18.000Z</published>
    <updated>2019-04-13T08:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p> 待整理。</p><a id="more"></a><p> 待整理。</p><p> 数据库表空间预估：<a href="https://blog.csdn.net/laiyijian/article/details/70873568" target="_blank" rel="noopener">https://blog.csdn.net/laiyijian/article/details/70873568</a> ；</p><p>select data_length,index_length<br>from information_schema.tables t<br>where table_schema=’db_yeezhao_stats’<br>and table_name = ‘t_banyan_elk_request’;</p><p> 待看：</p><p><a href="https://blog.csdn.net/bisal/article/details/74784124" target="_blank" rel="noopener">https://blog.csdn.net/bisal/article/details/74784124</a> 。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;待整理。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Mysql" scheme="https://www.playpi.org/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://www.playpi.org/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="database" scheme="https://www.playpi.org/tags/database/"/>
    
      <category term="space" scheme="https://www.playpi.org/tags/space/"/>
    
  </entry>
  
  <entry>
    <title>青椒炒蛋做法总结</title>
    <link href="https://www.playpi.org/2019033101.html"/>
    <id>https://www.playpi.org/2019033101.html</id>
    <published>2019-03-31T08:40:52.000Z</published>
    <updated>2019-03-31T08:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>青椒炒蛋，是一道非常普通的家常菜，基本家家户户都会做。有的家庭喜欢吃辣，放的是稍微辣一点的辣椒，有的家庭不喜欢吃辣，就放菜椒或者甜椒，总之，对于辣椒的选择非常多。对于辣椒的处理方式，有的人喜欢切小块，有的人喜欢斜切小段，还有的人直接剁碎，做法也多种多样。本文记录青椒炒蛋的做法总结，使用的是菜椒【不辣微甜】，由于故意多放了生抽，做出来的口味是咸香的。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 以下食材的份量为一大盘，足够 2 人吃，食材非常简单：</p><ul><li>鸡蛋 3 个 </li><li> 青椒 2 棵 </li><li> 大蒜 6 粒 </li><li> 食用盐、生抽酱油 </li></ul><p> 全部的食材 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb59lzf0j229s29sx6p.jpg" alt="全部的食材" title="全部的食材"></p><h1 id="制作过程"><a href="# 制作过程" class="headerlink" title="制作过程"></a> 制作过程 </h1><p> 这是一道快菜，制作过程根据家庭灶的火力大小，2-5 分钟即完成。</p><h2 id="处理食材备用"><a href="# 处理食材备用" class="headerlink" title="处理食材备用"></a>处理食材备用 </h2><p> 青椒洗净去籽切小快，鸡蛋液加少量食用盐搅拌均匀，大蒜切片。</p><p>青椒切块，大蒜切片 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb5ifv55j229s29sb2a.jpg" alt="青椒切块，大蒜切片" title="青椒切块，大蒜切片"></p><p> 鸡蛋液 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb5mnskjj229s29sb29.jpg" alt="鸡蛋液" title="鸡蛋液"></p><h2 id="炒鸡蛋备用"><a href="# 炒鸡蛋备用" class="headerlink" title="炒鸡蛋备用"></a> 炒鸡蛋备用 </h2><p> 锅里加油，要多加一点，鸡蛋液很吸油，烧热后下鸡蛋液，定型后炒散，炒散后盛出备用。由于鸡蛋液里面已经加了食用盐，就不用再加盐调味了。</p><p>鸡蛋液下锅 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb5rk896j229s29s4qq.jpg" alt="鸡蛋液下锅" title="鸡蛋液下锅"></p><p> 定型炒散 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb5x5pt6j229s29skjl.jpg" alt="定型炒散" title="定型炒散"></p><p> 鸡蛋盛出备用 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb62uunrj229s29sqv5.jpg" alt="鸡蛋盛出备用" title="鸡蛋盛出备用"></p><h2 id="炒青椒大蒜"><a href="# 炒青椒大蒜" class="headerlink" title="炒青椒大蒜"></a> 炒青椒大蒜 </h2><p> 锅里留底油，如果炒完鸡蛋后不够再适当加点油，烧热，大蒜片和青椒同时下锅翻炒【注意是同时下锅】，翻炒至青椒 5 成熟，关小火准备加生抽调味。</p><p>青椒大蒜同时下锅 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb6hcvv2j229s29snpe.jpg" alt="青椒大蒜同时下锅" title="青椒大蒜同时下锅"></p><p> 翻炒至青椒 5 成熟 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb6n92i2j229s29snpe.jpg" alt="翻炒至青椒 5 成熟" title="翻炒至青椒 5 成熟"></p><h2 id="加生抽调味后下鸡蛋"><a href="# 加生抽调味后下鸡蛋" class="headerlink" title="加生抽调味后下鸡蛋"></a> 加生抽调味后下鸡蛋 </h2><p> 青椒翻炒至 5 成熟时，关小火，加生抽调味。注意一定要加多一点生抽，那种大的汤勺可以加将近一汤勺，然后开大火翻炒，把青椒炒至 8 成熟，生抽遇到大火热量时会散发独特的香味。</p><p>加生抽炒至青椒 8 成熟 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb72tpblj229s29snpe.jpg" alt="加生抽炒至青椒 8 成熟" title="加生抽炒至青椒 8 成熟"></p><p> 此时倒入前面炒过的鸡蛋，混合翻炒，如果觉得不够味再加一点食用盐，我加的生抽已经够味，不再加食用盐了。</p><p>倒入鸡蛋 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb7dw5nvj229s29se82.jpg" alt="倒入鸡蛋" title="倒入鸡蛋"></p><p> 翻炒均匀 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb7i7j4wj229s29skjm.jpg" alt="翻炒均匀" title="翻炒均匀"></p><h2 id="出锅装盘"><a href="# 出锅装盘" class="headerlink" title="出锅装盘"></a> 出锅装盘 </h2><p> 翻炒均匀后可以出锅装盘了。</p><p>装盘侧视图 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb7odz35j229s29sqv5.jpg" alt="装盘侧视图" title="装盘侧视图"></p><p> 装盘俯视图 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb7s48a3j229s29snpd.jpg" alt="装盘俯视图" title="装盘俯视图"></p><p> 配上剩下的几块红烧肉，美滋滋。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1mb7ww16ej229s29sqv5.jpg" alt="配上剩下的几块红烧肉，美滋滋" title="配上剩下的几块红烧肉，美滋滋"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a>注意事项 </h1><p>1、炒青椒时和大蒜片一起下锅，不需要先下大蒜片爆香，这很关键。</p><p>2、油量，炒鸡蛋的时候一定要多放一点油，才能保持鸡蛋的嫩滑，因为鸡蛋液吸油很厉害。如果油加的少，会导致鸡蛋炒的有点干有点糊，影响口感。</p><p>3、炒青椒的时候为什么要多加一点生抽呢，毕竟会影响这道菜的颜色，一般炒菜都只会在最后调味时加一点点。因为使用青椒来炒鸡蛋，这种青椒是没有什么味道的，那样只会有鸡蛋的香味，显得太单调，而生抽遇到热量会散发出独特的香味，同时生抽里面又有盐分，从而达到了咸香的效果。就如北方有些地方做番茄炒蛋的时候，是做成咸味的，也会加入大量的生抽，味道也非常好，特别是拌面吃，既是菜又能调味。</p><h1 id="致谢"><a href="# 致谢" class="headerlink" title="致谢"></a> 致谢 </h1><p> 感谢微博用户 <strong>@开心的柠檬日记 </strong>，在微博上放了很多做菜的方子，微博主页为：<a href="https://weibo.com/u/2232990523" target="_blank" rel="noopener">开心的柠檬日记的微博</a> 。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;青椒炒蛋，是一道非常普通的家常菜，基本家家户户都会做。有的家庭喜欢吃辣，放的是稍微辣一点的辣椒，有的家庭不喜欢吃辣，就放菜椒或者甜椒，总之，对于辣椒的选择非常多。对于辣椒的处理方式，有的人喜欢切小块，有的人喜欢斜切小段，还有的人直接剁碎，做法也多种多样。本文记录青椒炒蛋的做法总结，使用的是菜椒【不辣微甜】，由于故意多放了生抽，做出来的口味是咸香的。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="青椒炒蛋" scheme="https://www.playpi.org/tags/%E9%9D%92%E6%A4%92%E7%82%92%E8%9B%8B/"/>
    
      <category term="辣椒炒蛋" scheme="https://www.playpi.org/tags/%E8%BE%A3%E6%A4%92%E7%82%92%E8%9B%8B/"/>
    
  </entry>
  
  <entry>
    <title>参加 Elastic 社区第三次线下活动广州站</title>
    <link href="https://www.playpi.org/2019033001.html"/>
    <id>https://www.playpi.org/2019033001.html</id>
    <published>2019-03-29T16:41:05.000Z</published>
    <updated>2019-04-06T16:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>在 2019 年 3 月 30 日，我去参加了 Elastic 社区第三次线下活动广州站的分享会，活动简介：<a href="https://meetup.elasticsearch.cn/event/guangzhou/1001.html" target="_blank" rel="noopener">Elastic 社区第三次线下活动广州站 </a> 。看到各位行业顶尖分享者的分享，不能说受益匪浅，至少给我打开了一些思路，拓展了我的知识面，同时我也学到了一些知识，既包括技术方面的，也包括处事方面的。这篇博文就简单记录一下这个过程。</p><a id="more"></a><h1 id="出发"><a href="# 出发" class="headerlink" title="出发"></a> 出发 </h1><p> 先看一下地图指引 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf2ls1z3j214q0u0djy.jpg" alt="地图指引" title="地图指引"></p><p> 到达公交站，上冲南站，天气不错 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf2vj7mlj229s29sb2c.jpg" alt="上冲南站" title="上冲南站"></p><p> 走路路过特斯拉服务站，听说最近交付的特斯拉电动车有很多问题 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf33253ij229s29shdt.jpg" alt="路过特斯拉服务站" title="路过特斯拉服务站"></p><h1 id="到达"><a href="# 到达" class="headerlink" title="到达"></a> 到达 </h1><p> 到达的比较早，因为要帮忙安排桌子凳子，一切准备就绪后，一起吃了个午饭。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf3jejrej229s29s1ky.jpg" alt="吃了个午饭" title="吃了个午饭"></p><p>13:30 开始签到，签到现场 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf3of8qlj229s29sb2a.jpg" alt="签到现场" title="签到现场"></p><p> 我充当了一会儿签到员，坐着的那个是我 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf3sy1ylj20m80cimyt.jpg" alt="坐着的那个是我" title="坐着的那个是我"></p><p> 各种各样的 Elasticsearch 贴纸 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf3ydx4cj229s29s4qq.jpg" alt="各种各样的 Elasticsearch 贴纸" title="各种各样的 Elasticsearch 贴纸"></p><p> 这是一种比较特殊的 Elasticsearch 贴纸 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf427iykj20qo1hcq74.jpg" alt="特殊的 Elasticsearch 贴纸" title="特殊的 Elasticsearch 贴纸"></p><h1 id="静听分享"><a href="# 静听分享" class="headerlink" title="静听分享"></a> 静听分享 </h1><p> 先简单看一下这个分享会的大概流程与分享内容 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf471eb8j21830o9gnw.jpg" alt="分享内容" title="分享内容"></p><h2 id="分享一"><a href="# 分享一" class="headerlink" title="分享一"></a> 分享一 </h2><p>Elasticsearch 在数说全量库的应用实践</p><p> 现场场景一 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf5ceaqtj21kw0w0as5.jpg" alt="场景一" title="场景一"></p><p> 现场场景二 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf58jqs2j20zk0k0ta7.jpg" alt="场景二" title="场景二"></p><p> 现场场景三 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf54mc76j21hc0u0q84.jpg" alt="场景三" title="场景三"></p><h2 id="分享二"><a href="# 分享二" class="headerlink" title="分享二"></a> 分享二 </h2><p>Elasticsearch 在慧算账技术运营中的应用</p><p> 现场场景 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf4yz5k5j20m80ciac7.jpg" alt="现场" title="现场"></p><h2 id="分享三"><a href="# 分享三" class="headerlink" title="分享三"></a> 分享三 </h2><p>Elasticsearch 在大数据可视化分析中的应用</p><p> 现场场景 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf4twfafj20m80cit9r.jpg" alt="现场" title="现场"></p><h2 id="分享四"><a href="# 分享四" class="headerlink" title="分享四"></a> 分享四 </h2><p> 打造云原生的 Elasticsearch 服务 </p><p> 现场场景 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf4p52q6j20m80cit9u.jpg" alt="现场" title="现场"></p><h2 id="分享五"><a href="# 分享五" class="headerlink" title="分享五"></a> 分享五 </h2><p>Elasticsearch 集群在雷达大数据平台的演进</p><p> 现场场景 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf4kjqsjj20m80ciq4f.jpg" alt="现场" title="现场"></p><h2 id="分享者合影留念"><a href="# 分享者合影留念" class="headerlink" title="分享者合影留念"></a> 分享者合影留念 </h2><p> 认真的观众 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf4c5u0oj21400u00x8.jpg" alt="认真的观众" title="认真的观众"></p><p> 分享者合影留念 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1tf4ftxkrj20m80cizlx.jpg" alt="分享者合影留念" title="分享者合影留念"></p><h1 id="我的思考以及学到的东西"><a href="# 我的思考以及学到的东西" class="headerlink" title="我的思考以及学到的东西"></a> 我的思考以及学到的东西</h1><p>0、虽然有一些分享听不懂，例如腾讯云的 Elasticsearch 云服务，做了什么优化、达到了什么效果，或者是数说雷达的架构演进，这些目前对于我来说都太不切实际，因为还没接触到这么高深的知识，平时也使用不到，所以听起来云里雾里。但是，能从中提取 1-2 个重要知识点也是有用的，例如腾讯云的索引碎片化，导致读写速度严重下降，这与我在工作当中遇到的问题一模一样。再例如数说雷达演进过程中遇到的坑，某个字段没有做 doc_values，导致不支持 aggregation 查询，这与我很久之前遇到的问题一模一样，此时又加深了我的认知。</p><p>1、多版本 Elasticsearch 的兼容解决办法，需要设置拦截器，把请求的不兼容参数部分替换掉，可以使用 SpringBoot 整合，需要注意已知版本的种类。</p><p>2、针对 long 类型字段的聚合【即 aggregation】请求根据自己的业务场景，如果判断为实际上没有必要【例如只是对年份、月份、日做聚合，并不考虑时区、毫秒时间戳的问题】，可以换一种思路，转化为字符串存储，针对字符串做聚合操作效率就高多了。</p><p>3、在现场提问时，有的人是带着自己业务实际遇到的问题来提问探讨的，提问时描述问题已经消耗了将近 10 分钟。接下来如果真的探讨起来，估计没有半个小时一个小时搞不定，这显然是在浪费大家的时间。所以分享者也及时打断了提问，并留下联系方式，分享会后线下接着再讨论。这种做法很得体，虽然不能在现场解答【为了节约大家的时间】，但是会后讨论也是一样，有时候根据实际情况就是需要这样的取舍。</p><p>4、在 Elasticsearch 中，字段类型是可以节约存储空间与请求耗时的，例如 integer、long、short 的合理使用，但是切记存储的目的最终都是为了使用。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在 2019 年 3 月 30 日，我去参加了 Elastic 社区第三次线下活动广州站的分享会，活动简介：&lt;a href=&quot;https://meetup.elasticsearch.cn/event/guangzhou/1001.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elastic 社区第三次线下活动广州站&lt;/a&gt; 。看到各位行业顶尖分享者的分享，不能说受益匪浅，至少给我打开了一些思路，拓展了我的知识面，同时我也学到了一些知识，既包括技术方面的，也包括处事方面的。这篇博文就简单记录一下这个过程。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://www.playpi.org/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="Elastic" scheme="https://www.playpi.org/tags/Elastic/"/>
    
      <category term="线下活动" scheme="https://www.playpi.org/tags/%E7%BA%BF%E4%B8%8B%E6%B4%BB%E5%8A%A8/"/>
    
      <category term="广州" scheme="https://www.playpi.org/tags/%E5%B9%BF%E5%B7%9E/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg 使用总结</title>
    <link href="https://www.playpi.org/2019032701.html"/>
    <id>https://www.playpi.org/2019032701.html</id>
    <published>2019-03-27T13:28:09.000Z</published>
    <updated>2019-03-27T13:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>FFmpeg 是一款开源的软件，可以进行多种格式的视频、音频编码转换、片段剪辑。它包含了 libavcodec – 这是一个用于多个项目中音频和视频的解码器库，以及 libavformat – 一个音频与视频格式转换库。<strong>FFmpeg</strong> 这个单词中的 <strong>FF</strong> 指的是 <strong>Fast Forward</strong>。FFmpeg 官网：<a href="https://ffmpeg.org" target="_blank" rel="noopener">https://ffmpeg.org</a> ，下载时会跳转到这里：<a href="https://ffmpeg.zeranoe.com/builds" target="_blank" rel="noopener">https://ffmpeg.zeranoe.com/builds</a> ，请选择合适的版本下载使用。本文记录 FFmpeg 的使用方法，基于 Windows X64 平台。</p><a id="more"></a><h1 id="下载安装"><a href="# 下载安装" class="headerlink" title="下载安装"></a>下载安装 </h1><h2 id="下载"><a href="# 下载" class="headerlink" title="下载"></a> 下载 </h2><p> 在 <a href="https://ffmpeg.zeranoe.com/builds" target="_blank" rel="noopener">https://ffmpeg.zeranoe.com/builds</a> 下载页面，选择适合自己操作系统的版本，我这里选择 Windows X64 的 static zip 包，解压后直接使用，无需安装。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3ly1g1ivhlcgh4j21hc0q9dkh.jpg" alt="FFmpeg 下载页面" title="FFmpeg 下载页面"></p><h2 id="解压配置环境变量"><a href="# 解压配置环境变量" class="headerlink" title="解压配置环境变量"></a>解压配置环境变量 </h2><p> 下载到指定的目录【最好放在方便管理的目录，不显得混乱】，直接解压，得到一个文件夹，里面有 bin、doc、presets 这 3 个子文件夹，其中 bin 里面就包含了主程序：ffmpeg、ffplay、ffprobe，这里不涉及安装的概念，程序可以直接使用。</p><p>解压主目录 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3ly1g1ivi9q552j20o00hgt9m.jpg" alt="解压主目录" title="解压主目录"></p><p> 子文件夹 bin<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3ly1g1ividmkdbj20o00hg753.jpg" alt="子文件夹 bin" title="子文件夹 bin"></p><p>为了方便使用这 3 个主程序，需要把 bin 所在目录配置到环境变量 PATH 中【我这里是 D:\Program Files\ffmpeg\bin】，这里就不再赘述，如果不配置，每次使用命令时都要给出完整的目录，我觉得很麻烦。</p><h1 id="使用示例"><a href="# 使用示例" class="headerlink" title="使用示例"></a>使用示例 </h1><p>ffmpeg 的命令行参数的位置会影响执行的结果，例如时间参数，这与我所知道的其它工具不一样，所以参数位置不能乱放。此外，还需要注意涉及到转码的操作会比较耗时，几十分钟的视频不是几分钟能处理完的，和视频的清晰度也有关系，这个要有一定的心理准备。</p><p>1、把 mkv 格式的视频文件转为 mp4 格式的文件，视频使用 <strong>libx264</strong> 编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 如果没有配置环境变量 PATH, 命令需要指定 D:\Program Files\ffmpeg\bin\ffmpeg</span><br><span class="line">ffmpeg -i imput.mkv -c:v libx264 output.mp4</span><br></pre></td></tr></table></figure><p>2、查看视频文件的流信息，包括视频、音频、字幕。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 其中类似 Stream #0:0 格式的内容就是流信息，指定参数时可以直接使用数字编号表示流 </span><br><span class="line">ffmpeg -i input.mkv</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3ly1g1ivijvhopj20l50cpjso.jpg" alt="查看视频文件的流信息" title="查看视频文件的流信息"></p><p>3、mkv 文件剪辑，截取片段，指定音轨。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- -ss 表示开始时间，-to 表示结束时间，</span><br><span class="line">ffmpeg -ss 01:22:08 -to 01:32:16 -accurate_seek -i in.mkv -map 0:v -map 0:a:1 -codec copy -avoid_negative_ts 1 out.mkv</span><br></pre></td></tr></table></figure><p> 其中，<strong>-accurate_seek</strong> 表示画面帧数校准，<strong>-avoid_negative_ts 1</strong> 表示修复结尾可能的空白帧，<strong>-map 0:v</strong> 表示截取所有视频，<strong>-map 0:a:1</strong> 表示截取第 2 道音轨。</p><p>此外，如果把时间参数放在 -i 前面，结果总会多截取 1-2 秒【如上面示例】。但是如果放在后面，截取的视频片段时间准确了，然而开头的音频正常，视频有 20-30 秒的漆黑一片，不知道为啥。</p><p>4、rmvb 文件转为 mp4 文件，涉及到编码转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 视频使用 h264 编码，音频使用 aac 编码 </span><br><span class="line">ffmpeg -i input.rmvb -c:v h264 -c:a aac out.mp4</span><br></pre></td></tr></table></figure><p>这里需要注意，涉及到编码转换的比较消耗 CPU，上面这个命令把我的 CPU 消耗到 100%，动态视频详见微博：<a href="https://weibo.com/3086148515/HmVcnm7Kl" target="_blank" rel="noopener">FFmpeg 视频转码 CPU 飙升到 100%</a> 。其中，留意流输出信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream mapping:</span><br><span class="line">  Stream #0:1 -&gt; #0:0 (rv40 (native) -&gt; h264 (libx264))</span><br><span class="line">  Stream #0:0 -&gt; #0:1 (cook (native) -&gt; aac (native))</span><br></pre></td></tr></table></figure><p>此外，FFmpeg 不支持 rmvb 格式的文件，只能转码为 mp4 的格式再使用，这里的不支持不是指不能处理，而是不能直接输出 rmvb 格式的文件，处理输入是可以的。</p><h1 id="其它"><a href="# 其它" class="headerlink" title="其它"></a>其它</h1><p>1、如果只是为了转换 mkv 文件的格式为 mp4，也可以使用一款软件：<a href="https://www.videohelp.com/software/MkvToMp4" target="_blank" rel="noopener">MkvToMp4</a> 。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;FFmpeg 是一款开源的软件，可以进行多种格式的视频、音频编码转换、片段剪辑。它包含了 libavcodec – 这是一个用于多个项目中音频和视频的解码器库，以及 libavformat – 一个音频与视频格式转换库。&lt;strong&gt;FFmpeg&lt;/strong&gt; 这个单词中的 &lt;strong&gt;FF&lt;/strong&gt; 指的是 &lt;strong&gt;Fast Forward&lt;/strong&gt;。FFmpeg 官网：&lt;a href=&quot;https://ffmpeg.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ffmpeg.org&lt;/a&gt; ，下载时会跳转到这里：&lt;a href=&quot;https://ffmpeg.zeranoe.com/builds&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ffmpeg.zeranoe.com/builds&lt;/a&gt; ，请选择合适的版本下载使用。本文记录 FFmpeg 的使用方法，基于 Windows X64 平台。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="FFmpeg" scheme="https://www.playpi.org/tags/FFmpeg/"/>
    
      <category term="视频剪辑" scheme="https://www.playpi.org/tags/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/"/>
    
      <category term="音频剪辑" scheme="https://www.playpi.org/tags/%E9%9F%B3%E9%A2%91%E5%89%AA%E8%BE%91/"/>
    
      <category term="视频转码" scheme="https://www.playpi.org/tags/%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>爆炒花甲做法总结</title>
    <link href="https://www.playpi.org/2019032501.html"/>
    <id>https://www.playpi.org/2019032501.html</id>
    <published>2019-03-24T17:02:40.000Z</published>
    <updated>2019-03-24T17:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>爆炒花甲是一道做法简单、快速出菜、可口下饭的家常菜，一般晚上去大排档吃夜宵，基本都会有这道菜。本文记录爆炒花甲的家常做法，以及需要注意的地方。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 以下份量为一盘：</p><ul><li>花甲 1.5 斤 - 2 斤，花甲的价格一般在 6-10 块钱之间【广州地区】</li><li>二荆条辣椒 2 个，细长条那种，不是很辣 </li><li> 小米椒 5 个，我用干辣椒和辣椒酱代替了 </li><li> 豆瓣酱、蚝油、食用盐、淀粉 </li><li> 大蒜、香葱，香葱我用青椒代替了 </li></ul><p> 辣椒食材 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5ne1e6kj229s29se81.jpg" alt="辣椒食材" title="辣椒食材"></p><p> 辣椒切碎备用 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5njohsrj229s29se82.jpg" alt="辣椒切碎备用" title="辣椒切碎备用"></p><p> 准备工作中最重要的就是让花甲吐沙，一般买回来的花甲里面都会有大量的沙子，所以要让花甲把沙子吐出来，这样吃起来才不会硌牙，否则会严重影响口感，没法吃。</p><p>花甲吐沙方法主要有两种：</p><ul><li>方法 1【时间长，简单】：放入清水、食用盐、香油，浸泡一个小时，基本可以把沙吐干净。</li><li>方法 2【时间短，麻烦】：放入锅中，加入清水、料酒、姜片、香油，小火煮热【不要很热，保持不烫手的温度，否则会严重影响肉质】，持续 15 分钟，也可以把沙吐干净。</li></ul><p>我一般选择第一种，花甲买回来之后放在盆里，加入盐、香油等着就行了，可以先去处理其它食材了，不用管，很方便。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5oxjyxmj229s29se82.jpg" alt="让花甲吐沙" title="让花甲吐沙"></p><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a>制作步骤 </h1><h2 id="花甲焯水"><a href="# 花甲焯水" class="headerlink" title="花甲焯水"></a> 花甲焯水 </h2><p> 花甲吐沙完成之后，捞出进行焯水，焯水之后花甲基本熟了，然后捞出花甲迅速过冷水，过冷水的目的是保持花甲肉的鲜嫩。注意焯水不要太久，否则花甲肉就老了，影响口感。我把花甲焯水的时候还加了姜片和料酒去腥。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5pebk8cj229s29s4qq.jpg" alt="花甲焯水" title="花甲焯水"></p><h2 id="爆香锅底"><a href="# 爆香锅底" class="headerlink" title="爆香锅底"></a>爆香锅底 </h2><p> 油烧热，一定要比平时炒菜多放一点油，毕竟是爆炒，加入大蒜、辣椒、姜片，十几秒爆香，我这里省略了姜片，因为焯水的时候用的水里面加了姜片和料酒。大蒜也不加了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5qj41y0j229s29skjm.jpg" alt="爆香锅底" title="爆香锅底"></p><h2 id="豆瓣酱或者蚝油调味"><a href="# 豆瓣酱或者蚝油调味" class="headerlink" title="豆瓣酱或者蚝油调味"></a>豆瓣酱或者蚝油调味 </h2><p> 关小火，加入豆瓣酱，调和味道，我没有豆瓣酱，就用蚝油代替了。</p><h2 id="爆炒花甲"><a href="# 爆炒花甲" class="headerlink" title="爆炒花甲"></a>爆炒花甲 </h2><p> 味道调和好后，加入过冷水的花甲，开大火，爆炒。</p><p>爆炒 3 分钟后关小火调味【时间实际依据灶的火力大小，家用灶一般火不够大，要多炒一会】，加入食用盐【如果豆瓣酱或者生抽够味就不用加盐了】、生抽、辣椒酱，大火翻炒十几秒。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5r7ayuaj229s29shdu.jpg" alt="爆炒花甲" title="爆炒花甲"></p><p>我又补了一点辣椒酱 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5y5pj3ej229s29sb2a.jpg" alt="补了一点辣椒酱" title="补了一点辣椒酱"></p><p> 最后一步也很关键，使用淀粉液勾芡，目的是让味道均匀包裹在花甲的表面，否则味道都会遗留在锅里，导致花甲味道偏淡。勾芡可以实现真正入味的效果。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5rkc386j229s29shdu.jpg" alt="淀粉液勾芡" title="淀粉液勾芡"></p><h2 id="出锅装盘"><a href="# 出锅装盘" class="headerlink" title="出锅装盘"></a>出锅装盘 </h2><p> 如果有香葱的话，出锅前再放一点点香葱，更好看，味道也更好。我这里没放香葱，使用青椒代替了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5s40v2jj229s29su0x.jpg" alt="出锅装盘" title="出锅装盘"></p><h2 id="其它配菜"><a href="# 其它配菜" class="headerlink" title="其它配菜"></a>其它配菜 </h2><p> 顺手做了一道红烧肉，加了香菇和 2 个鸡蛋，有点偏卤肉的口味了。</p><p>红烧肉收汁阶段 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5spgpkhj229s29sb2a.jpg" alt="红烧肉收汁阶段" title="红烧肉收汁阶段"></p><p> 红烧肉成品 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1l5su5ddgj229s29sqv5.jpg" alt="红烧肉成品" title="红烧肉成品"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项 </h1><h2 id="花甲吐沙"><a href="# 花甲吐沙" class="headerlink" title="花甲吐沙"></a> 花甲吐沙 </h2><p> 花甲吐沙一定要做好，不可匆匆了事，否则花甲吃起来全部都是沙子就不好了，严重影响口感，另外还要注意在爆炒的时候会有一些花甲壳碎掉，混在花甲肉里面，吃的时候也要注意一下，虽然不是沙子，但是也会硌牙。</p><h2 id="花甲焯水 -1"><a href="# 花甲焯水 -1" class="headerlink" title="花甲焯水"></a>花甲焯水 </h2><p> 花甲焯水，可以适当放一点姜片、料酒，去腥味。当然，如果吐沙的方法采用的是温水慢煮的方式，可以不用再放任何调料了，直接焯水就行了。焯水时要切记水不能太沸腾，或者不要一直放在沸水里面，要适当用漏勺翻一下，否则会导致花甲肉全部脱离花甲壳了，这个和花甲新不新鲜无关，水太沸腾会导致大量的花甲肉脱离花甲壳。</p><h2 id="勾芡"><a href="# 勾芡" class="headerlink" title="勾芡"></a>勾芡 </h2><p> 勾芡，才能保证味道均匀分布在花甲表面，吃起来才有入味的效果，否则调味料大部分都粘在锅的表面了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;爆炒花甲是一道做法简单、快速出菜、可口下饭的家常菜，一般晚上去大排档吃夜宵，基本都会有这道菜。本文记录爆炒花甲的家常做法，以及需要注意的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="爆炒花甲" scheme="https://www.playpi.org/tags/%E7%88%86%E7%82%92%E8%8A%B1%E7%94%B2/"/>
    
      <category term="麻辣花甲" scheme="https://www.playpi.org/tags/%E9%BA%BB%E8%BE%A3%E8%8A%B1%E7%94%B2/"/>
    
      <category term="炒花甲" scheme="https://www.playpi.org/tags/%E7%82%92%E8%8A%B1%E7%94%B2/"/>
    
  </entry>
  
  <entry>
    <title>使用 Valine 给 Hexo 博客添加评论系统</title>
    <link href="https://www.playpi.org/2019032001.html"/>
    <id>https://www.playpi.org/2019032001.html</id>
    <published>2019-03-20T12:44:40.000Z</published>
    <updated>2019-03-20T12:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>我的博客已经搭建得差不多了，一些配置也固定下来了，最近重点一直在补充博客内容，把以前的笔记都整理出来。然后有一天我就想，好像总感觉少点什么，发现评论这个功能是没有的。以前是为了追求简洁的风格，而且评论这个功能不稳定，主要是评论系统不好选择，很多都关闭了。思前想后，考虑了好几天，最终还是决定先加上评论功能，实验一阵子，看看有没有必要，后续再决定是取消还是继续，反正也就是改一下配置就行了，没有多大工作量。接下来查了一下当前还活着的评论系统的种类，最后选择了 <strong>Valine</strong> 这个评论系统。它不需要登录，无后台管理，非常简洁，比较符合我追求的理念。参考相关内容：<a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a> 、<a href="https://valine.js.org" target="_blank" rel="noopener">https://valine.js.org</a> 、<a href="https://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a> 。</p><a id="more"></a><h1 id="注册帐号创建应用"><a href="# 注册帐号创建应用" class="headerlink" title="注册帐号创建应用"></a>注册帐号创建应用 </h1><blockquote><p>Valine 诞生于 2017 年 8 月 7 日，是一款基于 Leancloud 的快速、简洁且高效的无后端评论系统。</p></blockquote><p> 所以，第一步就需要注册 Leancloud 账号，然后才能申请应用的 appid 和 appkey。注册过程我就不赘述了，和注册普通的账号一样，官网地址：<a href="https://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a> 。接下来重点来了，需要申请免费的应用【有钱的话也可以购买收费的版本】，这里面有一些需要注意的地方，否则最后评论的时候没有效果，会导致 Leancloud 后台接收不到评论数据。</p><p>1、登录 Leancloud 系统，进入系统的控制台，然后创建应用。<br>从主页进入控制台 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d797qim2j21hc0rvq6j.jpg" alt="从主页进入控制台" title="从主页进入控制台"></p><p> 创建应用，我这里已经创建好一个应用了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d79ng997j21hc0q974s.jpg" alt="创建应用" title="创建应用"></p><p>2、填写、选择应用的参数，这里需要填写应用的名字，选择开发版本【免费版本，限制请求并发数】。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d79uhbrqj21hc0q9q4e.jpg" alt="填写、选择应用的参数" title="填写、选择应用的参数"></p><p>3、创建完成后，进入设置详情页面。<br>点击齿轮，进入设置详情页面。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d79z1cf8j21hc0q9mxq.jpg" alt="进入设置详情页面" title="进入设置详情页面"></p><p>在设置详情页面里面，选择 <strong>设置 -&gt; 应用 Key</strong>，就可以看到应用的 appid 和 appkey，这 2 个字符串要记下来，等一下在 Hexo 里面配置的时候有用。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7a30cpmj21hc0q9jt5.jpg" alt="查看应用 Key" title="查看应用 Key"></p><p>4、在 <strong>存储 -&gt; 数据 </strong>里面查看默认的 Class 信息，有一些默认的 Class，例如 _User、_File、_Role 等，这些都用不到，而 Hexo 的评论功能需要一个名称为 Comment 的 Class，现在发现没有这个 Class，要不要手动配置一个呢。其实不用担心，经过我的测试 Hexo 会自动生成这个 Class，所以不需要自己手动配置了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7agpw2ij21hc0q9gnc.jpg" alt="查看 Class 信息" title="查看 Class 信息"></p><p>5、在 <strong>设置 -&gt; 安全中心 </strong>，把 <strong>文件上传、短信服务、推送服务、实时通信 </strong>这几个服务全部关闭，因为用不到。然后需要特别注意的就是 <strong>Web 安全域名 </strong>这一个选项，里面一定要填写自己站点的域名，并且带上端口号，例如 http 请求的默认端口就是 80，htps 请求的默认端口就是 443。这里如果没有配置好，评论的时候也会失败的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7amoctcj21hc0rv76n.jpg" alt="设置 Web 安全域名" title="设置 Web 安全域名"></p><h1 id="配置 -Hexo- 参数"><a href="# 配置 -Hexo- 参数" class="headerlink" title="配置 Hexo 参数"></a>配置 Hexo 参数 </h1><p> 上一步骤已经把 Leancloud 里面的应用申请好了，并且设置了重要的选项，获取到 appid 和 appkey，接下来配置 Hexo 就简单多了。打开 Hexo 主题的配置文件 <strong>_config.yml</strong>，搜索一下 Valine，找到默认配置【这是因为 Hexo 已经自动集成了 Valine 评论系统，不需要安装什么，如果没有请升级 Hexo 版本】。</p><p>默认是关闭的，把配置更改如下图，更为详细内容参考：<a href="https://valine.js.org/configuration.html" target="_blank" rel="noopener">https://valine.js.org/configuration.html</a> 。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7at81uyj20ku0b0dgq.jpg" alt="Hexo 配置" title="Hexo 配置"></p><p>主要配置的内容如下【重点是 appid、appkey、placeholder，至于验证、邮件提醒就按照自己的需要来配置吧】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  # 开启 Valine 评论 </span><br><span class="line">  enable: true</span><br><span class="line">  # 设置应用 id 和 key</span><br><span class="line">  appid: CCCJixxxxxxXXXxxxXXXX000-gzGzo000</span><br><span class="line">  appkey: AA1RXXXXXhPXXXX00F0XXXJSq</span><br><span class="line">  # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  # 关闭提醒与验证 </span><br><span class="line">  notify: false</span><br><span class="line">  verify: false</span><br><span class="line">  # 文本框占位文字 </span><br><span class="line">  placeholder: 没有问题吗？</span><br><span class="line">  # 需要填写的信息字段 </span><br><span class="line">  meta: [&apos;nick&apos;,&apos;mail&apos;]</span><br><span class="line">  # 默认头像 </span><br><span class="line">  avatar: wavatar</span><br><span class="line">  # 每页显示的评论数 </span><br><span class="line">  pageSize: 10</span><br></pre></td></tr></table></figure><p>这里面我发现一个问题，就是有一些配置项不生效，例如：<strong>meta</strong>、<strong>avatar</strong>，我也不知道是 Hexo 的问题还是 Valine 的问题，我也不懂，就先不管了，因为不影响评论这个功能。</p><p>另外还有一个就是评论的时候总会强制检验邮箱和 url 的规范性，如果没填或者填的不规范就弹框提示，我不知道怎么取消，只好在在 GitHub 提了一个 Issue，详见：<a href="https://github.com/xCss/Valine/issues/168" target="_blank" rel="noopener">https://github.com/xCss/Valine/issues/168</a> ，但是作者一直没回。等了几天，作者回复了，说是我的 Valine 版本太低，让我升级。我看了本地的 Valine 的版本，已经是 v1.3.5 了，然后我就怀疑可能是 Hexo 的版本问题，但是我自己做了很多自定义的配置，改了很多 css、js 文件，不能随便升级，等以后有时间做一个大版本的升级，再好好整理。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7da6215j20u30fsdgb.jpg" alt="强制检验邮箱和 url 的规范性" title="强制检验邮箱和 url 的规范性"></p><p>那怎么才能让博客文章的底部显示评论对话框呢，其实很简单，什么都不用做，Hexo 默认是给每个页面都开启评论的【前提是在 Hexo 的配置文件中开启了一种评论系统】。它背后的配置就是 Markdown 文件的 comments 属性，默认设置是 true，所以不用配置了，如果非要配置也可以，如下图。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7dge614j20e408c0sy.jpg" alt="配置底部显示评论对话框" title="配置底部显示评论对话框"></p><p>此外，还需要注意，如果博客还有除正文内容之外的页面存在，例如关于、分类、标签，要把他们的 Markdown 文件的 comments 属性设置为 false，否则这些页面在展示的时候也会有评论的功能出现，总不能让别人随便评论吧。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7djunr3j20no03iq2r.jpg" alt="取消一些不该有评论的页面" title="取消一些不该有评论的页面"></p><h1 id="测试效果"><a href="# 测试效果" class="headerlink" title="测试效果"></a>测试效果 </h1><p> 打开任意一篇博客文章，可以看到底部已经有评论的文本框了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7e6uw4mj20uk0o2q3s.jpg" alt="查看文章的评论文本框" title="查看文章的评论文本框"></p><p>试着填写内容，评论一下，可以看到评论列表的内容。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7e3f5njj20ta0q3750.jpg" alt="文章的评论列表" title="文章的评论列表"></p><p>好了，此时可以再回到 Leancloud 系统，看一下评论数据吧。直接在 <strong>存储 -&gt; 数据 -&gt;Comment</strong> 里面，可以看到已经有评论数据了。由于 Valine 是无后端的评论系统，所以数据直接被存储到了 Leancloud 系统的数据库表里面，看看就行了，不方便管理。如果评论数据很多，为了更方便管理评论数据，能收到更友好的邮件通知提醒，可以使用 Valine-Admin 来实现，我暂时先不用。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7dzjwhgj21hc0q9jt1.jpg" alt="Leancloud 系统的评论数据" title="Leancloud 系统的评论数据"></p><p>经过几天的测试，可以看到应用的请求量统计信息。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1d7dvlarqj21hc0rwt9f.jpg" alt="Leancloud 系统的应用请求量" title="Leancloud 系统的应用请求量"></p><h1 id="附加 -Valine-Admin- 进行评论数据管理"><a href="# 附加 -Valine-Admin- 进行评论数据管理" class="headerlink" title="附加 Valine-Admin 进行评论数据管理"></a>附加 Valine-Admin 进行评论数据管理 </h1><p> 这个插件我现在先不使用，因为还不知道评论数据会怎么样呢，等以后如果确实有需要再考虑增加，参考项目：<a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">https://github.com/zhaojun1998/Valine-Admin</a> 。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;我的博客已经搭建得差不多了，一些配置也固定下来了，最近重点一直在补充博客内容，把以前的笔记都整理出来。然后有一天我就想，好像总感觉少点什么，发现评论这个功能是没有的。以前是为了追求简洁的风格，而且评论这个功能不稳定，主要是评论系统不好选择，很多都关闭了。思前想后，考虑了好几天，最终还是决定先加上评论功能，实验一阵子，看看有没有必要，后续再决定是取消还是继续，反正也就是改一下配置就行了，没有多大工作量。接下来查了一下当前还活着的评论系统的种类，最后选择了 &lt;strong&gt;Valine&lt;/strong&gt; 这个评论系统。它不需要登录，无后台管理，非常简洁，比较符合我追求的理念。参考相关内容：&lt;a href=&quot;https://github.com/xCss/Valine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/xCss/Valine&lt;/a&gt; 、&lt;a href=&quot;https://valine.js.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://valine.js.org&lt;/a&gt; 、&lt;a href=&quot;https://leancloud.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leancloud.cn&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.playpi.org/categories/building/"/>
    
    
      <category term="Hexo" scheme="https://www.playpi.org/tags/Hexo/"/>
    
      <category term="Valine" scheme="https://www.playpi.org/tags/Valine/"/>
    
      <category term="评论系统" scheme="https://www.playpi.org/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git 客户端设置 Windows 下的字符编码</title>
    <link href="https://www.playpi.org/2019031901.html"/>
    <id>https://www.playpi.org/2019031901.html</id>
    <published>2019-03-19T15:22:16.000Z</published>
    <updated>2019-03-19T15:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>在 Linux 以及大多数托管网站上，默认的字符编码均是 UTF-8，而 Windows 系统默认编码不是 UTF-8，一般是 GBK。如果在 Windows 平台使用 Git 客户端，不设置 Git 字符编码为 UTF-8，Git 客户端在处理中文内容时会出现乱码现象，很是烦人。但是，如果能正确设置字符编码，则可以有效解决处理中文和中文显示的问题。大多数技术从业者应该都遇到过各种各样的编码问题，后来渐渐习惯了使用英文，尽量避免中文，但是也有一些场景是必须使用中文的。本文就记录解决 Git 中文处理和中文显示的问题的过程，系统环境基于 Windows7 X64，Git 基于 v2.18.0。</p><a id="more"></a><h1 id="乱码现象"><a href="# 乱码现象" class="headerlink" title="乱码现象"></a>乱码现象 </h1><p>Git 是一款非常好用的分布式版本控制系统，为了更好地使用它，一般都需要 Git 客户端的配合，下载使用参考：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a> 。</p><p> 在 Windows 平台使用 Git 客户端的过程中，有一个问题你一定逃不掉，那就是乱码问题。这是因为 Windows 系统的编码是 GBK，而 Git 客户端的编码是 UTF-8，当两种不同的编码相遇，必然有一方会乱码。如果设置 Git 客户端的编码为 GBK，那么在使用 Git 客户端处理系统文件的时候可以正常显示，但是处理 Git 版本控制内容的时候，就会乱码，无法支持中文。如果反过来呢，把 Git 客户端的编码设置为 UTF-8，那么处理版本控制内容就可以有效支持中文，但是处理系统文件的时候又会乱码。</p><p>Git 客户端设置 UTF-8 编码，处理系统文件显示乱码 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17blzgl2zj20l50cpjt9.jpg" alt="ls 命令中文乱码" title="ls 命令中文乱码"></p><h1 id="解决方式"><a href="# 解决方式" class="headerlink" title="解决方式"></a> 解决方式 </h1><p> 这样看起来似乎没有解决方法，其实不是的，还是有很好的解决方法的。我这里为了完全支持版本管理系统，版本管理优先，肯定要统一设置为 UTF-8 编码，然后通过 Git 客户端的编码自动转换来支持系统的 GBK 编码。</p><p>这里先提前说明，在使用 Git 客户端的时候，Git 的安装目录【一般默认是 C:\Program Files\Git】，也就是 Git 的根目录。在使用 <strong>ls</strong> 等命令处理文件时，如果携带了 <strong>/</strong> 字符，其实就表示从 Git 的安装目录开始。例如在里面寻找 etc 目录，如果是使用 Git Bash 打开的，可以直接使用根目录的方式，<strong>cd /etc/</strong>。再例如 <strong>vi /etc/git-completion.bash</strong> 不是表示从系统的根目录开始寻找文件【Windows 系统也没有根目录的概念】，而是表示从 Git 的安装目录开始寻找文件。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17bn7wtv0j20nd0dumyg.jpg" alt="Git 安装目录" title="Git 安装目录"></p><h2 id="设置 -Git- 客户端"><a href="# 设置 -Git- 客户端" class="headerlink" title="设置 Git 客户端"></a>设置 Git 客户端 </h2><p> 打开 Git 客户端的主页面，右键打开菜单栏【或者点击窗口的左上角也可以打开】，选择 <strong>Options</strong> 选项。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17bmpt7mnj20l50cp0tw.jpg" alt="Options 选项" title="Options 选项"></p><p>接着选择 <strong>Text</strong> 参数配置，把编码方式由 GBK 改为 UTF-8【locale 也要设置为 zh_CN】。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17bnna4xyj20l50cpacj.jpg" alt="Text 参数配置" title="Text 参数配置"></p><p>设置完成后，一定会导致一个现象，那就是使用 <strong>ls</strong> 查看系统文件时，带有中文的目录和带有中文的文件，一定是乱码的，根本看不清楚显示的是什么。不过不用担心，后面会通过设置让它恢复正常的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17blzgl2zj20l50cpjt9.jpg" alt="ls 命令中文乱码" title="ls 命令中文乱码"></p><p>接下来要解决的是显示的问题，目的是保证 Windows 的 GBK 编码可以在 Git 客户端正常显示。由于 Git 客户端被设置为了 UTF-8 编码，使用 <strong>ls</strong> 命令查看目录文件详情的时候，一定是乱码的，什么也看不出来【数字和英文不受影响】。那就需要设置 <strong>ls</strong> 命令的参数，让它按照 Git 客户端的编码来显示，不支持的字符也要显示，这样再使用 <strong>ls</strong> 命令的时候，就会自动把 GBK 编码转为 UTF-8 编码，那么带有中文的目录、带有中文的文件都能正常显示了。</p><p>最简单的做法，就是需要指定 <strong>ls</strong> 命令的附加参数【–show-control-chars】，为了方便，直接更改配置文件 <strong>/etc/git-completion.bash</strong> 【没有的话新建一个既可】，在行尾增加配置项 <strong>alias ls=”ls –show-control-chars –color”</strong> 。其实就是通过新建别名这个技巧把 <strong>ls</strong> 命令的含义扩展了，让它可以根据 Git 客户端的编码转换系统的编码【在这里就是把 GBK 转为 UTF-8】。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/git-completion.bash</span><br><span class="line">alias ls=&quot;ls --show-control-chars --color&quot;</span><br></pre></td></tr></table></figure><p>更改完成后，可以看到能正常显示系统中的带有中文名称的文件了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17bo2mcrej20l50cpq4y.jpg" alt="ls 可以正常显示中文" title="ls 可以正常显示中文"></p><p>但是还要注意一点，如果使用 Git 客户端的 Bash 处理其它命令，一定会乱码的，因为不像 <strong>ls</strong> 那样做了编码转换。以下 2 例【分别时使用 elasticsearch、java 命令】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g185ktkbutj20l50cp0ul.jpg" alt="elasticsearch 命令乱码" title="elasticsearch 命令乱码"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g185l2lrrhj20l50ghmz2.jpg" alt="java 命令乱码" title="java 命令乱码"></p><p>那这个现象有没有办法解决呢，网上大多数解决办法都是说把 Git 客户端的编码设置为和 Windows 系统一样，一般设置为 GBK，这显然是又倒退回去了【为了满足 Git 一定要设置为 UTF-8】。其实唯一的解决办法就是从命令的参数下手，把原生的命令利用别名机制给加上编码有关的参数，和修改 <strong>ls</strong> 命令的做法一致。以下供参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 在文件最后追加，不要修改文件原有的内容 </span><br><span class="line">vi /etc/bash.bashrc</span><br><span class="line">alias javac=&quot;javac -J-Dfile.encoding=UTF-8&quot;</span><br><span class="line">alias java=&quot;java -Dfile.encoding=UTF-8&quot;</span><br></pre></td></tr></table></figure><h2 id="设置 -Git"><a href="# 设置 -Git" class="headerlink" title="设置 Git"></a>设置 Git</h2><p>接下来就是设置 Git 进行版本控制时使用的编码方式，例如提交信息时支持输入中文日志、输出 log 可以正常显示中文。</p><p>设置 Git 有两种方式，一种是通过更改配置文件，另一种是通过 Git 自带的命令来配置参数。为了显得没有手动去破坏 Git 的原有配置文件，我就使用 Git 自带的命令来配置编码。当然，通过更改配置文件的方式也会一同描述出来。</p><p>1、通过命令行把 Git 的各种编码都设置为 UTF-8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false          # 显示 status 编码 </span><br><span class="line">git config --global gui.encoding utf-8            # 图形界面编码 </span><br><span class="line">git config --global i18n.commit.encoding utf-8    # 处理提交信息编码 </span><br><span class="line">git config --global i18n.logoutputencoding utf-8  # 输出 log 编码 </span><br><span class="line">export LESSCHARSET=utf-8                          # 因为 git log 默认使用 less 分页，所以需要 bash 对 less 命令处理时使用 utf-8 编码 </span><br></pre></td></tr></table></figure><p>2、如果通过配置文件的方式来更改，则需要编辑配置文件 <strong>/etc/gitconfig</strong> 【没有则新建一个】，在里面设置以下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">        quotepath = false </span><br><span class="line">[gui]</span><br><span class="line">        encoding = utf-8 </span><br><span class="line">[i18n]</span><br><span class="line">        commitencoding = utf-8 </span><br><span class="line">        logoutputencoding = utf-8</span><br></pre></td></tr></table></figure><p>另外还需要在配置文件 <strong>/etc/profile</strong> 中新增 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LESSCHARSET=utf-8</span><br></pre></td></tr></table></figure><p>3、特殊说明</p><p><strong>gui.encoding = utf-8</strong> 是为了解决 git gui 和 gitk 中的中文乱码问题，如果发现代码中的注释显示乱码，可以在所属项目的根目录中 <strong>.git/config</strong> 文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[gui]</span><br><span class="line">        encoding = utf-8</span><br></pre></td></tr></table></figure><p><strong>i18n.commitencoding = utf-8</strong> 是为了设置 commit log 提交时使用 UTF-8 编码。<br><strong>i18n.logoutputencoding = utf-8</strong> 是为了保证在 <strong>git log</strong> 时使用 UTF-8 编码。<br><strong>export LESSCHARSET=utf-8</strong> 是为了保证 <strong>git log</strong> 翻页时使用 UTF-8 编码，这样就可以正常显示中文了【配合前面的 <strong>i18n.logoutputencoding</strong> 设置】。</p><h2 id="验证"><a href="# 验证" class="headerlink" title="验证"></a> 验证 </h2><p>add 执行的时候 Git 输出的日志都是中文显示的，特别是带有中文名称的文件。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17bv0ph2yj20l50f20uh.jpg" alt="add 命令输出中文" title="add 命令输出中文"></p><p> 验证提交时填写日志信息，可以直接填写中文日志，另外 Git 的输出日志也是以中文来显示的，可以看到哪些文件变更了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17boorhqyj20l50cpgn8.jpg" alt="验证提交时填写中文日志" title="验证提交时填写中文日志"></p><p>验证使用 <strong>git log</strong> 查看历史日志时正常显示中文内容 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17bosnlsnj20l50cp0tt.jpg" alt="查看历史日志时正常显示中文内容 1" title="查看历史日志时正常显示中文内容 1"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g17box3cduj20l50cp3zx.jpg" alt="查看历史日志时正常显示中文内容 2" title="查看历史日志时正常显示中文内容 2"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项</h1><p>1、此外，Cygwin 在 Windows 平台上也有同样的问题，设置方式也是类似的。当然，如果只是查看目录文件，使用基本的命令，请尽量脱离带有中文的目录和带有中文的文件，避免踩坑，这样还可以把编码直接设置为 GBK 了，但是遇到特殊的情况还是脱离不了 UTF-8 编码。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在 Linux 以及大多数托管网站上，默认的字符编码均是 UTF-8，而 Windows 系统默认编码不是 UTF-8，一般是 GBK。如果在 Windows 平台使用 Git 客户端，不设置 Git 字符编码为 UTF-8，Git 客户端在处理中文内容时会出现乱码现象，很是烦人。但是，如果能正确设置字符编码，则可以有效解决处理中文和中文显示的问题。大多数技术从业者应该都遇到过各种各样的编码问题，后来渐渐习惯了使用英文，尽量避免中文，但是也有一些场景是必须使用中文的。本文就记录解决 Git 中文处理和中文显示的问题的过程，系统环境基于 Windows7 X64，Git 基于 v2.18.0。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Git" scheme="https://www.playpi.org/tags/Git/"/>
    
      <category term="Windows" scheme="https://www.playpi.org/tags/Windows/"/>
    
      <category term="中文乱码" scheme="https://www.playpi.org/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
      <category term="gbk" scheme="https://www.playpi.org/tags/gbk/"/>
    
      <category term="utf-8" scheme="https://www.playpi.org/tags/utf-8/"/>
    
  </entry>
  
  <entry>
    <title>麻婆豆腐做法总结</title>
    <link href="https://www.playpi.org/2019031601.html"/>
    <id>https://www.playpi.org/2019031601.html</id>
    <published>2019-03-16T13:07:13.000Z</published>
    <updated>2019-03-16T13:07:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>麻婆豆腐是一道川菜，口味特色就是麻、辣、鲜，而且非常下饭。我常听说正宗的麻婆豆腐要用郫县豆瓣酱【回锅肉也是这样】，才能做出来正宗的味道，但是我身边没有那么多材料，只能做一道简单版的麻婆豆腐。本文就记录麻婆豆腐的做法总结。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 食材就很简单了，以下的量为一盘：</p><ul><li>嫩豆腐一块，一般 2 块钱左右 </li><li> 瘦肉 50 克，剁成肉沫 </li><li> 豆瓣酱，我没有豆瓣酱就用一种混合调味酱【辣椒酱、豆瓣酱、胡椒粉】替代了 </li><li> 辣椒粉，或者辣椒酱 </li><li> 青花椒，最好用青花椒，才够麻的味道【买的散装青花椒里面会有一些其它植物的种子，要细心挑拣出去】</li></ul><p>一块嫩豆腐 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mdpgmo7j229s29snpd.jpg" alt="一块嫩豆腐" title="一块嫩豆腐"></p><p> 青花椒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15me1xf07j229s29snpd.jpg" alt="青花椒" title="青花椒"></p><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a> 制作步骤 </h1><h2 id="初步处理食材"><a href="# 初步处理食材" class="headerlink" title="初步处理食材"></a> 初步处理食材 </h2><p> 豆腐切小块，稍微焯水，备用。如果豆腐质量比较好的话，可以一整块冲一下水就行，不用再焯水了。我买的这个豆腐有点碱的味道【类似魔芋一样】，所以稍微焯一下水为好。焯水时不能用大火，否则豆腐会碎掉的，也可以在焯水时稍微放一点点盐进去。</p><p>豆腐切小块 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15meleoz3j229s29skjl.jpg" alt="豆腐切小块" title="豆腐切小块"></p><p> 豆腐简单焯水 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15meu18t2j229s29s4qq.jpg" alt="豆腐简单焯水" title="豆腐简单焯水"></p><p> 瘦肉剁成肉沫，稍微腌制一下，备用。我为了保持肉沫的鲜嫩，还裹了一层淀粉液。<br>瘦肉剁成肉沫 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mf2x2shj229s29shdu.jpg" alt="瘦肉剁成肉沫" title="瘦肉剁成肉沫"></p><p> 肉沫腌制 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mf7k4lij229s29sb29.jpg" alt="肉沫腌制" title="肉沫腌制"></p><p> 肉沫裹淀粉液 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mfc810oj229s29s7wh.jpg" alt="肉沫裹淀粉液" title="肉沫裹淀粉液"></p><h2 id="炒肉沫"><a href="# 炒肉沫" class="headerlink" title="炒肉沫"></a> 炒肉沫 </h2><p> 锅里放油烧热，稍微多放一点油，然后倒入肉沫翻炒，基本 30 秒就可以了。<br>肉沫下锅 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mgbgss2j229s29s7wi.jpg" alt="肉沫下锅" title="肉沫下锅"></p><p> 肉沫翻炒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mgghk4kj229s29s7wi.jpg" alt="肉沫翻炒" title="肉沫翻炒"></p><h2 id="炒豆腐"><a href="# 炒豆腐" class="headerlink" title="炒豆腐"></a> 炒豆腐 </h2><p> 一般的做法应该是接着放豆瓣酱，炒出红油，然后加青花椒、辣椒粉，加水煮了一段时间后，再下豆腐。但是我就不搞这么复杂的过程了，直接炒一下豆腐，把豆腐和肉沫混合在一起。<br>豆腐下锅炒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mh0jf5jj229s29sx6p.jpg" alt="豆腐下锅炒" title="豆腐下锅炒"></p><p> 豆腐肉沫混合 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mh4vb6jj229s29s1ky.jpg" alt="豆腐肉沫混合" title="豆腐肉沫混合"></p><p> 加混合调味酱、辣椒酱、调味料、青花椒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mhb1f5bj229s29se82.jpg" alt="加酱料" title="加酱料"></p><h2 id="加水开煮"><a href="# 加水开煮" class="headerlink" title="加水开煮"></a> 加水开煮 </h2><p> 因为我的豆腐已经焯水了，所以很容易就熟了，接着再加热水煮开，转为小火再煮 5 分钟就行了。切记别加太多热水，否则变汤了，我这个加的有点多，要多煮一会儿水才能蒸发。<br>加热水，刚刚淹没豆腐 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mi8u826j229s29s1ky.jpg" alt="加热水，刚刚淹没豆腐" title="加热水，刚刚淹没豆腐"></p><p> 煮开后转为小火 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mignd6yj229s29sb2a.jpg" alt="煮开后转为小火" title="煮开后转为小火"></p><p> 小火慢煮 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mindngjj229s29sb2a.jpg" alt="小火慢煮" title="小火慢煮"></p><h2 id="收汁出锅装盘"><a href="# 收汁出锅装盘" class="headerlink" title="收汁出锅装盘"></a> 收汁出锅装盘 </h2><p> 煮了 5 分钟就可以准备收汁了，接着还要进行勾芡，我使用淀粉液进行勾芡。勾芡完成稍微再煮 30 秒就可以关火，出锅装盘。</p><p>收汁 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mirmvljj229s29s4qq.jpg" alt="收汁" title="收汁"></p><p> 调淀粉液，少量淀粉加水 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mixp0uzj229s29shdt.jpg" alt="调淀粉液，少量淀粉加水" title="调淀粉液，少量淀粉加水"></p><p> 调淀粉液成品 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mj2h97cj229s29sqv5.jpg" alt="调淀粉液成品" title="调淀粉液成品"></p><p> 勾芡完成，可以看到有点浓稠 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mnev10jj229s29se82.jpg" alt="勾芡完成，可以看到有点浓稠" title="勾芡完成，可以看到有点浓稠"></p><p> 出锅装盘 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mjau8njj229s29skjm.jpg" alt="出锅装盘" title="出锅装盘"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项</h1><p>1、为了保证肉沫的鲜嫩，千万不要炒太久，下锅后稍微炒一下就行了，因为后续还要加水煮很久呢。我这里没有采用炒豆瓣酱出红油的做法，所以就用淀粉液裹了一下，肉沫炒熟后直接下豆腐。</p><p>2、切豆腐时豆腐一般都会粘在刀上，所以有一个技巧就是从手心往手指的方向反着切，切完一刀就可以用手压住，这样豆腐就不会粘在刀上了。参考如下图【我是左手持刀，右手压豆腐】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g15mjlrsb8j229s29s4qq.jpg" alt="反向切豆腐" title="反向切豆腐"></p><p>3、收汁时最好使用淀粉液勾芡一下，这样才能保证调味料都裹在豆腐上，达到入味的效果。否则味道可能都遗落在汤汁里面了，导致豆腐没有什么味道。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;麻婆豆腐是一道川菜，口味特色就是麻、辣、鲜，而且非常下饭。我常听说正宗的麻婆豆腐要用郫县豆瓣酱【回锅肉也是这样】，才能做出来正宗的味道，但是我身边没有那么多材料，只能做一道简单版的麻婆豆腐。本文就记录麻婆豆腐的做法总结。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="麻婆豆腐" scheme="https://www.playpi.org/tags/%E9%BA%BB%E5%A9%86%E8%B1%86%E8%85%90/"/>
    
      <category term="豆腐" scheme="https://www.playpi.org/tags/%E8%B1%86%E8%85%90/"/>
    
      <category term="麻辣豆腐" scheme="https://www.playpi.org/tags/%E9%BA%BB%E8%BE%A3%E8%B1%86%E8%85%90/"/>
    
  </entry>
  
  <entry>
    <title>青椒肉丝做法总结</title>
    <link href="https://www.playpi.org/2019031101.html"/>
    <id>https://www.playpi.org/2019031101.html</id>
    <published>2019-03-10T18:38:01.000Z</published>
    <updated>2019-03-12T14:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>青椒肉丝，本来是一道做法非常简单的菜肴，但是想做好却不容易，为什么呢？一是因为肉丝和青椒丝很多人切不出来，可能切出来的是条状的，那就做不出来青椒肉丝；二是因为腌制肉的时候没有进行裹淀粉的步骤【有条件裹鸡蛋清当然更好】，导致肉刚下锅就老，炒不出鲜嫩滑爽的效果；三是因为炒的时候油量和油温没有控制好，导致肉炒老了，不好吃。本文则记录青椒肉丝的炒制过程以及需要注意的地方，请观察一下我是怎么做出来一道家常的青椒肉丝的。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 食材就很简单了，以下是一盘的份量：</p><ul><li>纯瘦肉 200 克 </li><li> 大青椒一棵 </li><li> 大红椒一棵【为了好看，搭配一棵红椒】</li><li>淀粉少量、花生油少量 </li></ul><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a> 制作步骤 </h1><h2 id="食材处理"><a href="# 食材处理" class="headerlink" title="食材处理"></a> 食材处理 </h2><p> 主要就是切肉丝，切青椒丝，腌制肉丝，注意肉丝要切细一点。切肉丝的时候先把肉切片【一只手掌按着肉，刀躺着从手掌下划过】，最后用肉片去切肉丝，可以保证肉丝的质量。腌制肉丝的时候除了调味料，还需要加一点点水和淀粉【淀粉不要多放，否则菜炒出来会偏甜】，用手抓均匀，让淀粉液充分裹在肉丝表面【有条件就用鸡蛋清替代更好，但是肉丝少的时候就没必要了，用不完一个鸡蛋】。最后还要加一点点花生油，防止肉丝下锅的时候粘锅。肉丝腌制 10 分钟。</p><p>青红椒切丝 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fw75eifj229s29shdt.jpg" alt="青红椒切丝" title="青红椒切丝"></p><p> 腌制肉丝加调料 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10funjj97j229s29se81.jpg" alt="腌制肉丝加调料" title="腌制肉丝加调料"></p><p> 腌制肉丝加水和淀粉 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fvj4muxj229s29s1ky.jpg" alt="腌制肉丝加水和淀粉" title="腌制肉丝加水和淀粉"></p><p> 抓均匀后放一点花生油 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fvxca54j229s29sx6p.jpg" alt="抓均匀后放一点花生油" title="抓均匀后放一点花生油"></p><h2 id="肉丝炒制，盛出备用"><a href="# 肉丝炒制，盛出备用" class="headerlink" title="肉丝炒制，盛出备用"></a> 肉丝炒制，盛出备用 </h2><p> 锅里加油，多加一点，先烧热，然后关火让油冷却一下。冷却到 3 成热再倒入肉丝，然后开大火开始翻炒，基本 30 秒就可以把肉丝炒熟了【取决于肉丝切得好不好】。然后盛出备用。</p><p>油加热后冷却 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fwionwoj229s29shdu.jpg" alt="油加热后冷却" title="油加热后冷却"></p><p> 倒入腌制好的肉丝 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fwrw22wj229s29s7wi.jpg" alt="倒入腌制好的肉丝" title="倒入腌制好的肉丝"></p><p> 不停地翻炒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fx1x7c8j229s29sb2a.jpg" alt="不停地翻炒" title="不停地翻炒"></p><p> 盛出备用 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fxc44nlj229s29s4qq.jpg" alt="盛出备用" title="盛出备用"></p><h2 id="青椒炒制，混合翻炒"><a href="# 青椒炒制，混合翻炒" class="headerlink" title="青椒炒制，混合翻炒"></a> 青椒炒制，混合翻炒 </h2><p> 由于一开始加了偏多的油，此时不需要再放油，或者根据实际情况放一点点也行。油烧热后放入青红椒丝，大火快速翻炒，基本 1 分钟以内就可以把青红椒丝炒至断生。关小火，放入备用的肉丝，翻炒几下，开始调味，放入食用盐、鸡精、耗油，接着大火快速翻炒几下，放几滴香醋，准备出锅。</p><p>放入青红椒丝翻炒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fxn3q87j229s29s1ky.jpg" alt="放入青红椒丝翻炒" title="放入青红椒丝翻炒"></p><p> 翻炒至断生【为了拍图青红椒丝炒太熟了】<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fxw4b92j229s29s4qq.jpg" alt="翻炒至断生" title="翻炒至断生"></p><p>放入肉丝调味翻炒 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fyjb9j8j229s29s1ky.jpg" alt="放入肉丝调味翻炒" title="放入肉丝调味翻炒"></p><h2 id="出锅装盘"><a href="# 出锅装盘" class="headerlink" title="出锅装盘"></a> 出锅装盘 </h2><p> 盛出装盘 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fyubmo8j229s29s7wi.jpg" alt="盛出装盘" title="盛出装盘"></p><p> 还配了一道麻婆豆腐 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g10fyyqu9wj229s29se82.jpg" alt="麻婆豆腐" title="麻婆豆腐"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项</h1><p>1、买肉一定要买纯瘦肉，最好不要带一丝肉筋，并且形状要规整，薄厚均匀，这样才容易切片进而切肉丝。买肉的时候肯定不需要店方帮忙切肉了，因为他们不可能有时间给你切肉丝出来。此外一定要保证刀比较锋利，锋利的刀更容易处理，如果刀用了很久都没磨过，恰好找这个机会磨磨刀。</p><p>2、腌制肉丝的时候可以适当加一点水【用来溶解淀粉】，然后加一点淀粉，抓均匀，让淀粉充分裹上肉丝。当然，有条件的直接使用鸡蛋清最好，不需要水和淀粉了，味道还更香。抓均匀后再加一点花生油，防止下锅的时候粘锅。</p><p>3、肉丝下锅之前要确保油温不高，如果油温过高要开小火让油冷却一下，否则裹着淀粉的肉丝一下锅表面就会糊掉。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;青椒肉丝，本来是一道做法非常简单的菜肴，但是想做好却不容易，为什么呢？一是因为肉丝和青椒丝很多人切不出来，可能切出来的是条状的，那就做不出来青椒肉丝；二是因为腌制肉的时候没有进行裹淀粉的步骤【有条件裹鸡蛋清当然更好】，导致肉刚下锅就老，炒不出鲜嫩滑爽的效果；三是因为炒的时候油量和油温没有控制好，导致肉炒老了，不好吃。本文则记录青椒肉丝的炒制过程以及需要注意的地方，请观察一下我是怎么做出来一道家常的青椒肉丝的。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="青椒肉丝" scheme="https://www.playpi.org/tags/%E9%9D%92%E6%A4%92%E8%82%89%E4%B8%9D/"/>
    
      <category term="青红椒" scheme="https://www.playpi.org/tags/%E9%9D%92%E7%BA%A2%E6%A4%92/"/>
    
      <category term="炒肉丝" scheme="https://www.playpi.org/tags/%E7%82%92%E8%82%89%E4%B8%9D/"/>
    
  </entry>
  
  <entry>
    <title>腊肠炒饭做法总结</title>
    <link href="https://www.playpi.org/2019030901.html"/>
    <id>https://www.playpi.org/2019030901.html</id>
    <published>2019-03-08T17:06:17.000Z</published>
    <updated>2019-03-08T17:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>蛋炒饭，是一种常见的菜肴，日常生活中听到的最多的就是扬州炒饭、传统炒饭。其实炒饭的做法非常多，口味也非常多，还被改成了很多版本，例如：虾仁炒饭、滑蛋炒蛋、老干妈炒饭。但无论怎么改变，它们的共同点都是做法简单，准备米饭和配菜就行了，炒出来吃起来香喷喷的，口感极好，也不用单独配其它的菜了，很方便。本文就记录腊肠炒饭的家常做法。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 以下准备的是两人份的食材：</p><ul><li>腊肠，我这里选择的皇上皇腊肠，口味偏甜了，不适合炒饭，去买的时候广州酒家的咸香腊肠卖光了，先凑合着用 </li><li> 鸡蛋 2 个 </li><li> 米饭 2 小碗 </li><li> 青菜 1 小棵，普通的青菜即可，或者放绿豌豆也行，主要为了点缀一下 </li><li> 胡萝卜 1 小段 </li></ul><p> 腊肠，我买的这种偏甜了，不适合炒饭，下次还是买广州酒家的咸香腊肠比较好。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wn7ix32qj229s29s7wi.jpg" alt="皇上皇腊肠" title="皇上皇腊肠"></p><p>米饭 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wn80ipw8j229s29skjl.jpg" alt="米饭" title="米饭"></p><p> 全部食材 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wn8yzvcyj229s29shdu.jpg" alt="全部食材" title="全部食材"></p><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a> 制作步骤 </h1><h2 id="1、处理配菜"><a href="#1、处理配菜" class="headerlink" title="1、处理配菜"></a>1、处理配菜</h2><p> 配菜全部都切好备用：青菜切碎，腊肠切斜片，胡萝卜切丁，鸡蛋打入碗里搅拌，米饭捣碎。这里需要注意的有三点：一是胡萝卜要去皮，更能凸显颜色，而且没有胡萝卜皮的影响，炒饭吃起来口感也更好。二是米饭要捣碎，让米粒分开，不要一整块下锅，所以最好选择比较干硬的米饭来做炒饭，炒起来更方便，口感也更好。三是搅拌鸡蛋之前可以稍微放一点点食用盐，这样做为了鸡蛋更入味。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wn9b6cd2j229s29sb2a.jpg" alt="所有配菜处理完成" title="所有配菜处理完成"></p><h2 id="2、炒鸡蛋备用"><a href="#2、炒鸡蛋备用" class="headerlink" title="2、炒鸡蛋备用"></a>2、炒鸡蛋备用 </h2><p> 开火，锅里放油，一定要多放点油，因为鸡蛋非常吃油。放多点没关系，因为后续炒饭可以少放点。油烧热后，把鸡蛋液倒放进去，摇晃炒锅，让鸡蛋在里面呈圆形，防止鸡蛋液堆在一起。如果鸡蛋液太多了，可以在底部的鸡蛋液成型后，用锅铲拨到一边，让上边的鸡蛋液流下来，继续成型。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wn9xwk8jj229s29s1ky.jpg" alt="鸡蛋液入锅成型" title="鸡蛋液入锅成型"></p><p>鸡蛋基本成型后，就可以用锅铲搅拌捣碎。实际上用炒勺做就方便一点，如果是用锅铲就不太方便。这里需要注意，鸡蛋不要炒制太熟，要让它保持嫩嫩的，因为等一下还要和米饭一起重新下锅。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wna3znwnj229s29sb2a.jpg" alt="捣碎嫩鸡蛋" title="捣碎嫩鸡蛋"></p><p>捣碎后盛出备用，如果有时间的话，可以把鸡蛋的蛋清和蛋黄分别炒制，做出来的颜色会更好看。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wna81hkqj229s29sx6p.jpg" alt="盛出备用" title="盛出备用"></p><h2 id="3、炒配菜和饭"><a href="#3、炒配菜和饭" class="headerlink" title="3、炒配菜和饭"></a>3、炒配菜和饭 </h2><p> 鸡蛋盛出后，锅里表面其实还有大量的油，接着再稍微放一点点油就行了。继续加热，放入腊肠片、胡萝卜、碎青菜，大火炒 30 秒。<br>加腊肠片 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wnbf5yncj229s29shdu.jpg" alt="加腊肠片" title="加腊肠片"></p><p> 加胡萝卜青菜【我忘记放碎青菜了，出锅前才补上，看后面的图】<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wnbjhtc3j229s29s4qq.jpg" alt="加胡萝卜青菜" title="加胡萝卜青菜"></p><p>接着就开始加入米饭和刚才的鸡蛋，我这个米饭看起来是一块一块的，其实一碰就散了，开大火不停地翻炒。翻炒 3 分钟左右【如果一开始米饭没有捣碎，或者刚从冰箱拿出来的冷米饭，炒起来会比较慢】，基本就熟了，关小火，准备调味。</p><p>加入米饭和鸡蛋 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wnbopeilj229s29s1ky.jpg" alt="加入米饭和鸡蛋" title="加入米饭和鸡蛋"></p><p> 炒熟了，准备调味 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wnbti2c7j229s29sb2a.jpg" alt="准备调味" title="准备调味"></p><h2 id="4、调味出锅"><a href="#4、调味出锅" class="headerlink" title="4、调味出锅"></a>4、调味出锅</h2><p> 放入盐、鸡精、生抽、老抽，然后继续开大火，翻炒几十秒，出锅装盘，美滋滋。我还放了一点榨菜和辣椒酱。</p><p>放入调味料，因为放了老抽，可以看到颜色有一点点变化 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wnc0a62gj229s29shdu.jpg" alt="调味完成" title="调味完成"></p><p> 前面忘记放青菜了，补回来 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wngewbgvj229s29shdu.jpg" alt="补加青菜" title="补加青菜"></p><p> 出锅装盘，这图片有点糊了 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0wnc81e80j229s29s1ky.jpg" alt="出锅装盘" title="出锅装盘"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项</h1><p>1、米饭的选择，米饭不是随便都适合做炒饭的，要选择那种稍微干硬一点的，米粒都分开的，炒出来会更香。如果是剩米饭，已经是一整块了，千万不要一整块的下锅，很难分开，要提前捣碎，处理好再下锅炒。</p><p>2、一开始炒鸡蛋的时候，不要炒制太熟，要保持嫩嫩的，因为后面还要和米饭一起下锅。</p><p>3、腊肠的选择，不要选择偏甜的口味，否则最终的炒饭吃起来会有点腻，所以还是选择咸香的口味比较好。广州酒家的那种咸香的腊肠，用来炒饭真的很合适。</p><p>4、关于分量的建议，一般做炒饭至少两人的份量。因为如果只炒一份，各种菜只能放一点，放多了就不是炒饭了。那问题来了，剩下的菜不好办【半个胡萝卜、半棵青菜】，又不能存放太久，只能下次接着炒，甚至连续吃炒饭。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;蛋炒饭，是一种常见的菜肴，日常生活中听到的最多的就是扬州炒饭、传统炒饭。其实炒饭的做法非常多，口味也非常多，还被改成了很多版本，例如：虾仁炒饭、滑蛋炒蛋、老干妈炒饭。但无论怎么改变，它们的共同点都是做法简单，准备米饭和配菜就行了，炒出来吃起来香喷喷的，口感极好，也不用单独配其它的菜了，很方便。本文就记录腊肠炒饭的家常做法。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="腊肠炒饭" scheme="https://www.playpi.org/tags/%E8%85%8A%E8%82%A0%E7%82%92%E9%A5%AD/"/>
    
      <category term="蛋炒饭" scheme="https://www.playpi.org/tags/%E8%9B%8B%E7%82%92%E9%A5%AD/"/>
    
      <category term="鸡蛋炒饭" scheme="https://www.playpi.org/tags/%E9%B8%A1%E8%9B%8B%E7%82%92%E9%A5%AD/"/>
    
      <category term="炒饭" scheme="https://www.playpi.org/tags/%E7%82%92%E9%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github 的 WebHooks 实现代码自动更新</title>
    <link href="https://www.playpi.org/2019030601.html"/>
    <id>https://www.playpi.org/2019030601.html</id>
    <published>2019-03-06T15:13:32.000Z</published>
    <updated>2019-03-07T15:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>我的静态博客为了百度爬虫单独部署了一个镜像，放在了我的 VPS 上面【在 vultr 购买的主机】，并单独设置了二级域名 blog.playpi.org。但是，每次 GitHub 有新的提交时【基本每周都会有至少三次提交】，为了及时更新，我都会登录到 VPS 上面，到指定的项目下做一下拉取更新的操作，即执行 <strong>git pull</strong>。这样操作了三五次，我就有点不耐烦了，自己身为做技术的人，怎么能忍受这个呢，做法既低效又不优雅。于是，我就在想有没有更好的方法来实现自动拉取更新。一开始想到，直接在 VPS 起一个周期性脚本不就行了，比如每隔 1 分钟自动执行 <strong>git pull</strong>，但是立马又被我否定了，虽然做法很简单，但是太不优雅了，而且极大浪费 CPU。后来想到，GitHub 自带了 WebHooks 功能，概念类似于回调钩子，可以给 GitHub 的项目设置各种各样的行为，满足一定的场景才会触发【例如当有新的 push 时，就会向设置的 url 发送请求，并且在请求体中携带 push 的相关信息】。我的自动化构建就是这样的原理，每当 source 分支有提交时，都会通知 tavis-ci【这就是一个行为】，然后在 travis-ci 中设置好脚本，自动运行脚本，就完成了自动生成、部署的操作。</p><p>根据这个思路，就可以给 GitHub 的项目设置一个 WebHooks，每当 master 分支有提交时【代表着静态博客有更新了】，会根据设置的链接自动发送消息到 VPS 上面，然后 VPS 再执行拉取更新，这样的话就优雅多了。但是问题又来了，满足这种场景还需要在 VPS 设置一个后台服务，用来接收 GitHub 的消息通知并执行拉取更新的操作。我想了一下，既然 VPS 上面已经起了 Nginx 服务，那就要充分利用起来，给 Nginx 设置好反向代理，把指定的请求转给另外一个服务就行了。那这个服务怎么选呢，当然是选择 PHP 后台了，毕竟 PHP 号称世界上最好的语言， PHP 后台搭建起来也容易。本文就记录从基础环境安装配置到成功实现自动拉取更新的整个过程，本文涉及的系统环境是 CentOS 7 x64，软件版本会在操作中具体指明。</p><a id="more"></a><h1 id="配置服务器的 -PHP- 支持"><a href="# 配置服务器的 -PHP- 支持" class="headerlink" title="配置服务器的 PHP 支持"></a>配置服务器的 PHP 支持 </h1><p>VPS 上面的 Nginx 已经安装好了，就不再赘述过程，不清楚的可以参考我的另外一篇文章：<a href="https://www.playpi.org/2019010501.html">GitHub Pages 禁止百度蜘蛛爬取的问题</a> 。配置 PHP 的后台服务支持主要有三个步骤：一是配置安装 PHP，包括附加模块 PHP-FPM，二是配置启动 PHP-FPM 模块，三是配置重启 Nginx。由于我的机器资源问题【配置太低】，在这个过程踩了很多坑，我也会一一记录下来。</p><p> 毕竟我是新手，有很多地方不是太懂，所以先参考了官网和一些别人的博客，有时候看多了也会迷惑，有些内容大家描述的不一样，所以要结合自己的实际环境来操作，有些步骤是可以省略的。这些链接我放在这里给大家参考：<a href="https://secure.php.net/manual/zh/install.unix.nginx.php" target="_blank" rel="noopener">参考 PHP 官网 </a> 、<a href="https://segmentfault.com/a/1190000013344675" target="_blank" rel="noopener">CentOS 7.2 环境搭建实录 (第二章：php 安装)</a> 、<a href="https://learnku.com/articles/23694" target="_blank" rel="noopener">PHP-FPM 与 Nginx 的通信机制总结</a> 、<a href="https://qq52o.me/2482.html" target="_blank" rel="noopener"> 使用 Github 的 WebHooks 实现生产环境代码自动更新 </a> 。</p><p> 先安装软件仓库，我的已经安装好了，重复安装也没影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure><h2 id="踩着坑安装 -PHP"><a href="# 踩着坑安装 -PHP" class="headerlink" title="踩着坑安装 PHP"></a>踩着坑安装 PHP</h2><p>1、下载指定版本的 PHP 源码，我这里选择了最新的版本 7.3.3，然后解压。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 下载 </span><br><span class="line">wget http://php.net/get/php-7.3.3.tar.gz/from/this/mirror -O ./php-7.3.3.tar.gz</span><br><span class="line">-- 解压 </span><br><span class="line">tar zxvf php-7.3.3.tar.gz</span><br></pre></td></tr></table></figure><p>2、configure【配置】，指定 PHP 安装目录【默认是 /usr/local/php，使用 <strong>–prefix</strong> 参数】和 PHP 配置目录【默认和 PHP 安装目录一致，使用 <strong>–with-config-file-path</strong> 参数】，我这里特意指定各自的目录，更方便管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 配置，并且开启 PHP-FPM 模块 [使用 --enable-fpm 参数]</span><br><span class="line">./configure --prefix=/site/php/--with-config-file-path=/site/php/conf/--enable-fpm</span><br></pre></td></tr></table></figure><p>遇到报错：<strong>configure: error: no acceptable C compiler found in $PATH</strong>。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167nenhspj20jt06tglu.jpg" alt="缺少 c 编译器" title="缺少 c 编译器"></p><p>竟然缺少 c 编译器，那就安装吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 安装 gcc 编译器 </span><br><span class="line">yum install gcc</span><br></pre></td></tr></table></figure><p>安装 gcc 编译器成功 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167o1kn4dj21hc0mrgna.jpg" alt="安装 gcc 编译器 1" title="安装 gcc 编译器 1"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167ol7hilj21hc0mrjsx.jpg" alt="安装 gcc 编译器 2" title="安装 gcc 编译器 2"></p><p> 安装 gcc 编译器完成后，接着执行配置，又报错：<strong>configure: error: libxml2 not found. Please check your libxml2 installation.</strong>。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167p2bqdaj20l20bxq3h.jpg" alt="缺少对应的依赖环境库" title="缺少对应的依赖环境库"></p><p>这肯定是缺少对应的依赖环境库，接着安装就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 安装 2 个，环境库 </span><br><span class="line">yum install libxml2</span><br><span class="line">yum install libxml2-devel -y</span><br></pre></td></tr></table></figure><p>安装依赖环境库成功 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167pq2doqj21hc0mrabc.jpg" alt="安装环境库完成" title="安装环境库完成"></p><p> 接着就重复上述的配置操作，顺利通过配置。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167qgfhy8j21hc0mrta5.jpg" alt="执行配置完成" title="执行配置完成"></p><p>3、编译、安装。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 编译，安装一起进行 </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p></p><p>遇到报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cc: internal compiler error: Killed (program cc1)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;http://bugzilla.redhat.com/bugzilla&gt; for instructions.</span><br><span class="line">make: *** [ext/fileinfo/libmagic/apprentice.lo] Error 1</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167qyojuij20rn0563yp.jpg" alt="编译安装内存不够报错" title="编译安装内存不够报错"></p><p>这是由于服务器内存小于 1G 所导致编译占用资源不足【好吧，我的服务器一共就 512M 的内存，当然不足】。解决办法：在编译参数后面加上一行内容 <strong>–disable-fileinfo</strong>，减少内存的开销。</p><p>接着执行编译又报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cc: internal compiler error: Killed (program cc1)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;http://bugzilla.redhat.com/bugzilla&gt; for instructions.</span><br><span class="line">make: *** [Zend/zend_execute.lo] Error 1</span><br></pre></td></tr></table></figure><p>这是因为虚拟内存不够用，我的主机只有 512M。没办法了，降低版本试试，先降为 v7.0.0【或者开启 swap 试试，后面发现不用了，切换低版本后就成功了】，接着重新下载、配置、编译、安装，从头再来一遍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 下载的时候更改版本号就行 </span><br><span class="line">wget http://php.net/get/php-7.0.0.tar.gz/from/this/mirror -O ./php-7.0.0.tar.gz</span><br></pre></td></tr></table></figure><p>更换了版本后，一切操作都很顺利，就不再考虑开启 swap 了，最终执行编译、安装完成。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167tfxfarj20iv0mr3zs.jpg" alt="执行编译安装完成" title="执行编译安装完成"></p><h2 id="真正开始配置"><a href="# 真正开始配置" class="headerlink" title="真正开始配置"></a>真正开始配置 </h2><p> 配置、编译、安装完成后，开始编辑各个模块的配置文件，更改默认参数，包括配置 PHP 与 PHP-FPM 模块。确认配置无误，再启动对应的服务或者重新加载对应的配置【也可以使用命令验证参数配置是否正确，下文会有描述】。</p><h3 id="PHP- 配置文件"><a href="#PHP- 配置文件" class="headerlink" title="PHP 配置文件"></a>PHP 配置文件 </h3><p> 在执行编译安装的目录，复制配置文件 <strong>php.ini-development</strong> 粘贴到 PHP 的配置目录【如果一开始 configure 时没有显示指定 PHP 的配置目录，默认应该和 PHP 的安装目录一致，也就是要复制粘贴在 /usr/local/php 中，而我指定了 PHP 的配置目录 /site/php/conf】。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp php.ini-development/site/php/conf/php.ini</span><br></pre></td></tr></table></figure><p>更改 PHP 的配置文件，修改部分参数，更改 <strong>cgi.fix_pathinfo</strong> 的值为 0，以避免遭受恶意脚本注入的攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /site/php/conf/php.ini</span><br><span class="line">cgi.fix_pathinfo=0</span><br></pre></td></tr></table></figure><h3 id="PHP-FPM- 配置文件"><a href="#PHP-FPM- 配置文件" class="headerlink" title="PHP-FPM 配置文件"></a>PHP-FPM 配置文件 </h3><p> 在 PHP 的安装目录中，找到 etc 目录【如果在一开始的 configure 时没有显示指定 PHP 的安装目录，默认安装在 /usr/local/php 中，则需要到此目录下寻找 etc 目录，而我指定了 PHP 的安装目录 /site/php/】，复制 PHP-FPM 模块的配置文件 <strong>php-fpm.conf.default</strong>，内容不需要更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- PHP 的附加模块的配置默认安装在了 etc 目录下 </span><br><span class="line">cd /site/php/etc</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure><p>在上面的 etc 目录中，继续复制 PHP-FPM 模块的默认配置文件。因为在上述的配置文件 <strong>php-fpm.conf</strong> 中，指定了 <strong>include=/site/php/etc/php-fpm.d/*.conf</strong>，也就是会从此目录 <strong>/site/php/etc/php-fpm.d/</strong> 加载多份有效的配置文件，至少要有一份存在，否则后续启动 PHP-FPM 的时候会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 先直接使用模板，不改配置参数，后续需要更改用户和组 </span><br><span class="line">cp php-fpm.d/www.conf.default php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><p>配置完成后，开始启动 PHP-FPM 模块，在 PHP 的安装目录中执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- PHP 的附加模块的脚本默认安装在了 sbin 目录下 </span><br><span class="line">-- 为了方便可以添加环境变量，把 sbin、bin 这 2 个目录都加进去 </span><br><span class="line">cd /site/php</span><br><span class="line">-- 配置文件合法性测试 </span><br><span class="line">./sbin/php-fpm -t</span><br><span class="line">-- 启动，现在还不能使用 service php-fpm start 的方式，因为没有把此模块配置到系统里面 </span><br><span class="line">./sbin/php-fpm</span><br><span class="line">-- 检验是否启动 </span><br><span class="line">ps aux|grep php-fpm</span><br></pre></td></tr></table></figure><p>配置文件合法性检测 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167zej3snj20ja02t0sm.jpg" alt="配置文件合法性检测" title="配置文件合法性检测"></p><p> 可以看到正常启动了 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g167zqai4zj20nb03zt8s.jpg" alt="PHP-FPM 启动成功" title="PHP-FPM 启动成功"></p><p> 那怎么关闭以及重启呢，PHP 5.3.3 以后的 PHP-FPM 模块不再支持 PHP-FPM 以前具有的 <strong>./sbin/php-fpm (start|stop|reload)</strong> 等命令，所以不要再看这种古老的命令了，需要使用信号控制：</p><ul><li>INT，TERM，立刻终止 </li><li>QUIT 平滑终止</li><li>USR1 重新打开日志文件</li><li>USR2 平滑重载所有 worker 进程并重新载入配置和二进制模块</li></ul><p> 所以可以使用命令 <strong>kill -INT pid</strong> 来停止 PHP-FPM 模块，pid 的值可以使用 <strong>ps aux|grep php-fpm</strong> 获取。当然，也可以使用 <strong>kill -INT pid 配置文件路径 </strong>来停止 PHP-FPM 模块，pid 配置文件路径 可以在 php-fpm.conf 中查看，<strong>pid 参数 </strong>，默认是关闭的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1681vrhobj20om071mxh.jpg" alt="使用信号控制的方式停止 PHP-FPM" title="使用信号控制的方式停止 PHP-FPM"></p><p>为了能使用 <strong>service php-fpm start|stop|restart|reload)</strong> 的方式来进行启动、停止、重启、重载配置，这种方式显得优雅，需要把此模块配置到系统里面。在 PHP 的编译安装目录，复制文件 <strong>sapi/fpm/init.d.php-fpm</strong> ，粘贴到系统指定的目录即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /site/php-7.0.0</span><br><span class="line">-- 复制文件 </span><br><span class="line">cp sapi/fpm/init.d.php-fpm/etc/init.d/php-fpm</span><br><span class="line">-- 添加执行权限 </span><br><span class="line">chmod +x /etc/init.d/php-fpm</span><br><span class="line">-- 添加服务 </span><br><span class="line">chkconfig --add php-fpm</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g16828okbij20nq06zaaf.jpg" alt="使用 service 操作 PHP-FPM" title="使用 service 操作 PHP-FPM"></p><h3 id="Nginx- 的配置文件"><a href="#Nginx- 的配置文件" class="headerlink" title="Nginx 的配置文件"></a>Nginx 的配置文件 </h3><p> 接下来就是更改 Nginx 的配置文件，让 Nginx 支持 PHP 请求，并且同时设置好反向代理，把请求转给 PHP-FPM 模块处理【前提是在不影响 html 请求的情况下】，在 server 中增加一个配置 location。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 打开配置文件 </span><br><span class="line">vi /etc/nginx/nginx.conf</span><br><span class="line">-- 更改 server 模块的内容，增加 php 的配置 </span><br><span class="line">-- 80 端口就不用管了，直接在 443 端口下配置 </span><br><span class="line">location ~* \.php$ &#123;</span><br><span class="line">      fastcgi_index   index.php;</span><br><span class="line">      fastcgi_pass    127.0.0.1:9000;</span><br><span class="line">      include         fastcgi_params;</span><br><span class="line">      fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">      fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">    &#125;</span><br><span class="line">-- 重新加载 nginx 配置，不需要重启 </span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>这样配置好，就会把所有的 PHP 请求转给 PHP-FPM 模块处理，同时并不会影响原来的 html 请求。</p><h3 id="额外优化配置项"><a href="# 额外优化配置项" class="headerlink" title="额外优化配置项"></a>额外优化配置项 </h3><p> 此外，还有一些环境变量配置、开机启动配置，这里就不再赘述了，这些配置好了可以方便后续的命令简化，不配置也是可以的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 设置开机启动的 chkconfig 方法，以下是添加服务 </span><br><span class="line">cp sapi/fpm/init.d.php-fpm/etc/init.d/php-fpm</span><br><span class="line">chmod +x /etc/init.d/php-fpm</span><br><span class="line">chkconfig --add php-fpm</span><br><span class="line">-- 设置开机启动 </span><br><span class="line">chkconfig php-fpm on</span><br><span class="line">-- 添加环境变量，之后 php 的相关命令就可以直接使用了 </span><br><span class="line">vi /etc/profile</span><br><span class="line">export PATH=$PATH:/site/php/bin:/site/php/sbin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="PHP- 脚本"><a href="#PHP- 脚本" class="headerlink" title="PHP 脚本"></a>PHP 脚本 </h1><p> 先在静态站点的根目录下，添加默认的 index.php 文件，用来测试，内容如下，内容的意思是输出 PHP 的所有信息。注意，PHP 文件的格式是以 <strong>&lt;?php</strong> 开头，以 <strong>?&gt;</strong> 结尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi index.php</span><br><span class="line">&lt;?php phpinfo (); ?&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器访问，可以看到成功，这就代表着 PHP 与 Nginx 的配置都没有问题，已经能正常提供服务。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1685gzg77j21hk0s6did.jpg" alt="成功访问 index.php" title="成功访问 index.php"></p><p>接下来就来测试一下复杂的脚本，可以用来自动拉取 GitHub 的提交。再创建一个 auto_pull.php 文件，内容如下，会自动到执行目录拉取 GitHub 的更新，这样就能实现镜像的自动更新了，还加入了秘钥验证【先不用管功能性是否可用，而是先测试一下复杂的 PHP 脚本能不能正常执行，脚本内容后续还要优化更改】，内容大致如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vi auto_pull.php</span><br><span class="line">&lt;?php</span><br><span class="line">// 生产环境 web 目录 </span><br><span class="line">$target = &apos;/site/iplaypi.github.io&apos;;</span><br><span class="line">// 密钥，验证 GitHub 的请求 </span><br><span class="line">$secret = &quot;test666&quot;;</span><br><span class="line">// 获取 GitHub 发送的内容 </span><br><span class="line">$json = file_get_contents (&apos;php://input&apos;);</span><br><span class="line">$content = json_decode ($json, true);</span><br><span class="line">// GitHub 发送过来的签名 </span><br><span class="line">$signature = $_SERVER [&apos;HTTP_X_HUB_SIGNATURE&apos;];</span><br><span class="line">if (!$signature) &#123;</span><br><span class="line">   return http_response_code (404);</span><br><span class="line">&#125;</span><br><span class="line">list ($algo, $hash) = explode (&apos;=&apos;, $signature, 2);</span><br><span class="line">// 计算签名 </span><br><span class="line">$payloadHash = hash_hmac ($algo, $json, $secret);</span><br><span class="line">// 获取分支名字 </span><br><span class="line">$branch = $content [&apos;ref&apos;];</span><br><span class="line">// 判断签名是否匹配，分支是否匹配 </span><br><span class="line">if ($hash === $payloadHash &amp;&amp; &apos;refs/heads/master&apos; === $branch) &#123;</span><br><span class="line">    $cmd = &quot;cd $target &amp;&amp; git pull&quot;;</span><br><span class="line">    $res = shell_exec ($cmd);</span><br><span class="line">    $res_log = &apos;Success:&apos;.PHP_EOL;</span><br><span class="line">    $res_log .= $content [&apos;head_commit&apos;][&apos;committer&apos;][&apos;name&apos;] . &apos; 在 & apos; . date (&apos;Y-m-d H:i:s&apos;) . &apos; 向 & apos; . $content [&apos;repository&apos;][&apos;name&apos;] . &apos; 项目的 & apos; . $content [&apos;ref&apos;] . &apos; 分支 push 了 & apos; . count ($content [&apos;commits&apos;]) . &apos; 个 commit：&apos; . PHP_EOL;</span><br><span class="line">    $res_log .= $res.PHP_EOL;</span><br><span class="line">    $res_log .= &apos;=======================================================================&apos;.PHP_EOL;</span><br><span class="line">    echo $res_log;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $res_log  = &apos;Error:&apos;.PHP_EOL;</span><br><span class="line">    $res_log .= $content [&apos;head_commit&apos;][&apos;committer&apos;][&apos;name&apos;] . &apos; 在 & apos; . date (&apos;Y-m-d H:i:s&apos;) . &apos; 向 & apos; . $content [&apos;repository&apos;][&apos;name&apos;] . &apos; 项目的 & apos; . $content [&apos;ref&apos;] . &apos; 分支 push 了 & apos; . count ($content [&apos;commits&apos;]) . &apos; 个 commit：&apos; . PHP_EOL;</span><br><span class="line">    $res_log .= &apos; 密钥不正确或者分支不是 master, 不能 pull&apos;.PHP_EOL;</span><br><span class="line">    $res_log .= &apos;=======================================================================&apos;.PHP_EOL;</span><br><span class="line">    echo $res_log;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>接下来先手工测试一下 PHP 文件的访问是否正常，可以使用 curl 模拟请求，或者直接使用 GitHub 的 WebHooks 请求。我这里为了简单，先使用 curl 命令来测试，后续的步骤才使用 GitHub 来真正测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &apos;X-Hub-Signature:test&apos;  https://blog.playpi.org/auto_pull.php</span><br></pre></td></tr></table></figure><p>可以看到，访问正常，先不管功能上能不能正常实现，至少保证 PHP 可以正常提供服务，后面会和 GitHub 对接。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g168ab7ih9j20r206awep.jpg" alt="使用 curl 模拟访问正常" title="使用 curl 模拟访问正常"></p><h1 id="测试 -WebHooks- 效果"><a href="# 测试 -WebHooks- 效果" class="headerlink" title="测试 WebHooks 效果"></a>测试 WebHooks 效果 </h1><p> 在 GitHub 中使用 WebHooks，为了表现出它的效果是什么样，我画了一个流程图，可以直观地看到它优雅的工作方式。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g168bmzii3j20lo0jwwfi.jpg" alt="WebHooks 效果流程图" title="WebHooks 效果流程图"></p><p>在上一步骤中，自动拉取更新的脚本已经写好，并且使用 curl 测试过模拟访问可用，那接下来就测试功能是否可用，当然，踩坑是避免不了的，优化脚本内容也是必要的。特别要注意用户权限和脚本内容这两方面，用户权限方面我直接使用 nginx 用户，踩坑比较少，脚本内容方面要保证你的服务器支持 <strong>shell_exec ()</strong> 这个 PHP 函数，可以在 <strong>index.php</strong> 文件中加一段代码 <strong>echo shell_exec (‘ls -la’);</strong>，测试一下。我的机器经过测试时支持的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g168e04yz0j21hk0s6gs3.jpg" alt="测试 shell_exec 函数" title="测试 shell_exec 函数"></p><h2 id="在 -GitHub- 设置 -WebHooks"><a href="# 在 -GitHub- 设置 -WebHooks" class="headerlink" title="在 GitHub 设置 WebHooks"></a>在 GitHub 设置 WebHooks</h2><p>在 GitHub 对应项目的设置【Settings】中，找到 <strong>Webhooks</strong> 选项，可以看到已经有一些设置完成的 WebHook，这里面就包括 travis-ci 的自动构建配置。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1691o58jij20ty0en755.jpg" alt="Webhooks 列表" title="Webhooks 列表"></p><p>然后点击新建按钮，创建一个新的 WebHook【这个过程需要重新填写密码确认】，填写必要的参数，url 地址、秘钥、触发的事件，然后确认保存即可。注意，秘钥只是为了测试使用，实际应用时请更改，包括 WebHooks 的秘钥设置和 PHP 脚本里面的秘钥字符串。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1692ybibgj20su0qxgn6.jpg" alt="新建 WebHook" title="新建 WebHook"></p><p>如果是第一次创建完成，还没有触发请求的历史记录，可以先手动在 master 分支做一次变更提交，然后就会触发一次 WebHooks 事件。我这里已经有触发历史了，拿一个出来看就行了。注意，为了方便测试，只要有一次请求就行了，因为如果后续更改了脚本，不用再手动向 master 分支做一次变更提交，可以直接点击重新发送【redeliver】。<br>触发请求的信息，就是 http 请求头和请求体 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1694gk8tdj20pl0pi3zt.jpg" alt="WebHook 触发请求携带的信息" title="WebHook 触发请求携带的信息"></p><p>VPS 的 PHP 后台服务返回的信息，可以看到正常处理了 WebHooks 请求，但是没有做拉取更新的操作，原因可能是秘钥不对或者分支不对。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1694ke4dbj20or0judgk.jpg" alt="PHP 后台服务返回的信息" title="PHP 后台服务返回的信息"></p><h2 id="测试功能是否可用"><a href="# 测试功能是否可用" class="headerlink" title="测试功能是否可用"></a> 测试功能是否可用 </h2><p> 以下内容所需要的 PHP 脚本：index.php、auto_pull.php 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo shell_exec (&quot;id -a&quot;);</span><br><span class="line">echo shell_exec (&apos;ls -la&apos;);</span><br><span class="line">phpinfo ();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 生产环境 web 目录 </span><br><span class="line">$target = &apos;/site/iplaypi.github.io&apos;;</span><br><span class="line">// 密钥，验证 GitHub 的请求 </span><br><span class="line">$secret = &quot;test666&quot;;</span><br><span class="line">// 获取 GitHub 发送的内容，解析 </span><br><span class="line">$json = file_get_contents (&apos;php://input&apos;);</span><br><span class="line">$content = json_decode ($json, true);</span><br><span class="line">// GitHub 发送过来的签名，一定要大写，虽然 http 请求里面是驼峰法命名的 </span><br><span class="line">$signature = $_SERVER [&apos;HTTP_X_HUB_SIGNATURE&apos;];</span><br><span class="line">if (!$signature) &#123;</span><br><span class="line">   return http_response_code (404);</span><br><span class="line">&#125;</span><br><span class="line">// 使用等号分割，得到算法和签名 </span><br><span class="line">list ($algo, $hash) = explode (&apos;=&apos;, $signature, 2);</span><br><span class="line">// 在本机计算签名 </span><br><span class="line">$payloadHash = hash_hmac ($algo, $json, $secret);</span><br><span class="line">// 获取分支名字 </span><br><span class="line">$branch = $content [&apos;ref&apos;];</span><br><span class="line">// 日志内容 </span><br><span class="line">$logMessage = &apos;[&apos; . $content [&apos;head_commit&apos;][&apos;committer&apos;][&apos;name&apos;] . &apos;] 在 [&apos; . date (&apos;Y-m-d H:i:s&apos;) . &apos;] 向项目 [&apos; . $content [&apos;repository&apos;][&apos;name&apos;] . &apos;] 的分支 [&apos; . $content [&apos;ref&apos;] . &apos;] push 了 [&apos; . count ($content [&apos;commits&apos;]) . &apos;] 个 commit&apos; . PHP_EOL;</span><br><span class="line">$logMessage .= &apos;ret:[&apos; . $content [&apos;ref&apos;] . &apos;],payloadHash:[&apos; . $payloadHash . &apos;]&apos; . PHP_EOL;</span><br><span class="line">// 判断签名是否匹配，分支是否匹配 </span><br><span class="line">if ($hash === $payloadHash &amp;&amp; &apos;refs/heads/master&apos; === $branch) &#123;</span><br><span class="line">    // 增加执行脚本日志重定向输出到文件 </span><br><span class="line">    $cmd = &quot;cd $target &amp;&amp; git pull&quot;;</span><br><span class="line">    $res = shell_exec ($cmd);</span><br><span class="line">    $res_log = &apos;Success:&apos; . PHP_EOL;</span><br><span class="line">    $res_log .= $logMessage;</span><br><span class="line">    $res_log .= $res . PHP_EOL;</span><br><span class="line">    $res_log .= &apos;=======================================================================&apos;.PHP_EOL;</span><br><span class="line">    echo $res_log;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $res_log  = &apos;Error:&apos; . PHP_EOL;</span><br><span class="line">    $res_log .= $logMessage;</span><br><span class="line">    $res_log .= &apos; 密钥不正确或者分支不是 master, 不能 pull&apos; . PHP_EOL;</span><br><span class="line">    $res_log .= &apos;=======================================================================&apos;.PHP_EOL;</span><br><span class="line">    echo $res_log;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上面已经测试了访问正常，但是为了保证 PHP 脚本的功能正常执行，接下来要优化 PHP 脚本内容了。我分析一下，根据脚本的内容，只有当秘钥正确并且当前变更的分支是 master 时才会执行拉取更新操作，看返回结果也是这样的。当前没有执行拉取更新的操作，但是我的这一个触发通知里面是表明了 master 分支【根据 ref 参数】，那就是秘钥的问题了，需要详细看一下秘钥计算的那段 PHP 代码。如果怕麻烦，直接把加密这个流程去掉【会导致恶意请求，浪费 CPU 资源】，GitHub 并没有要求一定要填写秘钥，但是我为了安全，仍旧填写。</p><p>我看了一下代码，并没有发现问题，于是加日志把后台处理的一些结果返回，看看哪里出问题了。最终发现竟然是分支名字的问题，PHP 代码通过 <strong>$content</strong> 没有获取到任何内容，包括分支名字、项目名字、提交信息等，而秘钥签名的处理是正常的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1697xx5vaj20nl0g00tb.jpg" alt="错误日志返回" title="错误日志返回"></p><p>思考了一下，然后我就发现，竟然是创建 WebHooks 的时候内容传输类型【Content type】设置错误，不能使用默认的，要设置为 <strong>application/json</strong>，否则后台的 PHP 代码处理不了内容解析，获取的全部是空内容。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g1699fp81lj20uf0oiwg0.jpg" alt="内容传输类型设置错误" title="内容传输类型设置错误"></p><p>好，一切准备就绪，再来试一次，问题又来了，果然用户权限问题是逃不了的。这个问题我早有防备，本质就是没有设置好 PHP 的用户，导致 PHP 执行脚本的时候，没有权限获取与 Git 有关的信息【执行脚本的用户没有自己的家目录，也没有存储 ssh 认证信息】。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g169b32samj20pj0hpwf4.jpg" alt="PHP 执行权限问题" title="PHP 执行权限问题"></p><p>接下来就简单了，去设置 PHP 的执行用户，可能还要涉及到 Nginx。先在原先的 <strong>index.php</strong> 脚本中增加内容 <strong>echo shell_exec (“id -a”);</strong>，用来输出当前用户信息，发现是 nobody，那就和我想的一样了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g169d8f9fbj20sa0fsdi8.jpg" alt="输出 PHP 的执行用户信息" title="输出 PHP 的执行用户信息"></p><p>为了规范起来便于管理，还是改为和 Nginx 同一个用户比较好，还记得 PHP-FPM 模块的配置文件吗 <strong>/site/php/etc/php-fpm.d/www.conf </strong>，去里面找到用户和组的配置项 <strong>user、group</strong>，把 nobody 改为 nginx。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g169e1crm2j20gl02qwec.jpg" alt="设置 PHP-FPM 的用户名和组" title="设置 PHP-FPM 的用户名和组"></p><p>为什么选择 nginx 用户呢，因为我的 Nginx 服务使用的就是 nginx 用户，这样就不用再创建一个用户了，可以去配置文件 <strong>/etc/nginx/nginx.conf</strong> 里面查看。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g169fau9zzj20c806amx2.jpg" alt="查看 Nginx 的用户" title="查看 Nginx 的用户"></p><p>其实，用户的设置是随意的，如果把 PHP-FPM 的用户设置为 root 更方便，但是这样有很大风险，所以不要这么做。如果非要使用 nobody 也是可以的，我只是为了方便管理用户，和 Nginx 服务共同使用一个用户。一切配置完成后别忘记重启 PHP-FPM 模块。</p><p>接着就是最重要的步骤了，把本地的 GitHub 项目所属用户设置为 nginx，并且保证 nginx 用户的家目录有 ssh 认证相关的秘钥信息，这样在以后的自动拉取更新时才能畅通无阻。我把原先的项目删掉，然后使用 sudo 命令给 nginx 用户生成 ssh 认证信息，并且重新克隆项目，克隆的同时指定所属用户为 nginx。【由于用户 nginx 没有登录 Shell 的权限，所以不能直接使用 nginx 用户登录后再操作的方式解决】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 目录不存在先创建，赋给 nginx 用户权限 </span><br><span class="line">mkdir -p /home/nginx/.ssh/</span><br><span class="line">chown nginx:nginx -R /home/nginx/.ssh/</span><br><span class="line">-- H 参数表示设置家目录环境，u 参数表示用户名 </span><br><span class="line">cd /site/</span><br><span class="line">sudo -Hu nginx ssh-keygen -t rsa -C &quot;plapyi@qq.com&quot;</span><br><span class="line">sudo -Hu nginx git clone https://github.com/iplaypi/iplaypi.github.io.git</span><br><span class="line">-- 如果没有 iplaypi.github.io 目录的权限，也要赋予 nginx 用户 </span><br><span class="line">mkdir iplaypi.github.io</span><br><span class="line">chown nginx:nginx iplaypi.github.io</span><br></pre></td></tr></table></figure><p>好，一切准备就绪，我再来试一次。可以看到，完美执行，热泪盈眶。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g169gkpo0cj20s30nfgmm.jpg" alt="解决所有问题后成功实现自动拉取" title="解决所有问题后成功实现自动拉取"></p><p>为了方便，本来我把这 2 个 php 文件直接放在项目里面了，放在 source 分支，再更新一下 travis-ci 的配置文件，把它们提交到 master 分支去。但是这样做的风险就是把秘钥暴露出去了，显然不可取，所以折中的办法就是把这 2 个文件当做模板，把秘钥隐去，放在 source 分支，以后用的时候直接复制就行了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;我的静态博客为了百度爬虫单独部署了一个镜像，放在了我的 VPS 上面【在 vultr 购买的主机】，并单独设置了二级域名 blog.playpi.org。但是，每次 GitHub 有新的提交时【基本每周都会有至少三次提交】，为了及时更新，我都会登录到 VPS 上面，到指定的项目下做一下拉取更新的操作，即执行 &lt;strong&gt;git pull&lt;/strong&gt;。这样操作了三五次，我就有点不耐烦了，自己身为做技术的人，怎么能忍受这个呢，做法既低效又不优雅。于是，我就在想有没有更好的方法来实现自动拉取更新。一开始想到，直接在 VPS 起一个周期性脚本不就行了，比如每隔 1 分钟自动执行 &lt;strong&gt;git pull&lt;/strong&gt;，但是立马又被我否定了，虽然做法很简单，但是太不优雅了，而且极大浪费 CPU。后来想到，GitHub 自带了 WebHooks 功能，概念类似于回调钩子，可以给 GitHub 的项目设置各种各样的行为，满足一定的场景才会触发【例如当有新的 push 时，就会向设置的 url 发送请求，并且在请求体中携带 push 的相关信息】。我的自动化构建就是这样的原理，每当 source 分支有提交时，都会通知 tavis-ci【这就是一个行为】，然后在 travis-ci 中设置好脚本，自动运行脚本，就完成了自动生成、部署的操作。&lt;/p&gt;&lt;p&gt;根据这个思路，就可以给 GitHub 的项目设置一个 WebHooks，每当 master 分支有提交时【代表着静态博客有更新了】，会根据设置的链接自动发送消息到 VPS 上面，然后 VPS 再执行拉取更新，这样的话就优雅多了。但是问题又来了，满足这种场景还需要在 VPS 设置一个后台服务，用来接收 GitHub 的消息通知并执行拉取更新的操作。我想了一下，既然 VPS 上面已经起了 Nginx 服务，那就要充分利用起来，给 Nginx 设置好反向代理，把指定的请求转给另外一个服务就行了。那这个服务怎么选呢，当然是选择 PHP 后台了，毕竟 PHP 号称世界上最好的语言， PHP 后台搭建起来也容易。本文就记录从基础环境安装配置到成功实现自动拉取更新的整个过程，本文涉及的系统环境是 CentOS 7 x64，软件版本会在操作中具体指明。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.playpi.org/categories/building/"/>
    
    
      <category term="Git" scheme="https://www.playpi.org/tags/Git/"/>
    
      <category term="Github" scheme="https://www.playpi.org/tags/Github/"/>
    
      <category term="PHP" scheme="https://www.playpi.org/tags/PHP/"/>
    
      <category term="WebHooks" scheme="https://www.playpi.org/tags/WebHooks/"/>
    
      <category term="自动更新" scheme="https://www.playpi.org/tags/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    
      <category term="钩子" scheme="https://www.playpi.org/tags/%E9%92%A9%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置 SSL 证书实现 HTTPS 访问</title>
    <link href="https://www.playpi.org/2019030501.html"/>
    <id>https://www.playpi.org/2019030501.html</id>
    <published>2019-03-04T18:14:23.000Z</published>
    <updated>2019-03-04T18:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>由于 GitHub Pages 把百度爬虫屏蔽了，导致百度爬虫爬取不到我的个人主页，所以被百度收录的内容很少，能收录的基本都是我手动提交的。后来我的解决办法就是自己搭建了一台 Web 服务器，然后在 DNSPod 中把百度爬虫的访问流量引到我的 Web 服务器上面，服务器主机是我自己购买的 VPS，服务器应用我选择的是强大的 Nginx。本文就记录 Web 服务器搭建以及配置 SSL 证书这个过程。</p><a id="more"></a><h1 id="安装 -Nginx"><a href="# 安装 -Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h1><p>Nginx 官方网站：<a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/start/topics/tutorials/install</a> 。</p><p>我的 VPS 是 CentOS 7 X64 版本的，所以安装 Nginx 的过程比较麻烦一点，需要自己下载源码、编译、安装，如果需要用到附加模块【例如 http_ssl 证书模块】，还需要重新编译，整个过程比较耗时。如果不熟悉的话，遇到问题也要折腾半天才能解决。所以，我在不熟悉的 Nginx 的情况下选择了一种简单的方式，直接自动安装，并自带了一些常用的模块，例如 ssl 证书模块。但是缺点就是安装过程稍微长一点，在网络好的情况下可能需要 3-5 分钟。我还参考了别人的文档：<a href="https://gist.github.com/ifels/c8cfdfe249e27ffa9ba1" target="_blank" rel="noopener">https://gist.github.com/ifels/c8cfdfe249e27ffa9ba1</a> ，但是仅供参考，因为我发现也有一些不能使用的地方。</p><h2 id="创建源配置文件"><a href="# 创建源配置文件" class="headerlink" title="创建源配置文件"></a>创建源配置文件 </h2><p> 在 /etc/yum.repos.d/ 目录下创建一个源配置文件 nginx.repo，如果不存在这个目录，先使用 mkdir 命令创建目录，然后在目录中添加一个文件 nginx.repo，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.repo</span><br></pre></td></tr></table></figure><p>进入编辑模式，填写如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>编辑完成后保存即可。</p><h2 id="自动安装 -Nginx"><a href="# 自动安装 -Nginx" class="headerlink" title="自动安装 Nginx"></a>自动安装 Nginx</h2><p>接下来就是使用命令自动安装 Nginx 了【敲下命令，看着就行了，会有刷屏的日志输出】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><p>安装完成后，使用以下命令启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>可以使用命令 <strong>service nginx status</strong> 查看 Nginx 是否启动：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tj7nqpidj20pi085jrs.jpg" alt="查看 Nginx 状态" title="查看 Nginx 状态"></p><p>然后你就能看到 Nginx 的主页了，默认是 80 端口，直接使用 ip 访问即可【如果这里打不开，可能是端口 80 没有开启，被防火墙禁用了，需要重新开启，开启方法参考后面的章节】。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tj9c3v7aj20hw075t92.jpg" alt="Nginx 主页" title="Nginx 主页"></p><h1 id="获取 -SSL- 证书、配置参数"><a href="# 获取 -SSL- 证书、配置参数" class="headerlink" title="获取 SSL 证书、配置参数"></a>获取 SSL 证书、配置参数 </h1><h2 id="SSL- 证书获取"><a href="#SSL- 证书获取" class="headerlink" title="SSL 证书获取"></a>SSL 证书获取</h2><p> 证书的获取可以参考我的文章：<a href="https://www.playpi.org/2019030401.html">利用阿里云申请免费的 SSL 证书 </a>。我在阿里云获取的证书是免费的、有效期一年的，等证书过期了可以重新申请【不知道能不能自动续期】，因为我有阿里云的帐号，所以就直接使用了。当然，通过其它方式也可以获取 SSL 证书，大家自行选择。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tj9zp4g1j21hc0qx0ub.jpg" alt="阿里云申请的 SSL 证书" title="阿里云申请的 SSL 证书"></p><p> 直接下载即可，下载后上传到站点的任意目录，但是要记住文件的位置，因为等一下配置 Nginx 的时候需要指定证书的位置。我把它们放在了 /site/ 目录，一共有 2 个文件：.key 文件时私钥文件，.pem 文件时公钥文件。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tjanlqz3j20o80dbaav.jpg" alt="SSL 证书的 2 个文件" title="SSL 证书的 2 个文件"></p><h2 id="Nginx- 参数配置"><a href="#Nginx- 参数配置" class="headerlink" title="Nginx 参数配置"></a>Nginx 参数配置 </h2><p> 更改配置文件，打开文件【使用 vi 命令会自动创建不存在的文件】，进入编辑模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置 </span><br><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>填写内容如下【我这里只是配置基本的参数 server 有关内容，大家当然可以根据实际需要配置更为丰富的参数】，留意证书的公钥与私钥这 2 个文件的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 80 端口是用来接收基本的 http 请求，里面做了永久重定向，重定向到 https 的链接 </span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  blog.playpi.org;</span><br><span class="line">    access_log   /site/iplaypi.github.io.http-blog-access.log  main;</span><br><span class="line">    rewrite ^/(.*)$ https://blog.playpi.org/$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line"># 443 端口是用来接收 https 请求的 </span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;# 监听端口 </span><br><span class="line">    server_name blog.playpi.org;# 域名 </span><br><span class="line">    access_log   /site/iplaypi.github.io.https-blog-access.log  main;</span><br><span class="line">    root         /site/iplaypi.github.io;</span><br><span class="line">    ssl_certificate /site/1883927_blog.playpi.org.pem;# 证书路径 </span><br><span class="line">    ssl_certificate_key /site/1883927_blog.playpi.org.key;#key 路径 </span><br><span class="line">    ssl_session_cache shared:SSL:1m;# 储存 SSL 会话的缓存类型和大小 </span><br><span class="line">    ssl_session_timeout 5m;# 配置会话超时时间 </span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;# 为建立安全连接，服务器所允许的密码格式列表 </span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;# 依赖 SSLv3 和 TLSv1 协议的服务器密码将优先于客户端密码 </span><br><span class="line">    #减少点击劫持 </span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    #禁止服务器自动解析资源类型 </span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    #防 XSS 攻击 </span><br><span class="line">    add_header X-Xss-Protection 1;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>只要按照如上的配置，就可以同时接收 http 请求与 https 请求【实际上 http 的请求被永久重定向到了 https】，我的配置如下图【请忽略 www 二级域名的配置项】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tjbahmnzj20rm0kv75t.jpg" alt="Nginx 配置项 server" title="Nginx 配置项 server"></p><h2 id="验证参数是否准确"><a href="# 验证参数是否准确" class="headerlink" title="验证参数是否准确"></a>验证参数是否准确 </h2><p> 有时候配置了参数，可能因为字符、参数名问题导致启动失败，然后再回来改配置文件，比较繁琐，所以可以直接使用 Nginx 提供的命令来验证配置文件的内容是否合法，如果有问题可以在输出警告日志中看到，改起来也非常方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>可以看到，配置项正常，接下来就可以启动 Nginx 了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tjbrqeeuj20f603cglj.jpg" alt="Nginx 配置项检测" title="Nginx 配置项检测"></p><h1 id="开启端口、启动 -Nginx"><a href="# 开启端口、启动 -Nginx" class="headerlink" title="开启端口、启动 Nginx"></a>开启端口、启动 Nginx</h1><p>在上面的步骤中，如果在一开始想启动 Nginx，虽然启动成功了，但是却访问不了 Nginx 的主页，那很大可能是服务器的端口没有开启，导致访问请求被拒绝，所以需要适当开启必要的端口【如果没有安装防火墙工具 firewall 请自行安装】。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查看已经开启的端口 </span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"># 开启端口 80</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br><span class="line"># 开启端口 443</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class="line"># 重载更新的端口信息 </span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 这种方式可以，启动 Nginx</span><br><span class="line">service nginx start</span><br><span class="line"># 停止 Nginx</span><br><span class="line">service nginx stop</span><br><span class="line"># 如果需要重启，直接使用下面的更方便 </span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>大家看一下我的服务器的端口开启信息：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tjc9ygu2j20bo02s0sl.jpg" alt="服务器端口开启情况" title="服务器端口开启情况"></p><h1 id="验证站点"><a href="# 验证站点" class="headerlink" title="验证站点"></a>验证站点 </h1><p> 打开站点 <a href="https://blog.playpi.org" target="_blank" rel="noopener">https://blog.playpi.org</a> ，可以愉快地访问了，可以看到 https 链接的绿锁。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tjcrc2zbj21hk0s6n10.jpg" alt="安全的站点主页" title="安全的站点主页"></p><p>接着查看一下 SSL 证书的信息。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tjd5kowxj20d60i90t0.jpg" alt="查看 SSL 证书信息" title="查看 SSL 证书信息"></p><h1 id="题外话"><a href="# 题外话" class="headerlink" title="题外话"></a>题外话 </h1><h2 id="重定向问题思考"><a href="# 重定向问题思考" class="headerlink" title="重定向问题思考"></a> 重定向问题思考 </h2><p> 关于开启 https 的访问，我一开始也配置了 www 的二级域名，但是通过日志发现没有通过 301 重定向访问 <a href="https://www.playpi.org">https://www.playpi.org</a> 的请求，一直不明白原因。后来发现，因为做重定向的时候还是重定向到 GitHub 上面了。同理，如果使用 ip 直接访问，可以观察到自动跳转到 <a href="https://www.playpi.org">https://www.playpi.org</a> 了，查看证书还是 GitHub 的证书。所以后来直接把百度爬虫的请求转发到 blog 的二级域名还是明智的【www 的二级域名就不用自己再搞一套了】，否则百度爬虫还是抓取不到。如果百度爬虫直接使用 https 链接抓取还是可以的，但是看百度站长里面的说明，是通过 http 的 301 重定向抓取的。</p><h2 id="Nginx- 的 -https- 模块安装"><a href="#Nginx- 的 -https- 模块安装" class="headerlink" title="Nginx 的 https 模块安装"></a>Nginx 的 https 模块安装 </h2><p> 由于我使用的是简单小白的安装方式，不需要关心额外用到的模块，例如 http_ssl 模块，因为安装包里面自带了这个模块，可以使用 <strong>nginx -V</strong> 命令查看。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0uj2a8vf6j21gm08smxy.jpg" alt="http_ssl 模块查看" title="http_ssl 模块查看"></p><p>因此，如果大家有使用源码编译安装的方式，注意 https 模块不能缺失，否则不能开启 https 的方式。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;由于 GitHub Pages 把百度爬虫屏蔽了，导致百度爬虫爬取不到我的个人主页，所以被百度收录的内容很少，能收录的基本都是我手动提交的。后来我的解决办法就是自己搭建了一台 Web 服务器，然后在 DNSPod 中把百度爬虫的访问流量引到我的 Web 服务器上面，服务器主机是我自己购买的 VPS，服务器应用我选择的是强大的 Nginx。本文就记录 Web 服务器搭建以及配置 SSL 证书这个过程。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.playpi.org/categories/building/"/>
    
    
      <category term="Nginx" scheme="https://www.playpi.org/tags/Nginx/"/>
    
      <category term="https" scheme="https://www.playpi.org/tags/https/"/>
    
      <category term="ssl" scheme="https://www.playpi.org/tags/ssl/"/>
    
      <category term="证书" scheme="https://www.playpi.org/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>利用阿里云申请免费的 SSL 证书</title>
    <link href="https://www.playpi.org/2019030401.html"/>
    <id>https://www.playpi.org/2019030401.html</id>
    <published>2019-03-04T13:45:38.000Z</published>
    <updated>2019-03-04T13:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>在搭建博客的过程中，一开始是全部使用 GitHub，因为这样做就什么也不用考虑了，例如主机、带宽、SSL 证书，全部都交给 GitHub 了，自己唯一需要做的就是写 Markdown 文档。但是，后来发现 GitHub 把百度爬虫给禁止了，也就是百度爬虫爬取不到 GitHub 的内容，导致我的站点没有被百度收录。后来为了专门给百度爬虫搭建一条线路，自己搭建了一个镜像服务，也就是和 GitHub 上面的内容一模一样站点，是专门给百度爬虫使用的。而且，为了测试方便，在 DNSPod 中还增加了一条 blog 二级域名的解析记录，blog 的访问全导向自己的镜像，这样就可以方便观察部署是否成功。后来还把百度爬虫的 www 访问通过 CNANE 跳转到 blog 去，这样就不用单独再搞一个 www 了，因为挺麻烦的（域名解析线路问题、测试问题、证书确认问题，都挺麻烦）。而在这个过程中，就产生了使用阿里云申请免费的 SSL 证书这一流程（有效期一年），记录下来给大家参考。</p><a id="more"></a><h1 id="注册阿里云、开启实名认证"><a href="# 注册阿里云、开启实名认证" class="headerlink" title="注册阿里云、开启实名认证"></a>注册阿里云、开启实名认证 </h1><p> 这个步骤就不多说了，需要证书总得注册一个帐号吧，也方便后续管理。此外，国内的证书服务商都要求实名认证，这个也没办法。如果不想实名认证，可以使用开源的 <a href="https://letsencrypt.org" target="_blank" rel="noopener">Lets Encrypt</a> ，只不过有效期只能是 3 个月，也就是说每隔 3 个月就要更新一次，GitHub Pages 使用的就是它。阿里云的官网链接：<a href="https://www.aliyun.com" target="_blank" rel="noopener">https://www.aliyun.com</a> 。</p><h1 id="购买 -SSL- 证书"><a href="# 购买 -SSL- 证书" class="headerlink" title="购买 SSL 证书"></a>购买 SSL 证书 </h1><p>1、在阿里云系统找到关于 SSL 证书的服务，<strong> 产品与服务 </strong>-&gt;<strong> 安全（云盾）</strong>-&gt;<strong>SSL 证书（应用安全）</strong>。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4q5ikmnj21hc0q9gp7.jpg" alt="SSL 证书（应用安全）" title="SSL 证书（应用安全）"></p><p>2、进入后，点击右上角的 <strong> 购买证书 </strong>。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4qkt3cwj21hc0q9tal.jpg" alt="购买证书" title="购买证书"></p><p>3、按照我截图中的步骤 1、2、3 选择，这里需要注意，这个免费的选项隐藏的很深，直接勾选是不会出现的，要按照我标识的步骤来勾选才行，这里看到出现的费用很贵不用害怕，等一下接着选择对了就会免费的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4qvpk2wj21hc0q9775.jpg" alt="正确的选择流程" title="正确的选择流程"></p><p>最终选择 <strong>免费型 DV SSL</strong>，按照我下图中的选项，可以看到费用是 0 元。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4r9iriij21hc0q9gob.jpg" alt="免费型 DV SSL" title="免费型 DV SSL"></p><p>选择后，下单即可，虽然要走购买流程，但是是不用付钱的。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4rjfjm2j21hc0q9jtw.jpg" alt="下单完成" title="下单完成"></p><h1 id="绑定证书信息、等待审核"><a href="# 绑定证书信息、等待审核" class="headerlink" title="绑定证书信息、等待审核"></a>绑定证书信息、等待审核 </h1><p>1、下单完成后开始 <strong> 申请 </strong>，这里的 <strong>申请 </strong>的意思是申请使用它，要填写一些基本的信息，包括个人信息和网站信息，后续还需要验证身份，看你有没有权限管理你配置的网站。如果不申请 <strong>使用 </strong>，证书其实就一直闲置在那里。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4rvewbsj21hc0q9jti.jpg" alt="申请使用证书" title="申请使用证书"></p><p>填写个人信息，主要就是我个人的联系方式。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4s5trvij21hc0q9dho.jpg" alt="填写个人信息" title="填写个人信息"></p><p>填写网站信息，由于我使用的是自己的服务器上面搭建的 Web 服务，既没有使用阿里云也没有使用其它云服务，所以我选择了 <strong>文件验证 </strong>，即需要把验证文件上传到我的域名对应的目录下面，用来证明这个站点是我管理的。当然，验证通过后，这个文件可以删除。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4serk53j21hc0q9q58.jpg" alt="文件验证" title="文件验证"></p><p>2、填写完成后，会生成一个文件 fileauthor.txt，我需要把这个文件下载下来，然后上传到我的服务器对应的目录中，才能点击 <strong>验证 </strong>按钮，如果通过了，说明这个站点就是我管理的，也就是一个权限验证。</p><p>由于在验证 www 证书对应的文件的时候，需要把 fileauthor.txt 文件上传到服务器，但是由于在 DNSPod 中设置的域名解析是解析到 GitHub 的（没有专门针对阿里的设置），所以总是验证失败。后来就干脆临时把所有的 www 解析都指向我自己的服务器，等通过了验证再改回去，整个过程很是折腾。折腾了一大圈，最后还发现了更简单的方法，直接放弃 www 证书的申请，在 DNSPod 中把百度的流量通过 CNAME 直接引到 blog 上面去就行了，这样只要维护一个 blog 的 Web 服务就行了。这样只需要增加一条解析，而且 blog 的证书验证过程也方便简单。</p><p>DNSPod 解析示例 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4srjg4xj21hc0q9ac4.jpg" alt="DNSPod 解析示例" title="DNSPod 解析示例"></p><p> 在这个过程中，我还发现验证过程需要一定的时间，一开始显示失败，但是不告诉我原因，还以为是自己的服务器的问题，重试了多种方法，包括重启 Web 服务。我等了十几分钟，证书就莫名其妙审核通过了，然后还发送了短信通知（到这里我猜测阿里云的 Web 界面显示的内容是滞后的，短信通知的内容才是实时的）。</p><p>证书申请成功，可以使用了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4t1jlj7j21hc0q9mz2.jpg" alt="证书申请成功" title="证书申请成功"></p><h1 id="下载证书、上传到自己的服务器"><a href="# 下载证书、上传到自己的服务器" class="headerlink" title="下载证书、上传到自己的服务器"></a>下载证书、上传到自己的服务器 </h1><p> 下载证书、上传到自己的服务器这一步骤就不多说了，主要就是复制粘贴的工作。着重要说一下 Nginx 的配置，主要就是 server 属性的配置，由于我把 www、blog 这 2 个二级域名都保留了，所以需要分开配置。其实，这里配置的 www 的二级域名根本没有用，因为不会有流量过来的，重在测试证书的安装。Nginx 的配置内容参考（2 个子域名分开配置，有 2 份 SSL 证书）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.playpi.org;</span><br><span class="line">    access_log   /site/iplaypi.github.io.http-www-access.log  main;</span><br><span class="line">    rewrite ^/(.*)$ https://www.playpi.org/$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  blog.playpi.org;</span><br><span class="line">    access_log   /site/iplaypi.github.io.http-blog-access.log  main;</span><br><span class="line">    rewrite ^/(.*)$ https://blog.playpi.org/$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    listen 443 ssl;# 监听端口 </span><br><span class="line">    server_name www.playpi.org;# 域名 </span><br><span class="line">    access_log   /site/iplaypi.github.io.https-www-access.log  main;</span><br><span class="line">    root         /site/iplaypi.github.io;</span><br><span class="line">    ssl_certificate /site/1884603_www.playpi.org.pem;# 证书路径 </span><br><span class="line">    ssl_certificate_key /site/1884603_www.playpi.org.key;#key 路径 </span><br><span class="line">    ssl_session_cache shared:SSL:1m;# 储存 SSL 会话的缓存类型和大小 </span><br><span class="line">    ssl_session_timeout 5m;# 配置会话超时时间 </span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;# 为建立安全连接，服务器所允许的密码格式列表 </span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;# 依赖 SSLv3 和 TLSv1 协议的服务器密码将优先于客户端密码 </span><br><span class="line">    #减少点击劫持 </span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    #禁止服务器自动解析资源类型 </span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    #防 XSS 攻击 </span><br><span class="line">    add_header X-Xss-Protection 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;# 监听端口 </span><br><span class="line">    server_name blog.playpi.org;# 域名 </span><br><span class="line">    access_log   /site/iplaypi.github.io.https-blog-access.log  main;</span><br><span class="line">    root         /site/iplaypi.github.io;</span><br><span class="line">    ssl_certificate /site/1883927_blog.playpi.org.pem;# 证书路径 </span><br><span class="line">    ssl_certificate_key /site/1883927_blog.playpi.org.key;#key 路径 </span><br><span class="line">    ssl_session_cache shared:SSL:1m;# 储存 SSL 会话的缓存类型和大小 </span><br><span class="line">    ssl_session_timeout 5m;# 配置会话超时时间 </span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;# 为建立安全连接，服务器所允许的密码格式列表 </span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;# 依赖 SSLv3 和 TLSv1 协议的服务器密码将优先于客户端密码 </span><br><span class="line">    #减少点击劫持 </span><br><span class="line">    add_header X-Frame-Options DENY;</span><br><span class="line">    #禁止服务器自动解析资源类型 </span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    #防 XSS 攻击 </span><br><span class="line">    add_header X-Xss-Protection 1;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p>配置完成后重启 Nginx（使用 nginx -s reload），去浏览器查看证书信息，看到有效期一年。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4tirwwkj20f00gdwfk.jpg" alt="去浏览器查看证书信息" title="去浏览器查看证书信息"></p><p>打开链接，看到左上角的小绿锁，好了，网站是经过验证的了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0r4tu5l57j21hl0rr0wt.jpg" alt="打开链接" title="打开链接"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在搭建博客的过程中，一开始是全部使用 GitHub，因为这样做就什么也不用考虑了，例如主机、带宽、SSL 证书，全部都交给 GitHub 了，自己唯一需要做的就是写 Markdown 文档。但是，后来发现 GitHub 把百度爬虫给禁止了，也就是百度爬虫爬取不到 GitHub 的内容，导致我的站点没有被百度收录。后来为了专门给百度爬虫搭建一条线路，自己搭建了一个镜像服务，也就是和 GitHub 上面的内容一模一样站点，是专门给百度爬虫使用的。而且，为了测试方便，在 DNSPod 中还增加了一条 blog 二级域名的解析记录，blog 的访问全导向自己的镜像，这样就可以方便观察部署是否成功。后来还把百度爬虫的 www 访问通过 CNANE 跳转到 blog 去，这样就不用单独再搞一个 www 了，因为挺麻烦的（域名解析线路问题、测试问题、证书确认问题，都挺麻烦）。而在这个过程中，就产生了使用阿里云申请免费的 SSL 证书这一流程（有效期一年），记录下来给大家参考。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.playpi.org/categories/building/"/>
    
    
      <category term="Nginx" scheme="https://www.playpi.org/tags/Nginx/"/>
    
      <category term="https" scheme="https://www.playpi.org/tags/https/"/>
    
      <category term="阿里云" scheme="https://www.playpi.org/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="SSL证书" scheme="https://www.playpi.org/tags/SSL%E8%AF%81%E4%B9%A6/"/>
    
      <category term="Lets Encrypt" scheme="https://www.playpi.org/tags/Lets-Encrypt/"/>
    
  </entry>
  
  <entry>
    <title>那些年关于技术的未解之谜</title>
    <link href="https://www.playpi.org/2019030101.html"/>
    <id>https://www.playpi.org/2019030101.html</id>
    <published>2019-03-01T08:53:21.000Z</published>
    <updated>2019-03-01T08:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>由于技术能力的限制，平时会遇到一些自己觉得非常诡异的问题，感觉到莫名其妙。其实到头来发现，归根结底还是自己的认知问题：可能是技术水平不够，或者考虑不周全，甚至是一些低级别的错误判断。总而言之，遇到这些问题后，有时候请教人、查资料之后仍旧不得解，只能先记录下来，留做备注说明，等待以后解决。当然，随着时间的流逝，有些问题可能就被忘记了，有些问题在之后的某一个时间点被解决了。本文就是要记录这些问题，并在遇到新问题或者解决老问题之后，保持更新。</p><a id="more"></a><h1 id="常用链接"><a href="# 常用链接" class="headerlink" title="常用链接"></a>常用链接 </h1><p> 在这里先列出一些常用的网站链接，方便查看：</p><ul><li>es-hadoop 官网：<a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/5.6/configuration.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/hadoop/5.6/configuration.html</a> ；</li><li>x</li></ul><h1 id="es-spark- 读取 -es- 数据后 -count- 报错"><a href="#es-spark- 读取 -es- 数据后 -count- 报错" class="headerlink" title="es-spark 读取 es 数据后 count 报错"></a>es-spark 读取 es 数据后 count 报错 </h1><p> 使用 es-hadoop 组件，起 Spark 任务去查询 es 数据，然后过滤，过滤后做一个 count 算子，结果就报错了。而且，在报错后又重试了很多次（5 次以上），一直正常，没法重现问题。这个任务需要经常跑，以前从来没遇到过这样的异常，初步怀疑是 es 集群不稳定，具体原因不得而知。</p><p>错误截图：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0pyfelevwj20vj0mr0w0.jpg" alt="报错信息截图" title="报错信息截图"></p><p>完整错误信息如下（重要包名称被替换）：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">02</span>-<span class="number">26_15</span>:<span class="number">01</span>:<span class="number">44</span> [main] ERROR spokesman3.SpokesAndBrand:<span class="number">510</span>: !!!!Spark 出错: org.codehaus.jackson.JsonParseException: Unexpected end-of-input in field name</span><br><span class="line"> at [Source: org.apache.commons.httpclient.AutoCloseInputStream@<span class="number">2687</span>cf14; line: <span class="number">1</span>, column: <span class="number">17581</span>]</span><br><span class="line">org.elasticsearch.hadoop.rest.EsHadoopParsingException: org.codehaus.jackson.JsonParseException: Unexpected end-of-input in field name</span><br><span class="line"> at [Source: org.apache.commons.httpclient.AutoCloseInputStream@<span class="number">2687</span>cf14; line: <span class="number">1</span>, column: <span class="number">17581</span>]</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestClient.parseContent (RestClient.java:<span class="number">171</span>)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestClient.get (RestClient.java:<span class="number">155</span>)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestClient.targetShards (RestClient.java:<span class="number">357</span>)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestRepository.doGetReadTargetShards (RestRepository.java:<span class="number">306</span>)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestRepository.getReadTargetShards (RestRepository.java:<span class="number">297</span>)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestService.findPartitions (RestService.java:<span class="number">241</span>)</span><br><span class="line">at org.elasticsearch.spark.rdd.AbstractEsRDD.esPartitions$lzycompute (AbstractEsRDD.scala:<span class="number">73</span>)</span><br><span class="line">at org.elasticsearch.spark.rdd.AbstractEsRDD.esPartitions (AbstractEsRDD.scala:<span class="number">72</span>)</span><br><span class="line">at org.elasticsearch.spark.rdd.AbstractEsRDD.getPartitions (AbstractEsRDD.scala:<span class="number">44</span>)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$<span class="number">2</span>.apply (RDD.scala:<span class="number">239</span>)</span><br><span class="line">at org.apache.spark.rdd.RDD$$anonfun$partitions$<span class="number">2</span>.apply (RDD.scala:<span class="number">237</span>)</span><br><span class="line">at scala.Option.getOrElse (Option.scala:<span class="number">120</span>)</span><br><span class="line">at org.apache.spark.rdd.RDD.partitions (RDD.scala:<span class="number">237</span>)</span><br><span class="line">at org.apache.spark.SparkContext.runJob (SparkContext.scala:<span class="number">1929</span>)</span><br><span class="line">at org.apache.spark.rdd.RDD.count (RDD.scala:<span class="number">1157</span>)</span><br><span class="line">at org.apache.spark.api.java.JavaRDDLike$class.count (JavaRDDLike.scala:440)</span><br><span class="line">at org.apache.spark.api.java.AbstractJavaRDDLike.count (JavaRDDLike.scala:<span class="number">46</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.SpokesAndBrand.getMention (SpokesAndBrand.java:<span class="number">508</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.SpokesAndBrand.runCelebrityByBrand (SpokesAndBrand.java:<span class="number">185</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.SpokesAndBrand.execute (SpokesAndBrand.java:<span class="number">116</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.SpokesmanAnalyzer.execute (SpokesmanAnalyzer.java:<span class="number">162</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.SpokesmanAnalyzeCli.execute (SpokesmanAnalyzeCli.java:<span class="number">154</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.SpokesmanAnalyzeCli.start (SpokesmanAnalyzeCli.java:<span class="number">75</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.util.AdvCli.initRunner (AdvCli.java:<span class="number">191</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.job.client.BasicInputOutputSystemWorker.run (BasicInputOutputSystemWorker.java:<span class="number">79</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.model.AbstractDataReportWorker.run (AbstractDataReportWorker.java:<span class="number">122</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.buffalo.job.AbstractBUTaskWorker.runTask (AbstractBUTaskWorker.java:<span class="number">63</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.report.cli.TaskLocalRunnerCli.start (TaskLocalRunnerCli.java:<span class="number">110</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.util.AdvCli.initRunner (AdvCli.java:<span class="number">191</span>)</span><br><span class="line">at com.<span class="keyword">package</span>.to.class.report.cli.TaskLocalRunnerCli.main (TaskLocalRunnerCli.java:<span class="number">43</span>)</span><br><span class="line">Caused by: org.codehaus.jackson.JsonParseException: Unexpected end-of-input in field name</span><br><span class="line"> at [Source: org.apache.commons.httpclient.AutoCloseInputStream@<span class="number">2687</span>cf14; line: <span class="number">1</span>, column: <span class="number">17581</span>]</span><br><span class="line">at org.codehaus.jackson.JsonParser._constructError (JsonParser.java:<span class="number">1433</span>)</span><br><span class="line">at org.codehaus.jackson.impl.JsonParserMinimalBase._reportError (JsonParserMinimalBase.java:<span class="number">521</span>)</span><br><span class="line">at org.codehaus.jackson.impl.JsonParserMinimalBase._reportInvalidEOF (JsonParserMinimalBase.java:<span class="number">454</span>)</span><br><span class="line">at org.codehaus.jackson.impl.Utf8StreamParser.parseEscapedFieldName (Utf8StreamParser.java:<span class="number">1503</span>)</span><br><span class="line">at org.codehaus.jackson.impl.Utf8StreamParser.slowParseFieldName (Utf8StreamParser.java:<span class="number">1404</span>)</span><br><span class="line">at org.codehaus.jackson.impl.Utf8StreamParser._parseFieldName (Utf8StreamParser.java:<span class="number">1231</span>)</span><br><span class="line">at org.codehaus.jackson.impl.Utf8StreamParser.nextToken (Utf8StreamParser.java:<span class="number">495</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer.mapObject (UntypedObjectDeserializer.java:<span class="number">219</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer.deserialize (UntypedObjectDeserializer.java:<span class="number">47</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer.mapArray (UntypedObjectDeserializer.java:<span class="number">165</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer.deserialize (UntypedObjectDeserializer.java:<span class="number">51</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer.mapArray (UntypedObjectDeserializer.java:<span class="number">165</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer.deserialize (UntypedObjectDeserializer.java:<span class="number">51</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.MapDeserializer._readAndBind (MapDeserializer.java:<span class="number">319</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.MapDeserializer.deserialize (MapDeserializer.java:<span class="number">249</span>)</span><br><span class="line">at org.codehaus.jackson.map.deser.std.MapDeserializer.deserialize (MapDeserializer.java:<span class="number">33</span>)</span><br><span class="line">at org.codehaus.jackson.map.ObjectMapper._readValue (ObjectMapper.java:<span class="number">2704</span>)</span><br><span class="line">at org.codehaus.jackson.map.ObjectMapper.readValue (ObjectMapper.java:<span class="number">1286</span>)</span><br><span class="line">at org.elasticsearch.hadoop.rest.RestClient.parseContent (RestClient.java:<span class="number">166</span>)</span><br><span class="line">... <span class="number">29</span> more</span><br><span class="line"><span class="number">2019</span>-<span class="number">02</span>-<span class="number">26_15</span>:<span class="number">01</span>:<span class="number">44</span> [main] INFO rdd.JavaEsRDD:<span class="number">58</span>: Removing RDD <span class="number">3086</span> from persistence list</span><br></pre></td></tr></table></figure><p></p><h1 id="Hexo- 生成 -html- 静态页面目录锚点失效"><a href="#Hexo- 生成 -html- 静态页面目录锚点失效" class="headerlink" title="Hexo 生成 html 静态页面目录锚点失效"></a>Hexo 生成 html 静态页面目录锚点失效 </h1><p> 我这些所有的博客文档是先写成 Markdown 文件，然后使用 Hexo 渲染生成 html 静态页面，再发布到 GitHub Pages 上面，还有一些是发布到我自己的 VPS 上面（为了百度爬虫）。</p><p>但是最近我发现一个现象，有一些文章的锚点无效，也就是表现为目录无法跳转，例如想直接查看某一级目录的内容，在右侧的 <strong>文章目录 </strong>中直接点击对应的标题，不会自动跳转过去。这个问题我发现了很久，但是一直没在意，也没有找到原因。最近才碰巧发现是因为标题内容里面有空格，这才导致生成的 html 静态页面里面的锚点失效，我随机又测试了几次其它的页面，看起来的确是这样。下面列出一些示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.playpi.org/2019022501.html ，Hexo 踩坑记录的 </span><br><span class="line">https://www.playpi.org/2018121901.html ，js 字符串分割方法 </span><br><span class="line">https://www.playpi.org/2019020701.html ，itchat 0 - 初识 </span><br></pre></td></tr></table></figure><p>但是，我又发现其他人的博客，目录标题内容中也有空格，却可以正常跳转，我很疑惑。现在我猜测是 Hexo 的问题，或者哪里需要配置，等待以后的解决方法吧。别人的博客示例：<a href="https://blog.itnote.me/Hexo/hexo-chinese-english-space/" target="_blank" rel="noopener">https://blog.itnote.me/Hexo/hexo-chinese-english-space/</a> 。</p><h1 id="邮件依赖的诡异异常"><a href="# 邮件依赖的诡异异常" class="headerlink" title="邮件依赖的诡异异常"></a>邮件依赖的诡异异常 </h1><p> 在项目中新引入了邮件相关的依赖【没有其它任何变化】，这样就可以在需要时发送通知邮件，依赖内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 邮件相关依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-email&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后神奇的事情发生了，实际执行时，程序抛出异常【去掉这个依赖则正常】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class="line">at sun.nio.cs.UTF_8$Encoder.encodeLoop (UTF_8.java:619)</span><br><span class="line">at java.nio.charset.CharsetEncoder.encode (CharsetEncoder.java:561)</span><br><span class="line">at sun.nio.cs.StreamEncoder.implWrite (StreamEncoder.java:271)</span><br><span class="line">at sun.nio.cs.StreamEncoder.write (StreamEncoder.java:125)</span><br><span class="line">at java.io.OutputStreamWriter.write (OutputStreamWriter.java:207)</span><br><span class="line">at java.io.BufferedWriter.flushBuffer (BufferedWriter.java:129)</span><br><span class="line">at java.io.PrintStream.write (PrintStream.java:526)</span><br><span class="line">at java.io.PrintStream.print (PrintStream.java:669)</span><br><span class="line">at java.io.PrintStream.println (PrintStream.java:806)</span><br><span class="line">at org.slf4j.impl.SimpleLogger.write (SimpleLogger.java:381)</span><br><span class="line">at org.slf4j.impl.SimpleLogger.log (SimpleLogger.java:376)</span><br><span class="line">at org.slf4j.impl.SimpleLogger.info (SimpleLogger.java:538)</span><br><span class="line">at org.apache.maven.cli.logging.Slf4jLogger.info (Slf4jLogger.java:59)</span><br><span class="line">at org.codehaus.plexus.archiver.AbstractArchiver$1.hasNext (AbstractArchiver.java:464)</span><br><span class="line">at org.codehaus.plexus.archiver.AbstractArchiver$1.hasNext (AbstractArchiver.java:467)</span><br><span class="line">at org.codehaus.plexus.archiver.AbstractArchiver$1.hasNext (AbstractArchiver.java:467)</span><br><span class="line">at org.codehaus.plexus.archiver.AbstractArchiver$1.hasNext (AbstractArchiver.java:467)</span><br></pre></td></tr></table></figure><p>而根据这个异常信息，我搜索不到任何有效的信息，一直无法解决。最后，我对比了其它项目的配置，发现 手动设置 maven-assembly-plugin 插件的版本为 <version>2.6</version> 即可。而之前是没有设置这个版本号的，默认去仓库获取的最新版本，这个默认的版本可能刚好有问题。</p><h1 id="Python- 入门踩坑"><a href="#Python- 入门踩坑" class="headerlink" title="Python 入门踩坑"></a>Python 入门踩坑 </h1><p> 在一开始使用 Python 的时候，没有使用类似 Anaconda、Winpython 这种套件来帮我自动管理 Python 的第三方工具库，而是从 Python 安装开始，用到什么再用 pip 安装什么。整个过程真的可以把人搞崩溃，工具库之间的传递依赖、版本的不兼容等问题，令人望而却步，下面给出一些难忘的经历。</p><p>出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install packages failed: Installing packages: error occurred</span><br><span class="line">numpy.distutils.system_info.NotFoundError: no lapack/blas resources found</span><br></pre></td></tr></table></figure><p>需要先手动安装 numpy+mkl，再手动安装 scipy，下载文件链接：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs</a> 。我下载了 2 个文件：numpy-1.11.3+mkl-cp27-cp27m-win32.whl、scipy-0.19.0-cp27-cp27m-win32.whl，然后手动安装。</p><p>一开始我下载的是 64 位的安装包，结果发现我的 Windows 安装的 Python 是 32 位的，导致不支持【下载时没有选择位数，直接下载的默认的包】。另外，直接进入 Python 的命令行环境时也会打印出版本信息的。使用 import pip; print (pip.pep425tags.get_supported ()); 可以获取到 pip 支持的文件名和版本。</p><p>注意安装 scipy 之前还需要各种第三方库，官方介绍：<strong>Install numpy+mkl before installing scipy.</strong>。在 Shell 中验证安装第三方库是否成功，例如 numpy：from numpy import *。</p><p>scipy 包安装：pip install scipy==0.16.1【不推荐】，成功完成安装，如果缺少第三方包会报很多错误。网上查询后的总结：安装 numpy 后安装 scipy 失败，报错：<strong>numpy.distutils.system_info.NotFoundError</strong>，一般是缺少一些系统库，需要安装：libopenblas-dev、liblapack-dev、libatlas-dev、libblas-dev。</p><p>常见第三方库介绍：</p><ul><li>pandas，分析数据 </li><li>sklearn，机器学习，各种算法</li><li>jieba，分词工具</li><li>gensim nlp word2v，模块训练词向量模型</li><li>scipy，算法库，数学工具包</li><li>numpy，数据分析</li><li>matlptop，图形可视化</li></ul><p>Python 中的编码：<br>2.X 版本，python 编码过程： 输入 –&gt; str –&gt; decode –&gt; unicode –&gt; encode –&gt; str –&gt; 输出。<br>3.X 版本，不一样，直接是 unicode。</p><p>Python 中代码有 <strong>print u’xx’ + yy</strong>，yy 是中文，直接跑的时候打印到 Shell 不报错，但是使用后台挂起跑的时候，重定向到文件时，会报错，因为 Python 获取不到输出流的编码。</p><h1 id="Spark-UI- 无法显示"><a href="#Spark-UI- 无法显示" class="headerlink" title="Spark UI 无法显示"></a>Spark UI 无法显示</h1><p> 使用 yarn-client 模式起了一个 Spark 任务，在 Driver 端看到异常日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">2019-01-16_14:53:31 [qtp192486017-1829 - /static/timeline-view.js] WARN servlet.DefaultServlet:587: EXCEPTION </span><br><span class="line">java.lang.IllegalArgumentException: MALFORMED</span><br><span class="line">at java.util.zip.ZipCoder.toString (ZipCoder.java:58)</span><br><span class="line">at java.util.zip.ZipFile.getZipEntry (ZipFile.java:583)</span><br><span class="line">at java.util.zip.ZipFile.access$900 (ZipFile.java:60)</span><br><span class="line">at java.util.zip.ZipFile$ZipEntryIterator.next (ZipFile.java:539)</span><br><span class="line">at java.util.zip.ZipFile$ZipEntryIterator.nextElement (ZipFile.java:514)</span><br><span class="line">at java.util.zip.ZipFile$ZipEntryIterator.nextElement (ZipFile.java:495)</span><br><span class="line">at java.util.jar.JarFile$JarEntryIterator.next (JarFile.java:257)</span><br><span class="line">at java.util.jar.JarFile$JarEntryIterator.nextElement (JarFile.java:266)</span><br><span class="line">at java.util.jar.JarFile$JarEntryIterator.nextElement (JarFile.java:247)</span><br><span class="line">at org.spark-project.jetty.util.resource.JarFileResource.exists (JarFileResource.java:189)</span><br><span class="line">at org.spark-project.jetty.servlet.DefaultServlet.getResource (DefaultServlet.java:398)</span><br><span class="line">at org.spark-project.jetty.servlet.DefaultServlet.doGet (DefaultServlet.java:476)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:707)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHolder.handle (ServletHolder.java:684)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1507)</span><br><span class="line">at org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.doFilter (AmIpFilter.java:164)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1478)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:499)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1086)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doScope (ServletHandler.java:427)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1020)</span><br><span class="line">at org.spark-project.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)</span><br><span class="line">at org.spark-project.jetty.server.handler.GzipHandler.handle (GzipHandler.java:264)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)</span><br><span class="line">at org.spark-project.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)</span><br><span class="line">at org.spark-project.jetty.server.Server.handle (Server.java:366)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:494)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:973)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:1035)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseNext (HttpParser.java:641)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseAvailable (HttpParser.java:231)</span><br><span class="line">at org.spark-project.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:696)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:53)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-01-16_14:53:31 [qtp192486017-1829 - /static/timeline-view.js] WARN servlet.ServletHandler:592: Error for /static/timeline-view.js</span><br><span class="line">java.lang.NoClassDefFoundError: org/spark-project/jetty/server/handler/ErrorHandler$ErrorPageMapper</span><br><span class="line">at org.spark-project.jetty.server.handler.ErrorHandler.handle (ErrorHandler.java:71)</span><br><span class="line">at org.spark-project.jetty.server.Response.sendError (Response.java:349)</span><br><span class="line">at javax.servlet.http.HttpServletResponseWrapper.sendError (HttpServletResponseWrapper.java:118)</span><br><span class="line">at org.spark-project.jetty.http.gzip.CompressedResponseWrapper.sendError (CompressedResponseWrapper.java:291)</span><br><span class="line">at org.spark-project.jetty.servlet.DefaultServlet.doGet (DefaultServlet.java:589)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:707)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHolder.handle (ServletHolder.java:684)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1507)</span><br><span class="line">at org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.doFilter (AmIpFilter.java:164)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1478)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:499)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1086)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doScope (ServletHandler.java:427)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1020)</span><br><span class="line">at org.spark-project.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)</span><br><span class="line">at org.spark-project.jetty.server.handler.GzipHandler.handle (GzipHandler.java:264)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)</span><br><span class="line">at org.spark-project.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)</span><br><span class="line">at org.spark-project.jetty.server.Server.handle (Server.java:366)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:494)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:973)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:1035)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseNext (HttpParser.java:641)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseAvailable (HttpParser.java:231)</span><br><span class="line">at org.spark-project.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:696)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:53)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-01-16_14:53:31 [qtp192486017-1829 - /static/timeline-view.js] WARN server.AbstractHttpConnection:552: /static/timeline-view.js</span><br><span class="line">java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.isAsyncStarted () Z</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:608)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1086)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doScope (ServletHandler.java:427)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1020)</span><br><span class="line">at org.spark-project.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)</span><br><span class="line">at org.spark-project.jetty.server.handler.GzipHandler.handle (GzipHandler.java:264)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)</span><br><span class="line">at org.spark-project.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)</span><br><span class="line">at org.spark-project.jetty.server.Server.handle (Server.java:366)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:494)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:973)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:1035)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseNext (HttpParser.java:641)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseAvailable (HttpParser.java:231)</span><br><span class="line">at org.spark-project.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:696)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:53)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br></pre></td></tr></table></figure><p>这个日志在反复打印，也就是在任务的运行过程中，一直都有这个错误。它引发了什么问题呢，我检查了一下，对 Spark 任务的实际功能并没有影响，任务跑完后功能正常实现。但是，我发现在任务的运行过程中，Spark UI 页面打开后不正常显示【异常信息的开头就是关于某个 js 文件问题】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g12h3dbte0j20tr0ge3yv.jpg" alt="SparkUI 不正常显示" title="SparkUI 不正常显示"></p><p>点击进去，直接显示 Error 500：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g12h42u9iuj20t50fa74n.jpg" alt="点击进去" title="点击进去"><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g12h48uvu5j20mj08imwz.jpg" alt="Error500" title="Error500"></p><p>服务器的 Driver 端日志截图：<br>日志截图 1<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g12h4vfjokj20wu0mgwgs.jpg" alt="日志截图 1" title="日志截图 1"></p><p>日志截图 2<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g12h4zran1j20ya0mgwgy.jpg" alt="日志截图 2" title="日志截图 2"></p><p>日志截图 3<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g12h53va2qj20xs0mgacl.jpg" alt="日志截图 3" title="日志截图 3"></p><p>等了几天，又遇到同样的问题，除了这 2 次，其它时间点就没遇到过了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">2019-01-24_22:51:49 [qtp697001207-1591 - /static/spark-dag-viz.js] WARN servlet.DefaultServlet:587: EXCEPTION </span><br><span class="line">java.lang.IllegalArgumentException: MALFORMED</span><br><span class="line">at java.util.zip.ZipCoder.toString (ZipCoder.java:58)</span><br><span class="line">at java.util.zip.ZipFile.getZipEntry (ZipFile.java:583)</span><br><span class="line">at java.util.zip.ZipFile.access$900 (ZipFile.java:60)</span><br><span class="line">at java.util.zip.ZipFile$ZipEntryIterator.next (ZipFile.java:539)</span><br><span class="line">at java.util.zip.ZipFile$ZipEntryIterator.nextElement (ZipFile.java:514)</span><br><span class="line">at java.util.zip.ZipFile$ZipEntryIterator.nextElement (ZipFile.java:495)</span><br><span class="line">at java.util.jar.JarFile$JarEntryIterator.next (JarFile.java:257)</span><br><span class="line">at java.util.jar.JarFile$JarEntryIterator.nextElement (JarFile.java:266)</span><br><span class="line">at java.util.jar.JarFile$JarEntryIterator.nextElement (JarFile.java:247)</span><br><span class="line">at org.spark-project.jetty.util.resource.JarFileResource.exists (JarFileResource.java:189)</span><br><span class="line">at org.spark-project.jetty.servlet.DefaultServlet.getResource (DefaultServlet.java:398)</span><br><span class="line">at org.spark-project.jetty.servlet.DefaultServlet.doGet (DefaultServlet.java:476)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:707)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHolder.handle (ServletHolder.java:684)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1507)</span><br><span class="line">at org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.doFilter (AmIpFilter.java:164)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1478)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:499)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1086)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doScope (ServletHandler.java:427)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1020)</span><br><span class="line">at org.spark-project.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)</span><br><span class="line">at org.spark-project.jetty.server.handler.GzipHandler.handle (GzipHandler.java:264)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)</span><br><span class="line">at org.spark-project.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)</span><br><span class="line">at org.spark-project.jetty.server.Server.handle (Server.java:366)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:494)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:973)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:1035)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseNext (HttpParser.java:641)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseAvailable (HttpParser.java:231)</span><br><span class="line">at org.spark-project.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:696)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:53)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-01-24_22:51:49 [qtp697001207-1591 - /static/spark-dag-viz.js] WARN servlet.ServletHandler:592: Error for /static/spark-dag-viz.js</span><br><span class="line">java.lang.NoClassDefFoundError: org/spark-project/jetty/server/handler/ErrorHandler$ErrorPageMapper</span><br><span class="line">at org.spark-project.jetty.server.handler.ErrorHandler.handle (ErrorHandler.java:71)</span><br><span class="line">at org.spark-project.jetty.server.Response.sendError (Response.java:349)</span><br><span class="line">at javax.servlet.http.HttpServletResponseWrapper.sendError (HttpServletResponseWrapper.java:118)</span><br><span class="line">at org.spark-project.jetty.http.gzip.CompressedResponseWrapper.sendError (CompressedResponseWrapper.java:291)</span><br><span class="line">at org.spark-project.jetty.servlet.DefaultServlet.doGet (DefaultServlet.java:589)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:707)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHolder.handle (ServletHolder.java:684)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1507)</span><br><span class="line">at org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.doFilter (AmIpFilter.java:164)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1478)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:499)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1086)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doScope (ServletHandler.java:427)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1020)</span><br><span class="line">at org.spark-project.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)</span><br><span class="line">at org.spark-project.jetty.server.handler.GzipHandler.handle (GzipHandler.java:264)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)</span><br><span class="line">at org.spark-project.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)</span><br><span class="line">at org.spark-project.jetty.server.Server.handle (Server.java:366)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:494)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:973)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:1035)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseNext (HttpParser.java:641)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseAvailable (HttpParser.java:231)</span><br><span class="line">at org.spark-project.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:696)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:53)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-01-24_22:51:49 [qtp697001207-1591 - /static/spark-dag-viz.js] WARN server.AbstractHttpConnection:552: /static/spark-dag-viz.js</span><br><span class="line">java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.isAsyncStarted () Z</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:608)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1086)</span><br><span class="line">at org.spark-project.jetty.servlet.ServletHandler.doScope (ServletHandler.java:427)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:1020)</span><br><span class="line">at org.spark-project.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)</span><br><span class="line">at org.spark-project.jetty.server.handler.GzipHandler.handle (GzipHandler.java:264)</span><br><span class="line">at org.spark-project.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)</span><br><span class="line">at org.spark-project.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)</span><br><span class="line">at org.spark-project.jetty.server.Server.handle (Server.java:366)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:494)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:973)</span><br><span class="line">at org.spark-project.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:1035)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseNext (HttpParser.java:641)</span><br><span class="line">at org.spark-project.jetty.http.HttpParser.parseAvailable (HttpParser.java:231)</span><br><span class="line">at org.spark-project.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:696)</span><br><span class="line">at org.spark-project.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:53)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)</span><br><span class="line">at org.spark-project.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br></pre></td></tr></table></figure><p>此外，还有一点值得注意，Chrome 浏览器的某些端口是禁止访问的，所以遇到过有一个 Spark 任务使用了 4045 端口【locked】，在 Chrome 浏览器是看不了任务状态的，页面无法打开，被 Chrome 浏览器屏蔽了，此时并不是 Spark 的问题。</p><h1 id="关于 -Git- 的小问题"><a href="# 关于 -Git- 的小问题" class="headerlink" title="关于 Git 的小问题"></a>关于 Git 的小问题 </h1><p>1、本地版本落后，而且又与远程仓库冲突，git pull 报错警告，需要 merge，无法直接更新最新版本。下面的操作直接覆盖本地文件，强制更新到最新版本，本地未提交的更改会丢失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><p>2、在 2018 年 9 月的某一天，发现 Git 的代码推送总是需要输入帐号和密码，哪怕保存下来也不行，每次 push 都需要重新输入，感觉很奇怪。后来发现是版本太旧了，当时的版本是 v2.13.0，升级后的版本是 v2.18.0，升级后就恢复正常了。后来无意间在哪里看到过通知，说是 TSL 协议升级了，所以针对旧版本强制输入用户名密码，升级就可以解决。</p><p> 备注一下，HTTPS 是在 TCP 和 HTTP 之间增加了 TLS【Transport Layer Security，传输层安全】，提供了内容加密、身份认证和数据完整性三大功能。TLS 的前身是 SSL【Secure Sockets Layer，安全套接字层】，由网景公司开发，后来被 IETF 标准化并改名。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;由于技术能力的限制，平时会遇到一些自己觉得非常诡异的问题，感觉到莫名其妙。其实到头来发现，归根结底还是自己的认知问题：可能是技术水平不够，或者考虑不周全，甚至是一些低级别的错误判断。总而言之，遇到这些问题后，有时候请教人、查资料之后仍旧不得解，只能先记录下来，留做备注说明，等待以后解决。当然，随着时间的流逝，有些问题可能就被忘记了，有些问题在之后的某一个时间点被解决了。本文就是要记录这些问题，并在遇到新问题或者解决老问题之后，保持更新。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="Git" scheme="https://www.playpi.org/tags/Git/"/>
    
      <category term="ElasticSearch" scheme="https://www.playpi.org/tags/ElasticSearch/"/>
    
      <category term="es" scheme="https://www.playpi.org/tags/es/"/>
    
      <category term="Python" scheme="https://www.playpi.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 的踩坑经验</title>
    <link href="https://www.playpi.org/2019022501.html"/>
    <id>https://www.playpi.org/2019022501.html</id>
    <published>2019-02-24T17:00:21.000Z</published>
    <updated>2019-02-25T17:00:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>大家知道，我是使用 Hexo 来构建我的静态站点的，每次使用 Markdown 语法书写 md 文档即可。写完后在本地使用 hexo g &amp; hexo s 命令【在本地生成并且部署，默认主页是 localhost:4000】来验证一下是否构建正常。如果有问题或者对页面效果不满意就返回重新修改，如果没有问题就准备提交到 GitHub 上面的仓库里面【在某个项目的某个分支】，后续 travid-cli 监控对应的分支变化，然后自动构建，并推送到 master 分支。至此，更新的页面就发布完成了，本人需要做的就是管理书写 md 文档，然后确保没问题就提交到 GitHub 的仓库。</p><a id="more"></a><h1 id="问题清单"><a href="# 问题清单" class="headerlink" title="问题清单"></a>问题清单 </h1><p> 前言描述的很好，很理想，但是有时候总会出现一些未知的问题，而我又不了解其中的技术，所以解决起来很麻烦，大部分时候都是靠蒙的【当然，也可以直接在 Hexo 的官方项目上提出 Issue，让作者帮忙解决】。下面就记录一些遇到的问题，以及我自己找到的原因。</p><h1 id="1-Markdown- 语法不规范"><a href="#1-Markdown- 语法不规范" class="headerlink" title="1-Markdown 语法不规范"></a>1-Markdown 语法不规范 </h1><p> 这个错误有在 travis 上面出现过，在 travis 的 116 号、117 号错误：<a href="https://travis-ci.org/iplaypi/iplaypi.github.io/builds/476399853" target="_blank" rel="noopener">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/476399853</a> 。</p><p>在使用 hexo 框架的时候，一定要确保 markdown 文件里面的代码块标识【标记代码的类型，例如：java、bash、html 等】使用正确。否则使用 <strong>hexo g</strong> 生成静态网页的时候，不会报错，但是却没有成功生成 html 静态网页，虽然 html 静态文件是有的，但是却查看不了，显示一片空白。</p><p>代码块示例：</p><p>Java 格式 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7gk7162j20jn04bt8o.jpg" alt="Java 格式" title="Java 格式"></p><p>xml 格式<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7hmem4lj20de054mx2.jpg" alt="xml 格式" title="xml 格式"></p><p>bash 格式<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7hyp6j3j209o02j0si.jpg" alt="bash 格式" title="bash 格式"></p><p> 例如我把图一的 java 误写成了 bash，<strong>hexo g</strong> 的时候没有报错，但是生成的 html 静态网页却是空白一片，打开了什么也看不到。</p><p>空白页面 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7if0nmuj21hk0s5q4y.jpg" alt="空白页面" title="空白页面"></p><p> 但是如果把 java 误写成了 xml，在本地执行 <strong>hexo g</strong> 的时候不会报错，生成的 html 静态网页也是正常的。而一旦使用 travis-cli 执行自动构建的时候，构建是失败的【在 travis 的 116 号、117 号错误：<a href="https://travis-ci.org/iplaypi/iplaypi.github.io/builds/476399853" target="_blank" rel="noopener">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/476399853</a> 】，并且可以看到错误信息，图四，但是我看不懂错误原因，只能猜测找到问题所在，比较耗时。</p><p>travis-cli 报错日志【我看不懂】：<br>travis-cli 日志 1<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7iqv9msj20th0ld0to.jpg" alt="travis-cli 日志 1" title="travis-cli 日志 1"></p><p>travis-cli 日志 2<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7jt59f2j20rh0nvjur.jpg" alt="travis-cli 日志 2" title="travis-cli 日志 2"></p><p>travis-cli 日志 3<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7jokkp6j20rh0p4dj2.jpg" alt="travis-cli 日志 3" title="travis-cli 日志 3"></p><p>此外，写 Markdown 文档，使用代码块标记的时候，使用 3 个反单引号来标记，如果不熟悉代码块里面的编程语言，可以省略类型，例如 java、bash、javascript，不要填写，否则填错了生成的 html 静态文件是空白的。还有就是如果代码块里面放的是一段英文文本，和编程语言无关，也不要填写类型，否则生成的 html 静态文件也是空白的。</p><h1 id="2-Hexo- 报错奇怪"><a href="#2-Hexo- 报错奇怪" class="headerlink" title="2-Hexo 报错奇怪"></a>2-Hexo 报错奇怪 </h1><p> 这个错误还没有到 travis 上面，所以 travis 上面没有记录；</p><p>在本地测试过程中，无论是 <strong>hexo s</strong> 还是 <strong>hexo g</strong> 都会报错，错误信息如图：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7kb9p5zj20jt02k3yk.jpg" alt="报错信息" title="报错信息"></p><p>看着这个信息，很像在当前项目的目录中找不到 hexo 命令，和 java 类似，我就怀疑是不是安装的 hexo 被什么时候卸载了，其实不是的，在其它项目中还能用。后来我发现是当前项目使用的模块缺失，为什么会缺失我也不知道，由于这些缺失的模块是通过 hexo 引入的，所以直接报错：hexo not found，给人以误导。</p><p>总的来说，就是报错有误导性，没有报模块缺失，而我又不懂这些，查了一些资料，手动测试了一些方法，总算找到原因所在。找到原因，那解决办法很简单了，直接安装缺失的模块即可，使用 <strong>nmp install</strong> 命令安装 package.json 里面的模块。</p><h1 id="3-Hexo- 配置错误引起的误导性"><a href="#3-Hexo- 配置错误引起的误导性" class="headerlink" title="3-Hexo 配置错误引起的误导性"></a>3-Hexo 配置错误引起的误导性 </h1><p> 这个错误还没有到 travis 上面，所以 travis 上面没有记录；</p><p>这个错误和上面的类似，但是如果从报错信息上面看，也具有误导性。在更改了 _config.yml 配置文件后，按照正常步骤去生成、部署的时候【使用 <strong>hexo g &amp; hexo s</strong> 命令，直接报错了，把我整蒙了，报错信息如下：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7kzx1vij20k50iqq4q.jpg" alt="报错信息" title="报错信息"></p><p>关键配置部分如下，后续找到问题确实出在这里：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7les4wdj20lu08wt9j.jpg" alt="关键配置部分" title="关键配置部分"></p><p>从图中看信息，我也看不到什么原因，因为确实不懂。注意，我为了测试，发现 <strong>hexo g</strong> 是没有问题的，也就是生成没问题，那问题就出在部署步骤了，它会不认这个 <strong>hexo s</strong> 命令？我查了资料，发现大部分人都说缺失 hexo server 模块，我通过检查可以确保本机有这个模块，而且卸载了重新装，所以不是这个问题。</p><p>最后发现是配置信息里面的参数【官方定义的关键词】错误了，里面的 <strong>Plugins</strong> 这个参数应该使用首字母大写，这谁能想到，正确的配置参数如下图：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0j7lre005j20nb08udgb.jpg" alt="plugins 改为首字母大写" title="plugins 改为首字母大写"></p><h1 id="4-travis- 配置问题"><a href="#4-travis- 配置问题" class="headerlink" title="4-travis 配置问题"></a>4-travis 配置问题 </h1><p> 这个错误有在 travis 上面出现过，在 travis 的 27 号：<a href="https://travis-ci.org/iplaypi/iplaypi.github.io/builds/448152737" target="_blank" rel="noopener">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/448152737</a> 。</p><p>在使用 travis 自动构建时，有一次突发奇想，想使用最新版本的 node_js，于是在 travis.yml 配置文件中，把 node_js 设为了 stable，即稳定版本，这样在构建的时候会使用最新稳定版本的 node_js，没想到就出问题了。</p><p>node_js 的配置如下：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0k90kw0e8j20oy0dujsd.jpg" alt="node_js 的配置" title="node_js 的配置"></p><p>travis 报错日志如下：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0k91bjlrxj20rq0qxq4q.jpg" alt="travis 报错日志" title="travis 报错日志"></p><p>重要部分：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error nunjucks@<span class="number">3.1</span><span class="number">.3</span>: The engine <span class="string">"node"</span> is incompatible <span class="keyword">with</span> <span class="keyword">this</span> <span class="built_in">module</span>. Expected version <span class="string">"&gt;= 6.9.0 &lt;= 11.0.0-0"</span>. Got <span class="string">"11.0.0"</span></span><br><span class="line">error Found incompatible <span class="built_in">module</span></span><br></pre></td></tr></table></figure><p></p><p>看来还是在搞清楚新旧版本之间的差异后再想着升级版本，不要随意来，要不然浪费的是自己的时间。后来解决办法就是手动指定 node_js 的版本。</p><h1 id="5- 无缘无故出现的问题"><a href="#5- 无缘无故出现的问题" class="headerlink" title="5 - 无缘无故出现的问题"></a>5 - 无缘无故出现的问题 </h1><p> 这个错误有在 travis 上面出现过，在 travis 的 133 号、134 号错误、135 号错误、136 号错误，举例：<a href="https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498318318" target="_blank" rel="noopener">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498318318</a> ；</p><p>日志部分截图：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0k91nhkhkj20rk0l6761.jpg" alt="日志内容" title="日志内容"></p><p>这错误信息里面对我来说确实看不到有效的内容，还没找到解决办法，看似是文件路径不存在，但是项目配置也没变过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! path /home/travis/.nvm/versions/node/v10<span class="number">.10</span><span class="number">.0</span>/lib/node_modules/hexo-cli/node_modules/highlight.js/tools/build.js</span><br><span class="line">npm ERR! code ENOENT</span><br><span class="line">npm ERR! errno <span class="number">-2</span></span><br><span class="line">npm ERR! syscall chmod</span><br><span class="line">npm ERR! enoent ENOENT: no such file or directory, chmod <span class="string">'/home/travis/.nvm/versions/node/v10.10.0/lib/node_modules/hexo-cli/node_modules/highlight.js/tools/build.js'</span></span><br><span class="line">npm ERR! enoent This is related to npm not being able to find a file.</span><br><span class="line">npm ERR! enoent </span><br><span class="line">npm ERR! A complete log <span class="keyword">of</span> <span class="keyword">this</span> run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     <span class="regexp">/home/</span>travis/.npm/_logs/<span class="number">2019</span><span class="number">-02</span><span class="number">-25</span>T18_45_08_713Z-debug.log</span><br></pre></td></tr></table></figure><p>等待找问题的原因。</p><p>好，仔细看了日志、找了博客文档，没有解决方法，我也不懂，看到可能是版本原因【我不能升级 nodejs 版本，与 yarn 有关】，可能是权限问题。我用 sudo npm install -g hexo-cli 试了试，明显不行：<a href="https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498794142" target="_blank" rel="noopener">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498794142</a> ，然后我就放弃了，直接改回来提交了，没想到无缘无故就可以了，构建日志：<a href="https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498796865" target="_blank" rel="noopener">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498796865</a> 。</p><p>准备发邮件问问 travis 客服，我现在单方面怀疑是 travis 的环境问题或者构建脚本所依赖的环境问题。由于时差问题，先记录几个时区的缩写，方便查看邮件内容的时候核对时间：UTC【世界标准时间】、EST【东部标准时间，UTC-5】、CET【欧洲中部时间，UTC+1】。</p><p>我发送的邮件内容如下【发送于北京时间 2019-02-28 14:42:00】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0s7r7q8rsj230g1rswyo.jpg" alt="我发送的邮件内容" title="我发送的邮件内容"></p><p>完整文字版供参考 <br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Automatic building is failed</span><br><span class="line"></span><br><span class="line">Hello,</span><br><span class="line">I hava a repository in GitHub,and i use travis-ci to build it automatically.</span><br><span class="line">I configured the correct script,and it has been built successfully more than one hundred times.</span><br><span class="line">My script is :</span><br><span class="line">https://github.com/iplaypi/iplaypi.github.io/blob/source/.travis.yml ;</span><br><span class="line"></span><br><span class="line">But it built failed at 2019-02-26,the all log as follows (i retry it three times,but still failed):</span><br><span class="line">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498267014</span><br><span class="line">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498278045</span><br><span class="line">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498297576</span><br><span class="line">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498318318</span><br><span class="line"></span><br><span class="line">I cannot find any usefuI information in my log.I am very sad and helpless.</span><br><span class="line">But i retry it at 2019-02-27,it actually build successfully,amazing.</span><br><span class="line">I swear I have not changed any files,the successful log is:</span><br><span class="line">https://travis-ci.org/iplaypi/iplaypi.github.io/builds/498796865 ;</span><br><span class="line">So i am puzzled,i donnot know why,i suspect it is a problem with the machine.</span><br><span class="line">Can you help me?</span><br><span class="line">Best wishes.</span><br></pre></td></tr></table></figure><p></p><p> 发送后对方自动有一个回复，告知我他们的工作时间【中国北京时间与对方时差 + 13】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0s7rpd5kbj219x0lq401.jpg" alt="对方自动回复" title="对方自动回复"></p><p>等了好几天，对方终于回复了【回复于北京时间 2019-03-04 11:00:00】，对方回复内容如下：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0s7s5bo3uj219x0lswfv.jpg" alt="对方回复" title="对方回复"></p><p>对方回复重要文字内容 <br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hey there,</span><br><span class="line"></span><br><span class="line">Thanks for reaching out and I&apos;m sorry for these spurious failures you have experienced.</span><br><span class="line"></span><br><span class="line">I think it could be an issue with the package itself or the NPM registry on that specific day. I&apos;ve looked at NPM&apos;s status and their was an incident on Feb. 27th. See https://status.npmjs.org/incidents/ptnlj2rtwfwm. Maybe it was already happening on Feb. 26th? Sorry for not having a better explanation.</span><br><span class="line"></span><br><span class="line">Please let us know if this issue resurfaces again, we would be happy to have another look.</span><br><span class="line"></span><br><span class="line">Thanks in advance and happy building!</span><br></pre></td></tr></table></figure><p></p><p> 看起来技术支持也没发现是啥问题，只是说有可能是 NPM 的问题，还给了一个链接：<a href="https://status.npmjs.org/incidents/ptnlj2rtwfwm" target="_blank" rel="noopener">https://status.npmjs.org/incidents/ptnlj2rtwfwm</a>，根据链接可以看到 NPM 的状态在某个时间点出问题了【时间点为 2019-02-27 15:46:00 UTC，也就是北京时间 2019-02-27 23:46:00】：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0s7sku7hvj20p00k0gmb.jpg" alt="nmp 问题" title="nmp 问题"></p><p>但是我那个自动构建的问题是出在北京时间 2019-02-26 凌晨的，时间点也对不上，所以技术支持只是怀疑，也没有结论，那我也就不管了，继续观察以后有没有相同的问题出现。</p><h1 id="6- 排版问题"><a href="#6- 排版问题" class="headerlink" title="6 - 排版问题"></a>6 - 排版问题 </h1><p>1、在 Markdown 文件中关于链接的，要使用 []、() 这 2 个完整的标记，不要直接放一个链接出来，会导致生成的 html 文件带链接的内容居中对齐，导致文字分散开来，不好看。</p><p>2、中文括号不要使用，也会导致居中对齐的问题，文字排版不好看，使用方括号吧：【内容示例】。</p><h1 id="7- 草稿问题"><a href="#7- 草稿问题" class="headerlink" title="7 - 草稿问题"></a>7 - 草稿问题</h1><p> 我在使用 Hexo 的草稿功能时，发现一个问题，操作完成发布时，发现 Markdown 文档的头部描述信息变化了。例如我本来设置的 id 又变回了日期【可以理解，因为模板就是这样设置的】，然后 tags 的中括号中的标签变为了无需列表【不可理解】。暂时还没发现内容的变化，可能是内容中没有特殊符号。</p><p>导致的问题就是草稿发布后【内容已经变化了】，提交到 source 分支，自动构建时，提交到主分支 master 后，这些文章的链接变为了日期的乱格式【因为是基于错误的 Markdown 文件构建的】。所以以后还是不要使用草稿功能了，没有必要，还麻烦，没写完也可以发布嘛，没啥大问题。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g0tkfnu178j20w50gj0tq.jpg" alt="文章链接是错误的" title="文章链接是错误的"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;大家知道，我是使用 Hexo 来构建我的静态站点的，每次使用 Markdown 语法书写 md 文档即可。写完后在本地使用 hexo g &amp;amp; hexo s 命令【在本地生成并且部署，默认主页是 localhost:4000】来验证一下是否构建正常。如果有问题或者对页面效果不满意就返回重新修改，如果没有问题就准备提交到 GitHub 上面的仓库里面【在某个项目的某个分支】，后续 travid-cli 监控对应的分支变化，然后自动构建，并推送到 master 分支。至此，更新的页面就发布完成了，本人需要做的就是管理书写 md 文档，然后确保没问题就提交到 GitHub 的仓库。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="hexo" scheme="https://www.playpi.org/tags/hexo/"/>
    
      <category term="markdown" scheme="https://www.playpi.org/tags/markdown/"/>
    
      <category term="java" scheme="https://www.playpi.org/tags/java/"/>
    
      <category term="bash" scheme="https://www.playpi.org/tags/bash/"/>
    
      <category term="xml" scheme="https://www.playpi.org/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>鸡蛋饼做法总结</title>
    <link href="https://www.playpi.org/2019021001.html"/>
    <id>https://www.playpi.org/2019021001.html</id>
    <published>2019-02-10T11:47:12.000Z</published>
    <updated>2019-02-11T11:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>鸡蛋饼算是一种小吃，做法多种多样，可以煎，可以烙，可以蒸；吃法也多种多样，有的地方会卷配菜吃，有的地方会配粥吃，有的地方会直接吃。总而言之，鸡蛋饼算是一种万能美食，全国各地都有，大家也都喜欢吃，本文就记录鸡蛋煎饼的做法总结，本文记录的做法是采用煎的方式，另外还会额外放点葱花。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 以下准备的食材可以煎 15 个鸡蛋饼左右：</p><p>1、鸡蛋 4 个（喜欢的话多放点也可以）；</p><p>2、200-300 克面粉（可以煎 15 个左右，面粉不能确定量，是因为如果面糊没有配好，就适量加水或者加面，调整好为止，具体会用到多少看情况了）；</p><p>3、小葱 5 根（根据个人口味添加，多点少点都行）；</p><p>适量的食材 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zsjak5uj229s29sb2a.jpg" alt="适量的食材" title="适量的食材"></p><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a> 制作步骤 </h1><p> 制作步骤很简单，只要能煎好一张饼，重复进行就行了，煎好一张饼大概需要 3 分钟。当然，如果是第一次煎饼，可能煎前面几张饼的时候需要练习一下，也可能需要重新调制面糊，所以时间会长一点，但是为了煎饼成功，麻烦一点也值了。</p><p>调制面糊的过程就不记录了，就是加盐（4 勺）、葱花、面粉、鸡蛋、水（最好可以用凉白开，别直接使用自来水）搅拌即可，如果里面有很多面疙瘩，不用担心，静置 10 分钟搅拌一次，重复 3 次左右面疙瘩即全部溶于水。</p><p>面糊调制初步，还有很多面疙瘩 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zsyhqz9j229s29sx6p.jpg" alt="面糊调制初步" title="面糊调制初步"></p><p> 面糊调制完成 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zt8lieaj229s29s1ky.jpg" alt="面糊调制完成" title="面糊调制完成"></p><p> 粘稠度大概这样，不会很粘稠，和液体差不多 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02ztjniz7j229s29s1ky.jpg" alt="粘稠度大概这样" title="粘稠度大概这样"></p><p>1，锅里加油烧热，只要半勺即可（吃饭的那种小汤勺），多了会腻，然后火力转小火，并一直持续小火。</p><p> 半勺油的量 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zttlh5dj229s29su0x.jpg" alt="半勺油的量" title="半勺油的量"></p><p>2，放入一汤勺面糊（烧汤那种大汤勺，或者电饭煲自带的那种粥勺），如果发现煎出来的饼太厚了或者太大了，可以适当少放一点点面糊，具体放多少自己把握。然后适当转动煎锅，让面糊呈圆形（一定要快，10 秒内完成，否则因为受热不均匀，饼可能会散开变成多块，或者是一个圆环饼套着一个小圆饼），等逐渐凝固后就成了圆饼，然后接触锅的那一面就变得金黄，这个过程大概 1 分钟。</p><p> 一大汤勺面糊 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zu5p94aj229s29s7wi.jpg" alt="一大汤勺面糊" title="一大汤勺面糊"></p><p> 加面糊到锅里 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zuex8yfj229s29sqv5.jpg" alt="加面糊到锅里" title="加面糊到锅里"></p><p> 转动成型 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zuu7r6ej229s29su0x.jpg" alt="转动成型" title="转动成型"></p><p>3，等凝固后就可以翻身了，这个步骤说简单也简单，说难也难，如果直接用锅不方便翻身的话，可以借助铲子，翻身后，可以看到饼的上一面已经煎好了，金黄的。这个时候注意要适当把饼转动一下，吸收一下油，避免粘锅。</p><p> 给饼翻身 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zv4hgxoj229s29s7wi.jpg" alt="给饼翻身" title="给饼翻身"></p><p>4，翻身后再煎 1 分钟左右，就可以出锅了，如果看到饼上面哪里煎的不均匀，还没熟，可以再着重煎几十秒。切记不能煎太久，要不然饼就糊了。</p><p> 翻身后继续煎 1 分钟，再根据实际情况着重煎一下，准备出锅 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zvduw1jj229s29su0x.jpg" alt="准备出锅" title="准备出锅"></p><p>5，出锅装盘，继续下一张鸡蛋饼。</p><p> 全部出锅装盘 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1g02zvpluirj229s29sb2a.jpg" alt="全部出锅装盘" title="全部出锅装盘"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项</h1><p>1、特别注意，如果调制面糊不是特别熟练的话，可能面糊的粘稠度不适合，或者调味偏淡偏咸，这样都不好，所以最好尝试着煎一个，然后品尝一下，如果味道不对再加调料，如果煎出来的饼不对，再加水或者面粉。多试几次，确保煎出来的饼自己满意。如果一味地煎饼，最后发现不好吃，那就浪费了；</p><p>2、如果有两个锅可以用，为了节省时间，最好两个锅同时煎，要不然整个过程很枯燥，因为有一半的时间都在等待；</p><p>3、有时候可能看着好像煎糊了，不用担心，不影响吃，因为出锅后等一会儿，褐色就会变成金黄色，非常好看；</p><p>4、整个过程一定要确保是小火，否则饼很快就糊了；</p><p>5、难点在于翻身，只要一出错一张饼就废了（或者变成了一堆碎饼）。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;鸡蛋饼算是一种小吃，做法多种多样，可以煎，可以烙，可以蒸；吃法也多种多样，有的地方会卷配菜吃，有的地方会配粥吃，有的地方会直接吃。总而言之，鸡蛋饼算是一种万能美食，全国各地都有，大家也都喜欢吃，本文就记录鸡蛋煎饼的做法总结，本文记录的做法是采用煎的方式，另外还会额外放点葱花。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="鸡蛋饼" scheme="https://www.playpi.org/tags/%E9%B8%A1%E8%9B%8B%E9%A5%BC/"/>
    
      <category term="鸡蛋葱饼" scheme="https://www.playpi.org/tags/%E9%B8%A1%E8%9B%8B%E8%91%B1%E9%A5%BC/"/>
    
      <category term="鸡蛋煎饼" scheme="https://www.playpi.org/tags/%E9%B8%A1%E8%9B%8B%E7%85%8E%E9%A5%BC/"/>
    
  </entry>
  
  <entry>
    <title>ItChat 系列 0 - 初识 ItChat</title>
    <link href="https://www.playpi.org/2019020701.html"/>
    <id>https://www.playpi.org/2019020701.html</id>
    <published>2019-02-07T14:58:07.000Z</published>
    <updated>2019-02-07T14:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>微信已经是我们日常生活中常用的 APP 之一，每天都离不开。作为掌握技术的理工科人员，有时候总想着是否可以利用微信的接口完成一些重复的工作，例如群发消息、自动回复、接入机器人自动聊天等。当然，这些都可以实现，而且只要是人工可以做到的事情，基本都可以做到自动化（前提是微信提供了对应的接口，反例就是自动收发红包不行，当然微信不会直接提供 API 接口，需要自己寻找）。本文就讲解为了做到这些，需要的入门知识点，主要就是利用 ItChat 工具（屏蔽了微信的 API 接口，简化了使用微信接口的过程，不懂技术的普通人也可以轻松掌握），当然本文只是一个入门的例子而已（完成后对自己来说很实用而且有成就感），后续会讲解更加深入与广泛的内容。本文基于 Windows 7 操作系统，Python 2.7 版本（为了兼容性与易维护性，我推荐使用 Python 3.x 版本）</p><a id="more"></a><h1 id="ItChat- 简介"><a href="#ItChat- 简介" class="headerlink" title="ItChat 简介"></a>ItChat 简介 </h1><p> 摘录官方文档描述：</p><blockquote><p>itchat 是一个开源的微信个人号接口，使用 python 调用微信从未如此简单；<br>使用不到三十行的代码，你就可以完成一个能够处理所有信息的微信机器人；<br>当然，该 api 的使用远不止一个机器人，更多的功能等着你来发现；<br>该接口与公众号接口 itchatmp 共享类似的操作方式，学习一次掌握两个工具；<br>如今微信已经成为了个人社交的很大一部分，希望这个项目能够帮助你扩展你的个人的微信号、方便自己的生活。</p></blockquote><p>当然，我是觉得上面的描述有一些语句不通顺，但是不影响我们理解作者的原意。</p><p>其实微信官方并没有提供详细的 API 接口，ItChat 是利用网页版微信收集了接口信息，然后独立封装一层，屏蔽掉底层的接口信息，提供一套简单的使用接口，方便使用者调用，这不仅提升了效率，还扩展了使用人群。</p><h1 id="使用入门"><a href="# 使用入门" class="headerlink" title="使用入门"></a>使用入门 </h1><p> 以下使用入门包括基础环境的安装、itcaht 的安装、代码的编写、实际运行，当然，为了避免赘述，不会讲解的很详细，如果遇到一些问题，自行利用搜索引擎解决。</p><h2 id="安装 -Python- 环境"><a href="# 安装 -Python- 环境" class="headerlink" title="安装 Python 环境"></a>安装 Python 环境 </h2><h3 id="下载 -Python"><a href="# 下载 -Python" class="headerlink" title="下载 Python"></a> 下载 Python</h3><p>去官网：<a href="https://www.python.org/downloads/windows" target="_blank" rel="noopener">https://www.python.org/downloads/windows</a> ，选择自己需要的版本，我这里选择 Windows 系统的版本（64 位操作系统），Python 2.7（这是一个很古老的版本了，推荐大家使用 3.x 版本）；</p><p>我选择的版本 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcck7qfjj21hc0p6n0z.jpg" alt="Windows 系统 64 位" title="Windows 系统 64 位"></p><p> 下载过程就和下载普通的文件、视频等一样，根据网速的限制有快有慢。</p><h3 id="安装 -Python"><a href="# 安装 -Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>就像安装普通程序一样，直接双击下载的程序文件，选择安装即可，这里就不再赘述详细的安装过程了；</p><p>如果你们的环境不是 Windows 7 系统的，可以自行使用搜索引擎搜索教程；</p><p>这里一定要注意安装的版本是否适配自己的操作系统（包括系统类型与系统位数）；</p><p>在 Windows 系统的 <strong>程序和功能 </strong>中查看已经安装完成的 Python 程序（2.7 版本，我是使用 Anaconda2 安装的，所以看起来有些不一样）：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcbr6amhj20y80k5q5m.jpg" alt="windows 程序和功能" title="windows 程序和功能"></p><h3 id="配置环境变量"><a href="# 配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量 </h3><p> 如果这一步忽略了，使用 Python 或者 Python 自带的插件的时候（比如安装 ItChat 的时候就会用到 pip 工具），会找不到应用程序，只能先进入到 Python 目录或者插件所在的目录再使用对应的工具（例如进入 Python 所在的目录或者 pip 所在的目录），比较麻烦，所以在此建议大家配置一下环境变量；</p><p>配置环境变量的过程也不再赘述，大家自己利用搜索引擎获取，下图是基于 Windows 7 版本的配置截图示例；</p><p><strong>系统属性 </strong><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcdqptjbj215o0ngtez.jpg" alt="系统属性" title="系统属性"></p><p><strong> 高级系统设置 </strong><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcf7mux2j20fe0f7ta0.jpg" alt="高级系统设置" title="高级系统设置"></p><p><strong> 环境变量 </strong>，我这里编辑用户环境变量 PATH 的内容（如果不存在就新建，当然编辑系统环境变量 PATH 的内容也是可以的），切记内容一定是英文格式下的，多个使用英文逗号分隔 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcfp2cdvj20ei0e03zq.jpg" alt="环境变量" title="环境变量"></p><p><strong> 用户环境变量 </strong>，我这里需要填写 2 条内容，使用英文逗号隔开（如果是直接安装的 Python，pip 和 python 应该在同一个路径下面，所以只需要 1 条就行了）<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcg8856yj20ei0e0q4d.jpg" alt="用户环境变量" title="用户环境变量"></p><p>我的环境需要配置 2 条内容 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzcgokfnqj209501tmwy.jpg" alt="配置 2 条内容" title="配置 2 条内容"></p><p> 内容解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--pip 所在目录 </span><br><span class="line">D:\Anaconda2\Scripts\;</span><br><span class="line">--python 所在目录 </span><br><span class="line">D:\Anaconda2;</span><br></pre></td></tr></table></figure><h2 id="安装 -ItChat- 工具"><a href="# 安装 -ItChat- 工具" class="headerlink" title="安装 ItChat 工具"></a>安装 ItChat 工具 </h2><p> 在 Python 安装完成的情况下，才能进行接下来的操作，因为 ItChat 是基于 Python 环境运行的；为了验证 Python 是否正确安装，可以在命令行中输入 python，如果看到以下内容，就说明 Python 安装成功：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzfxmlh41j20n60873zj.jpg" alt="验证 Python" title="验证 Python"></p><p>接下来利用 pip 工具（Python 自带的）直接安装 itchat，非常简单，使用命令（如果 pip 命令不可用，请检查 Python 的安装目录是否存在 pip.exe 文件）：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install itchat</span><br></pre></td></tr></table></figure><p></p><p>安装 ItChat<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzfy2t8p5j20be016741.jpg" alt="itchat 安装命令" title="itchat 安装命令"></p><p>如果看到以下内容，说明 ItChat 安装成功：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzfyl5gcsj20n60a6t9e.jpg" alt="itchat 安装成功" title="itchat 安装成功"></p><h2 id="入门代码示例"><a href="# 入门代码示例" class="headerlink" title="入门代码示例"></a>入门代码示例 </h2><p> 一切准备就绪，接下来就可以写代码了，当然，入门代码非常简单实用（我会尽可能多的添加注释说明）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 从 python 环境中导入 itchat 包，re 正则表达式包 </span></span><br><span class="line"><span class="keyword">import</span> itchat, re</span><br><span class="line"><span class="comment"># 从 itchat.content 中导入所有类、常量 (例如代码中的 TEXT 其实就是 itchat.content.TEXT 常量)</span></span><br><span class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 导入时间包里面的 sleep 方法 </span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># 导入随机数包 </span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 注册消息类型为文本 (即只监控文本消息，其它的例如语音 / 图片 / 表情包 / 文件都不会监控)</span></span><br><span class="line"><span class="comment"># 也就是说只有普通的文字微信消息才能触发以下的代码 </span></span><br><span class="line"><span class="comment"># isGroupChat=True 开启群聊模式，即只是监控群聊内容 (如果不开启就监控个人聊天，不监控群聊)</span></span><br><span class="line"><span class="meta">@itchat.msg_register ([TEXT], isGroupChat=True)</span></span><br><span class="line"><span class="comment"># @itchat.msg_register ([TEXT])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="comment"># msg 是消息体，msg ['Text'] 用来获取消息内容 </span></span><br><span class="line">    <span class="comment"># 第一个单引号中的内容是关键词，使用正则匹配，可以自行更改 (我使用.* 表示任意内容), 如果使用中文注意 2.x 版本的 Python 会报错，需要 u 前缀 </span></span><br><span class="line">    message = msg [<span class="string">'Text'</span>]</span><br><span class="line">    print (message)</span><br><span class="line">    match = re.search (<span class="string">'.*'</span>, message)</span><br><span class="line">    <span class="comment"># match = re.search (u'年 | 春 | 快乐', message)</span></span><br><span class="line">    <span class="comment"># 增加睡眠机制，随机等待一定的秒数 (1-10 秒) 再回复，更像人类 </span></span><br><span class="line">    second = random.randint (<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">    sleep (second)</span><br><span class="line">    <span class="keyword">if</span> match:</span><br><span class="line">      <span class="comment"># msg ['FromUserName'] 用来获取用户名，发送消息给对方 </span></span><br><span class="line">      from_user_name = msg [<span class="string">'FromUserName'</span>]</span><br><span class="line">  print (from_user_name)</span><br><span class="line">      itchat.send ((<span class="string">'====test message'</span>), from_user_name)</span><br><span class="line">      <span class="comment"># 第一个单引号中的内容是回复的内容，可以自行更改 </span></span><br><span class="line"><span class="comment"># 热启动，退出一定时间内重新登录不需要扫码 (其实就是把二维码图片存下来，下次接着使用)</span></span><br><span class="line">itchat.auto_login (hotReload=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 开启命令行的二维码 </span></span><br><span class="line">itchat.auto_login (enableCmdQR=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 运行 </span></span><br><span class="line">itchat.run ()</span><br></pre></td></tr></table></figure><p>代码截图如下：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzh40wm8uj215v0lp0ve.jpg" alt="代码示例" title="代码示例"></p><h2 id="演示"><a href="# 演示" class="headerlink" title="演示"></a>演示 </h2><p> 登录扫码 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzfzy6tf8j21bm0oq76m.jpg" alt="运行代码扫码" title="运行代码扫码"></p><p> 登录成功 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzg0nho9pj20cq01sjr6.jpg" alt="登录成功" title="登录成功"></p><p> 群聊自动回复（正则是任意内容，所以总是会自动回复）<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzg1f8g7nj20u00rp0wd.jpg" alt="群聊自动回复" title="群聊自动回复"></p><p>退出 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzg1qzmewj20n604omy3.jpg" alt="退出" title="退出"></p><p> 重新登录继续聊天（由于开启了热启动，不需要重新扫码）<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzg26yztyj20n6084gmn.jpg" alt="重新登录" title="重新登录"></p><p>继续聊天 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzg2p3tnuj20u01mc7co.jpg" alt="继续聊天" title="继续聊天"></p><h2 id="小问题总结"><a href="# 小问题总结" class="headerlink" title="小问题总结"></a> 小问题总结 </h2><p>1、部分系统可能字幅宽度有出入，可以通过将 enableCmdQR 赋值为特定的倍数进行调整：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如部分的 linux 系统，块字符的宽度为一个字符 (正常应为两字符), 故赋值为 2</span></span><br><span class="line">itchat.auto_login (enableCmdQR=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p></p><p>2、Python 2.7 版本的中文报错问题（在 Python 2.7 环境下使用中文需要额外注意，坑比较多）：<br> 例如代码中正则匹配带中文（由于编码问题导致无法匹配，或者会抛出异常）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则搜索带中文，直接单引号在 Python 2.7 环境下是不行的 </span></span><br><span class="line">match = re.search (<span class="string">'年 | 春 | 快乐'</span>, message)</span><br></pre></td></tr></table></figure><p>实际运行时就会报错（报错信息如果不捕捉后台是看不到的）或者匹配结果不是想象中的（仅针对 Python 2.x 环境）</p><p>需要使用 u 前缀 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则搜索带中文，直接单引号在 Python 2.7 环境下是不行的 </span></span><br><span class="line"><span class="comment"># 增加 u 前缀，表示 unicode 编码，才行 </span></span><br><span class="line">match = re.search (<span class="string">u'年 | 春 | 快乐'</span>, message)</span><br></pre></td></tr></table></figure><p>3、如果不开启热启动，每次重新登录时都会生成新的二维码，直接在 Wimdows 的命令行中，可能由于窗口太小显示不完整，此时需要拉伸一下命令行的窗口：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzg62t07ej20n60sctbf.jpg" alt="窗口拉伸" title="窗口拉伸"></p><p>4、有些人的电脑设置问题，命令行环境背景为白色，生成的二维码的颜色黑白色是相反的，导致扫码时无法识别，此时需要设置代码：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认控制台背景色为暗色 (黑色)，若背景色为浅色 (白色)，可以将 enableCmdQR 赋值为负值 </span></span><br><span class="line">itchat.auto_login (enableCmdQR=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="接入机器人"><a href="# 接入机器人" class="headerlink" title="接入机器人"></a> 接入机器人 </h2><p> 一般读者做到上面的内容就算入门了，可以实现自动回复，并且关于 ItChat 也了解了一些，可以独自参考文档进行更加深入的开发了。但是，自动回复的内容毕竟太固定了，而且只能覆盖极少的内容，没办法实现真正的自动化。要想做到真正的自动化回复，机器人是少不了了，那么接下来讲解的就是如何接入一个第三方机器人，实现机器人自动回复。当然，代码内容也会稍显复杂，操作步骤也会稍显繁琐。</p><h3 id="接入机器人代码示例"><a href="# 接入机器人代码示例" class="headerlink" title="接入机器人代码示例"></a>接入机器人代码示例 </h3><p> 接入机器人时为了换种方式，先把群聊模式关闭，使用个人聊天监控模式（方便聊天内容的随意性，更能提现机器人的可用性）：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@itchat.msg_register ([TEXT])</span></span><br></pre></td></tr></table></figure><p></p><p>还要导入网络请求相关的包：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure><p></p><p>需要使用图灵机器人的核心配置（注册图灵机器人的过程不在此赘述，官网链接：<a href="http://www.tuling123.com" target="_blank" rel="noopener">http://www.tuling123.com</a> ）：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 封装一个根据内容调用机器人接口，返回回复的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="comment"># 构造了要发送给服务器的数据 </span></span><br><span class="line">    apiUrl = <span class="string">'http://www.tuling123.com/openapi/api'</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'key'</span>    : APIKEY,</span><br><span class="line">        <span class="string">'info'</span>   : msg,</span><br><span class="line">        <span class="string">'userid'</span> : <span class="string">'wechat-robot'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post (apiUrl, data=data).json ()</span><br><span class="line">        <span class="comment"># 字典的 get 方法在字典没有 'text' 值的时候会返回 None 而不会抛出异常 </span></span><br><span class="line">        <span class="keyword">return</span> r.get (<span class="string">'text'</span>)</span><br><span class="line">    <span class="comment"># 为了防止服务器没有正常响应导致程序异常退出，这里用 try-except 捕获了异常 </span></span><br><span class="line">    <span class="comment"># 如果服务器没能正常交互 (返回非 json 或无法连接), 那么就会进入下面的 return</span></span><br><span class="line">    <span class="keyword">except</span> Exception,err:</span><br><span class="line">        <span class="comment"># 打印一下错误信息 </span></span><br><span class="line">        print (err)</span><br><span class="line">        <span class="comment"># 将会返回一个 None</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p></p><p>完整代码示例（代码会封装的更好，格式更加规范，易读）：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 从 python 环境中导入 itchat 包，requests 网络请求包 </span></span><br><span class="line"><span class="keyword">import</span> itchat, requests</span><br><span class="line"><span class="comment"># 从 itchat.content 中导入所有类、常量 (例如代码中的 TEXT 其实就是 itchat.content.TEXT 常量)</span></span><br><span class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 导入时间包里面的 sleep 方法 </span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># 导入随机数包 </span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 机器人的 apikey</span></span><br><span class="line">APIKEY = <span class="string">'376cb2ca51d542c6b2e660f3c9ea3754'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装一个根据内容调用机器人接口，返回回复的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="comment"># 构造了要发送给服务器的数据 </span></span><br><span class="line">    apiUrl = <span class="string">'http://www.tuling123.com/openapi/api'</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'key'</span>    : APIKEY,</span><br><span class="line">        <span class="string">'info'</span>   : msg,</span><br><span class="line">        <span class="string">'userid'</span> : <span class="string">'wechat-robot'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post (apiUrl, data=data).json ()</span><br><span class="line">        <span class="comment"># 字典的 get 方法在字典没有 'text' 值的时候会返回 None 而不会抛出异常 </span></span><br><span class="line">        <span class="keyword">return</span> r.get (<span class="string">'text'</span>)</span><br><span class="line">    <span class="comment"># 为了防止服务器没有正常响应导致程序异常退出，这里用 try-except 捕获了异常 </span></span><br><span class="line">    <span class="comment"># 如果服务器没能正常交互 (返回非 json 或无法连接), 那么就会进入下面的 return</span></span><br><span class="line">    <span class="keyword">except</span> Exception,err:</span><br><span class="line">        <span class="comment"># 打印一下错误信息 </span></span><br><span class="line">        print (err)</span><br><span class="line">        <span class="comment"># 将会返回一个 None</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册消息类型为文本 (即只监控文本消息，其它的例如语音 / 图片 / 表情包 / 文件都不会监控)</span></span><br><span class="line"><span class="comment"># 也就是说只有普通的文字微信消息才能触发以下的代码 </span></span><br><span class="line"><span class="comment"># isGroupChat=True 开启群聊模式，即只是监控群聊内容 (如果不开启就监控个人聊天，不监控群聊)</span></span><br><span class="line"><span class="comment"># @itchat.msg_register ([TEXT], isGroupChat=True)</span></span><br><span class="line"><span class="meta">@itchat.msg_register ([TEXT])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tuling_reply</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="comment"># msg 是消息体，msg ['Text'] 用来获取消息内容 </span></span><br><span class="line">    <span class="comment"># 第一个单引号中的内容是关键词，使用正则匹配，可以自行更改 (我使用.* 表示任意内容), 如果使用中文注意 2.x 版本的 Python 会报错，需要 u 前缀 </span></span><br><span class="line">    message = msg [<span class="string">'Text'</span>]</span><br><span class="line">    print (message)</span><br><span class="line"><span class="comment"># 增加睡眠机制，随机等待一定的秒数 (1-10 秒) 再回复，更像人类 </span></span><br><span class="line">    second = random.randint (<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">    sleep (second)</span><br><span class="line">    <span class="comment"># 为了保证在图灵 apikey 出现问题的时候仍旧可以回复，这里设置一个默认回复 </span></span><br><span class="line">    defaultReply = <span class="string">'I received:'</span> + message</span><br><span class="line">    <span class="comment"># 如果图灵 apikey 出现问题，那么 reply 将会是 None</span></span><br><span class="line">    reply = get_response (message)</span><br><span class="line">    <span class="comment"># a or b 的意思是，如果 a 有内容，那么返回 a, 否则返回 b</span></span><br><span class="line">    <span class="keyword">return</span> reply <span class="keyword">or</span> defaultReply</span><br><span class="line"><span class="comment"># 热启动，退出一定时间内重新登录不需要扫码 (其实就是把二维码图片存下来，下次接着使用)</span></span><br><span class="line">itchat.auto_login (hotReload=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 开启命令行的二维码 </span></span><br><span class="line">itchat.auto_login (enableCmdQR=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 运行 </span></span><br><span class="line">itchat.run ()</span><br></pre></td></tr></table></figure><p></p><p>代码截图（使用工具渲染了一下）：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzirq8uejj235s3xgu0x.jpg" alt="机器人接入代码" title="机器人接入代码"></p><h3 id="接入机器人演示"><a href="# 接入机器人演示" class="headerlink" title="接入机器人演示"></a>接入机器人演示 </h3><p> 演示一下，随便聊了几句：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzzislea0dj20u01mcgug.jpg" alt="图灵机器人聊天" title="图灵机器人聊天"></p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注 </h1><p>1、ItChat 项目 GitHub 地址：<a href="https://github.com/littlecodersh/itchat" target="_blank" rel="noopener">https://github.com/littlecodersh/itchat</a> ；</p><p>2、ItChat 项目说明文档：<a href="https://itchat.readthedocs.io/zh/latest" target="_blank" rel="noopener">https://itchat.readthedocs.io/zh/latest</a> ；</p><p>3、感谢微博科普博主 <a href="https://weibo.com/u/6969849160" target="_blank" rel="noopener"> 灵光灯泡 </a> 的科普视频 <a href="https://weibo.com/6969849160/HeLhjcKtA" target="_blank" rel="noopener">https://weibo.com/6969849160/HeLhjcKtA</a> 以及文档参考 <a href="https://shimo.im/docs/vCYHZ04LWTsugigR" target="_blank" rel="noopener"> 石墨文档</a> ；</p><p>4、Python 下载官网：<a href="https://www.python.org/downloads/windows" target="_blank" rel="noopener">https://www.python.org/downloads/windows</a> ，大家一定要选择与自己当前环境适配的版本（包括操作系统版本、Python 版本），环境变量最好配置一下；</p><p>5、图灵机器人官网：<a href="http://www.tuling123.com" target="_blank" rel="noopener">http://www.tuling123.com</a> ；</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;微信已经是我们日常生活中常用的 APP 之一，每天都离不开。作为掌握技术的理工科人员，有时候总想着是否可以利用微信的接口完成一些重复的工作，例如群发消息、自动回复、接入机器人自动聊天等。当然，这些都可以实现，而且只要是人工可以做到的事情，基本都可以做到自动化（前提是微信提供了对应的接口，反例就是自动收发红包不行，当然微信不会直接提供 API 接口，需要自己寻找）。本文就讲解为了做到这些，需要的入门知识点，主要就是利用 ItChat 工具（屏蔽了微信的 API 接口，简化了使用微信接口的过程，不懂技术的普通人也可以轻松掌握），当然本文只是一个入门的例子而已（完成后对自己来说很实用而且有成就感），后续会讲解更加深入与广泛的内容。本文基于 Windows 7 操作系统，Python 2.7 版本（为了兼容性与易维护性，我推荐使用 Python 3.x 版本）&lt;/p&gt;
    
    </summary>
    
      <category term="ItChat 系列" scheme="https://www.playpi.org/categories/series-of-itchat/"/>
    
    
      <category term="ItChat" scheme="https://www.playpi.org/tags/ItChat/"/>
    
      <category term="微信接口" scheme="https://www.playpi.org/tags/%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="自定义接口" scheme="https://www.playpi.org/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="自动回复" scheme="https://www.playpi.org/tags/%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/"/>
    
      <category term="微信机器人" scheme="https://www.playpi.org/tags/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spark 异常之 Netty 相关</title>
    <link href="https://www.playpi.org/2019011401.html"/>
    <id>https://www.playpi.org/2019011401.html</id>
    <published>2019-01-13T17:27:53.000Z</published>
    <updated>2019-01-13T17:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>在做项目的时候，需要新引入一个外部依赖，于是很自然地在项目的 pom.xml 文件中加入了依赖坐标，然后进行编译、打包、运行，没想到直接抛出了异常：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">18</span>:<span class="number">52</span> [sparkDriverActorSystem-akka.actor.<span class="keyword">default</span>-dispatcher-<span class="number">5</span>] ERROR actor.ActorSystemImpl:<span class="number">66</span>: Uncaught fatal error from thread [sparkDriverActorSystem-akka.remote.<span class="keyword">default</span>-remote-dispatcher-<span class="number">7</span>] shutting down ActorSystem [sparkDriverActorSystem]</span><br><span class="line">java.lang.VerifyError: (class: org/jboss/netty/channel/socket/nio/NioWorkerPool, method: createWorker signature: (Ljava/util/concurrent/Executor;) Lorg/jboss/netty/channel/socket/nio/AbstractNioWorker;) Wrong return type in function</span><br></pre></td></tr></table></figure><p>任务运行失败，仔细看日志觉得很莫名奇妙，是一个 java.lang.VerifyError 错误，以前从来没见过类似的。本文记录这个错误的解决过程。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 在上述错误抛出之后，可以看到 SparkContext 初始化失败，然后进程就终止了；</p><p>完整日志如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">18</span>:<span class="number">52</span> [sparkDriverActorSystem-akka.actor.<span class="keyword">default</span>-dispatcher-<span class="number">5</span>] ERROR actor.ActorSystemImpl:<span class="number">66</span>: Uncaught fatal error from thread [sparkDriverActorSystem-akka.remote.<span class="keyword">default</span>-remote-dispatcher-<span class="number">7</span>] shutting down ActorSystem [sparkDriverActorSystem]</span><br><span class="line">java.lang.VerifyError: (class: org/jboss/netty/channel/socket/nio/NioWorkerPool, method: createWorker signature: (Ljava/util/concurrent/Executor;) Lorg/jboss/netty/channel/socket/nio/AbstractNioWorker;) Wrong return type in function</span><br><span class="line">at akka.remote.transport.netty.NettyTransport.(NettyTransport.scala:<span class="number">283</span>)</span><br><span class="line">at akka.remote.transport.netty.NettyTransport.(NettyTransport.scala:<span class="number">240</span>)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0 (Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance (NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance (Constructor.java:<span class="number">423</span>)</span><br><span class="line">at akka.actor.ReflectiveDynamicAccess$$anonfun$createInstanceFor$<span class="number">2</span>.apply (DynamicAccess.scala:<span class="number">78</span>)</span><br><span class="line">at scala.util.Try$.apply (Try.scala:<span class="number">161</span>)</span><br><span class="line">at akka.actor.ReflectiveDynamicAccess.createInstanceFor (DynamicAccess.scala:<span class="number">73</span>)</span><br><span class="line">at akka.actor.ReflectiveDynamicAccess$$anonfun$createInstanceFor$<span class="number">3</span>.apply (DynamicAccess.scala:<span class="number">84</span>)</span><br><span class="line">at akka.actor.ReflectiveDynamicAccess$$anonfun$createInstanceFor$<span class="number">3</span>.apply (DynamicAccess.scala:<span class="number">84</span>)</span><br><span class="line">at scala.util.Success.flatMap (Try.scala:<span class="number">200</span>)</span><br><span class="line">at akka.actor.ReflectiveDynamicAccess.createInstanceFor (DynamicAccess.scala:<span class="number">84</span>)</span><br><span class="line">at akka.remote.EndpointManager$$anonfun$<span class="number">9</span>.apply (Remoting.scala:<span class="number">711</span>)</span><br><span class="line">at akka.remote.EndpointManager$$anonfun$<span class="number">9</span>.apply (Remoting.scala:<span class="number">703</span>)</span><br><span class="line">at scala.collection.TraversableLike$WithFilter$$anonfun$map$<span class="number">2</span>.apply (TraversableLike.scala:<span class="number">722</span>)</span><br><span class="line">at scala.collection.Iterator$class.foreach (Iterator.scala:727)</span><br><span class="line">at scala.collection.AbstractIterator.foreach (Iterator.scala:<span class="number">1157</span>)</span><br><span class="line">at scala.collection.IterableLike$class.foreach (IterableLike.scala:72)</span><br><span class="line">at scala.collection.AbstractIterable.foreach (Iterable.scala:<span class="number">54</span>)</span><br><span class="line">at scala.collection.TraversableLike$WithFilter.map (TraversableLike.scala:<span class="number">721</span>)</span><br><span class="line">at akka.remote.EndpointManager.akka$remote$EndpointManager$$listens (Remoting.scala:<span class="number">703</span>)</span><br><span class="line">at akka.remote.EndpointManager$$anonfun$receive$<span class="number">2</span>.applyOrElse (Remoting.scala:<span class="number">491</span>)</span><br><span class="line">at akka.actor.Actor$class.aroundReceive (Actor.scala:467)</span><br><span class="line">at akka.remote.EndpointManager.aroundReceive (Remoting.scala:<span class="number">394</span>)</span><br><span class="line">at akka.actor.ActorCell.receiveMessage (ActorCell.scala:<span class="number">516</span>)</span><br><span class="line">at akka.actor.ActorCell.invoke (ActorCell.scala:<span class="number">487</span>)</span><br><span class="line">at akka.dispatch.Mailbox.processMailbox (Mailbox.scala:<span class="number">238</span>)</span><br><span class="line">at akka.dispatch.Mailbox.run (Mailbox.scala:<span class="number">220</span>)</span><br><span class="line">at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec (AbstractDispatcher.scala:<span class="number">397</span>)</span><br><span class="line">at scala.concurrent.forkjoin.ForkJoinTask.doExec (ForkJoinTask.java:<span class="number">260</span>)</span><br><span class="line">at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask (ForkJoinPool.java:<span class="number">1339</span>)</span><br><span class="line">at scala.concurrent.forkjoin.ForkJoinPool.runWorker (ForkJoinPool.java:<span class="number">1979</span>)</span><br><span class="line">at scala.concurrent.forkjoin.ForkJoinWorkerThread.run (ForkJoinWorkerThread.java:<span class="number">107</span>)</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">18</span>:<span class="number">52</span> [sparkDriverActorSystem-akka.actor.<span class="keyword">default</span>-dispatcher-<span class="number">6</span>] INFO remote.RemoteActorRefProvider$RemotingTerminator:<span class="number">74</span>: Shutting down remote daemon.</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">18</span>:<span class="number">52</span> [sparkDriverActorSystem-akka.actor.<span class="keyword">default</span>-dispatcher-<span class="number">6</span>] INFO remote.RemoteActorRefProvider$RemotingTerminator:<span class="number">74</span>: Remote daemon shut down; proceeding with flushing remote transports.</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">18</span>:<span class="number">52</span> [sparkDriverActorSystem-akka.actor.<span class="keyword">default</span>-dispatcher-<span class="number">6</span>] ERROR Remoting:<span class="number">65</span>: Remoting system has been terminated abrubtly. Attempting to shut down transports</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">18</span>:<span class="number">52</span> [sparkDriverActorSystem-akka.actor.<span class="keyword">default</span>-dispatcher-<span class="number">6</span>] INFO remote.RemoteActorRefProvider$RemotingTerminator:<span class="number">74</span>: Remoting shut down.</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">19</span>:<span class="number">02</span> [main] ERROR spark.SparkContext:<span class="number">95</span>: Error initializing SparkContext.</span><br><span class="line">java.util.concurrent.TimeoutException: Futures timed out after [<span class="number">10000</span> milliseconds]</span><br><span class="line">at scala.concurrent.impl.Promise$DefaultPromise.ready (Promise.scala:<span class="number">219</span>)</span><br><span class="line">at scala.concurrent.impl.Promise$DefaultPromise.result (Promise.scala:<span class="number">223</span>)</span><br><span class="line">at scala.concurrent.Await$$anonfun$result$<span class="number">1</span>.apply (<span class="keyword">package</span>.scala:<span class="number">107</span>)</span><br><span class="line">at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn (BlockContext.scala:<span class="number">53</span>)</span><br><span class="line">at scala.concurrent.Await$.result (<span class="keyword">package</span>.scala:<span class="number">107</span>)</span><br><span class="line">at akka.remote.Remoting.start (Remoting.scala:<span class="number">179</span>)</span><br><span class="line">at akka.remote.RemoteActorRefProvider.init (RemoteActorRefProvider.scala:<span class="number">184</span>)</span><br><span class="line">at akka.actor.ActorSystemImpl.liftedTree2$<span class="number">1</span>(ActorSystem.scala:<span class="number">620</span>)</span><br><span class="line">at akka.actor.ActorSystemImpl._start$lzycompute (ActorSystem.scala:<span class="number">617</span>)</span><br><span class="line">at akka.actor.ActorSystemImpl._start (ActorSystem.scala:<span class="number">617</span>)</span><br><span class="line">at akka.actor.ActorSystemImpl.start (ActorSystem.scala:<span class="number">634</span>)</span><br><span class="line">at akka.actor.ActorSystem$.apply (ActorSystem.scala:<span class="number">142</span>)</span><br><span class="line">at akka.actor.ActorSystem$.apply (ActorSystem.scala:<span class="number">119</span>)</span><br><span class="line">at org.apache.spark.util.AkkaUtils$.org$apache$spark$util$AkkaUtils$$doCreateActorSystem (AkkaUtils.scala:<span class="number">121</span>)</span><br><span class="line">at org.apache.spark.util.AkkaUtils$$anonfun$<span class="number">1</span>.apply (AkkaUtils.scala:<span class="number">53</span>)</span><br><span class="line">at org.apache.spark.util.AkkaUtils$$anonfun$<span class="number">1</span>.apply (AkkaUtils.scala:<span class="number">52</span>)</span><br><span class="line">at org.apache.spark.util.Utils$$anonfun$startServiceOnPort$<span class="number">1</span>.apply$mcVI$sp (Utils.scala:<span class="number">2024</span>)</span><br><span class="line">at scala.collection.immutable.Range.foreach$mVc$sp (Range.scala:<span class="number">141</span>)</span><br><span class="line">at org.apache.spark.util.Utils$.startServiceOnPort (Utils.scala:<span class="number">2015</span>)</span><br><span class="line">at org.apache.spark.util.AkkaUtils$.createActorSystem (AkkaUtils.scala:<span class="number">55</span>)</span><br><span class="line">at org.apache.spark.SparkEnv$.create (SparkEnv.scala:<span class="number">266</span>)</span><br><span class="line">at org.apache.spark.SparkEnv$.createDriverEnv (SparkEnv.scala:<span class="number">193</span>)</span><br><span class="line">at org.apache.spark.SparkContext.createSparkEnv (SparkContext.scala:<span class="number">288</span>)</span><br><span class="line">at org.apache.spark.SparkContext.(SparkContext.scala:<span class="number">457</span>)</span><br><span class="line">at org.apache.spark.api.java.JavaSparkContext.(JavaSparkContext.scala:<span class="number">59</span>)</span><br><span class="line">at com.ds.octopus.job.utils.SparkContextUtil.refresh (SparkContextUtil.java:<span class="number">77</span>)</span><br><span class="line">at com.ds.octopus.job.utils.SparkContextUtil.getJsc (SparkContextUtil.java:<span class="number">34</span>)</span><br><span class="line">at com.ds.octopus.job.executors.impl.WeiboZPZExporter.action (WeiboZPZExporter.java:<span class="number">95</span>)</span><br><span class="line">at com.ds.octopus.job.executors.impl.WeiboZPZExporter.action (WeiboZPZExporter.java:<span class="number">41</span>)</span><br><span class="line">at com.ds.octopus.job.executors.SimpleExecutor.execute (SimpleExecutor.java:<span class="number">40</span>)</span><br><span class="line">at com.ds.octopus.job.client.OctopusClient.run (OctopusClient.java:<span class="number">162</span>)</span><br><span class="line">at com.yeezhao.commons.buffalo.job.AbstractBUTaskWorker.runTask (AbstractBUTaskWorker.java:<span class="number">63</span>)</span><br><span class="line">at com.ds.octopus.job.client.TaskLocalRunnerCli.start (TaskLocalRunnerCli.java:<span class="number">109</span>)</span><br><span class="line">at com.yeezhao.commons.util.AdvCli.initRunner (AdvCli.java:<span class="number">191</span>)</span><br><span class="line">at com.ds.octopus.job.client.TaskLocalRunnerCli.main (TaskLocalRunnerCli.java:<span class="number">41</span>)</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">13_17</span>:<span class="number">19</span>:<span class="number">02</span> [main] INFO spark.SparkContext:<span class="number">58</span>: Successfully stopped SparkContext</span><br></pre></td></tr></table></figure><p></p><p>错误日志截图：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5j8uvmnrj219y0kqdil.jpg" alt="错误日志局部" title="错误日志局部"></p><p>根据日志没有看出有关 Java 层面的什么问题，只能根据 JNI 字段描述符：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class: org/jboss/netty/channel/socket/nio/NioWorkerPool</span><br></pre></td></tr></table></figure><p></p><p>猜测是某一个类的问题，根据：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method: createWorker signature: (Ljava/util/concurrent/Executor;) Lorg/jboss/netty/channel/socket/nio/AbstractNioWorker;) Wrong <span class="keyword">return</span> type in function</span><br></pre></td></tr></table></figure><p></p><p>猜测是某个方法的问题，方法的返回类型错误。</p><p>然后在项目中使用 ctrl+shift+t 快捷键（全局搜索 Java 类，每个人的开发工具设置的可能不一样）搜索类：NioWorkerPool，发现这个类的来源不是新引入的依赖包，而是原本就有的 netty 相关包，所以此时就可以断定这个莫名其妙的错误的原因就在于这个类的 createWorker 方法返回类型上面了。</p><p>搜索类 NioWorkerPool<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5j9dcym1j216q0aztai.jpg" alt="搜索 NioWorkerPool" title="搜索 NioWorkerPool"></p><p>日志的 JNI 字段描述符显示返回类型是 AbstractNioWorker，但是这个一看就是抽象类，不是我们要找的，去类里面看源码，发现 createWorker 方法返回类型是 NioWorker：</p><p>类 NioWorkerPool 源码 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5j9wfx1mj20wu0et3z8.jpg" alt="NioWorkerPool 源码" title="NioWorkerPool 源码"></p><p> 继续搜索类 NioWorker<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5jagdz1qj216t09wwg0.jpg" alt="搜索 NioWorker" title="搜索 NioWorker"></p><p>好，此时发现问题了，这个类有 2 个，居然存在两个相同的包名，但是依赖坐标不一样，所以这个隐藏的原因在于类冲突，但是并不能算是依赖冲突引起的。也就是说，NioWorker 这个类重复了，但是依赖包坐标不一样，类的包路径却是一模一样的，不会引起版本冲突问题，而在实际运行任务的时候会抛出运行时异常，所以我觉得找问题的过程很艰辛。</p><p>使用依赖树查看依赖关系，是看不到版本冲突问题的，2 个依赖都存在：<br>io.netty 依赖 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5jaxljmvj20mb05fglv.jpg" alt="io.netty 依赖" title="io.netty 依赖"></p><p>org.jboss.netty 依赖<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5jb7z4o0j20la031t8r.jpg" alt="org.jboss.netty 依赖" title="org.jboss.netty 依赖"></p><p> 于是又在网上搜索了一下，发现果然是 netty 的问题，也就是新引入的依赖包导致的，但是根本原因令人哭笑：netty 的组织结构变化，发布的依赖坐标名称变化，但是所有的类的包名称并没有变化，导致了这个错误。</p><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 问题找到了，解决方法就简单了，移除传递依赖即可，同时也要注意以后再添加新的依赖一定要慎重，不然找问题的过程很是令人崩溃。</p><p>移除依赖 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fz5jbj046wj20g907amxa.jpg" alt="移除依赖" title="移除依赖"></p><p> 移除配置示例 <br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 移除引发冲突的 jar 包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h1 id="问题总结"><a href="# 问题总结" class="headerlink" title="问题总结"></a> 问题总结 </h1><p>1、参考：<a href="https://stackoverflow.com/questions/33573587/apache-spark-wrong-akka-remote-netty-version" target="_blank" rel="noopener">https://stackoverflow.com/questions/33573587/apache-spark-wrong-akka-remote-netty-version</a> ；</p><p>2、netty 的组织结构（影响发布的 jar 包坐标名称）变化了，但是所有的类的包名称仍然是一致的，很奇怪，导致我找问题也觉得莫名其妙，因为这不会引发版本冲突问题（但是本质上又是 2 个一模一样的类被同时使用，引发类冲突）；</p><p>3、这个错误信息挺有意思的，解决过程也很好玩，边找边学习；</p><p>4、对于这种重名的类【类的包路径名、类名】，竟然对应的 jar 包不一样，这种极其特殊的情况也可以使用插件检测出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;</span><br></pre></td></tr></table></figure><p> 使用 <strong>enforcer:enforce</strong> 命令即可。</p><p>当然，这个插件还可以用来校验很多地方，例如代码中引用了 <strong>@Deprecated</strong> 的方法，也会给出提示信息，可以按照需求给插件配置需要校验的方面。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在做项目的时候，需要新引入一个外部依赖，于是很自然地在项目的 pom.xml 文件中加入了依赖坐标，然后进行编译、打包、运行，没想到直接抛出了异常：&lt;/p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;13_17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt; [sparkDriverActorSystem-akka.actor.&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;-dispatcher-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] ERROR actor.ActorSystemImpl:&lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;: Uncaught fatal error from thread [sparkDriverActorSystem-akka.remote.&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;-remote-dispatcher-&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;] shutting down ActorSystem [sparkDriverActorSystem]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.lang.VerifyError: (class: org/jboss/netty/channel/socket/nio/NioWorkerPool, method: createWorker signature: (Ljava/util/concurrent/Executor;) Lorg/jboss/netty/channel/socket/nio/AbstractNioWorker;) Wrong return type in function&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;任务运行失败，仔细看日志觉得很莫名奇妙，是一个 java.lang.VerifyError 错误，以前从来没见过类似的。本文记录这个错误的解决过程。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="netty" scheme="https://www.playpi.org/tags/netty/"/>
    
      <category term="nio" scheme="https://www.playpi.org/tags/nio/"/>
    
  </entry>
  
  <entry>
    <title>Maven 插件异常之 socket write error</title>
    <link href="https://www.playpi.org/2019011101.html"/>
    <id>https://www.playpi.org/2019011101.html</id>
    <published>2019-01-11T14:09:10.000Z</published>
    <updated>2019-01-12T14:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>今天在整理代码的时候，在本机（自己的电脑）通过 Maven 的 deploy 插件（org.apache.maven.plugins:maven-deploy-plugin:2.7）进行发布，把代码打包成构件发布到远程的 Maven 仓库（公司的私服），这样方便大家调用。可是，其中有一个项目发布不了（其它类似的 2 个项目都可以，排除了环境的原因），总是报错：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:<span class="number">0.0</span>.6-<span class="number">20190112.081518</span>-<span class="number">1</span> from/<span class="function">to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error</span></span><br></pre></td></tr></table></figure><p></p><p>以上错误日志中的项目名称、包名称均被替换。本文就记录从发现问题到解决问题的过程。环境所使用的 Maven 版本为：3.5.0。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 对一个公共项目进行打包发布，部署到公司私服（已经排除环境因素），出现异常；</p><p>使用命令 Maven：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><p></p><p>出现异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: <span class="number">02</span>:<span class="number">49</span> min</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">01</span>-<span class="number">12</span>T16:<span class="number">17</span>:<span class="number">21</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] Final Memory: <span class="number">68</span>M/<span class="number">1253</span>M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:<span class="number">2.7</span>:deploy (<span class="keyword">default</span>-deploy) on project dt-x-y-z: Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:<span class="number">0.0</span>.6-<span class="number">20190112.081518</span>-<span class="number">1</span> from/<span class="function">to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error -&gt; [Help 1]</span></span><br><span class="line"><span class="function">[ERROR]</span></span><br><span class="line"><span class="function">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e <span class="keyword">switch</span>.</span></span><br><span class="line"><span class="function">[ERROR] Re-run Maven using the -X <span class="keyword">switch</span> to enable full debug logging.</span></span><br><span class="line"><span class="function">[ERROR]</span></span><br><span class="line"><span class="function">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span></span><br><span class="line"><span class="function">[ERROR] [Help 1] http:<span class="comment">//cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span></span></span><br></pre></td></tr></table></figure><p>如果使用 -X 参数（完整命令：mvn deploy -X），可以稍微看到更详细的 Maven 部署日志信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: <span class="number">02</span>:<span class="number">49</span> min</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">01</span>-<span class="number">12</span>T16:<span class="number">17</span>:<span class="number">21</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] Final Memory: <span class="number">68</span>M/<span class="number">1253</span>M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:<span class="number">2.7</span>:deploy (<span class="keyword">default</span>-deploy) on project dt-x-y-z: Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:<span class="number">0.0</span>.6-<span class="number">20190112.081518</span>-<span class="number">1</span> from/<span class="function">to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error -&gt; [Help 1]</span></span><br><span class="line"><span class="function">org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:<span class="title">deploy</span> <span class="params">(<span class="keyword">default</span>-deploy)</span> on project dt-x-y-z: Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:0.0.6-20190112.081518-1 from/to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.MojoExecutor.<span class="title">execute</span><span class="params">(MojoExecutor.java:<span class="number">213</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.MojoExecutor.<span class="title">execute</span><span class="params">(MojoExecutor.java:<span class="number">154</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.MojoExecutor.<span class="title">execute</span><span class="params">(MojoExecutor.java:<span class="number">146</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.<span class="title">buildProject</span><span class="params">(LifecycleModuleBuilder.java:<span class="number">117</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.<span class="title">buildProject</span><span class="params">(LifecycleModuleBuilder.java:<span class="number">81</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.<span class="title">build</span><span class="params">(SingleThreadedBuilder.java:<span class="number">51</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.LifecycleStarter.<span class="title">execute</span><span class="params">(LifecycleStarter.java:<span class="number">128</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.DefaultMaven.<span class="title">doExecute</span><span class="params">(DefaultMaven.java:<span class="number">309</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.DefaultMaven.<span class="title">doExecute</span><span class="params">(DefaultMaven.java:<span class="number">194</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.DefaultMaven.<span class="title">execute</span><span class="params">(DefaultMaven.java:<span class="number">107</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.cli.MavenCli.<span class="title">execute</span><span class="params">(MavenCli.java:<span class="number">993</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.cli.MavenCli.<span class="title">doMain</span><span class="params">(MavenCli.java:<span class="number">345</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.cli.MavenCli.<span class="title">main</span><span class="params">(MavenCli.java:<span class="number">191</span>)</span></span></span><br><span class="line"><span class="function">        at sun.reflect.NativeMethodAccessorImpl.<span class="title">invoke0</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function">        at sun.reflect.NativeMethodAccessorImpl.<span class="title">invoke</span><span class="params">(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span></span></span><br><span class="line"><span class="function">        at sun.reflect.DelegatingMethodAccessorImpl.<span class="title">invoke</span><span class="params">(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span></span></span><br><span class="line"><span class="function">        at java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Method.java:<span class="number">498</span>)</span></span></span><br><span class="line"><span class="function">        at org.codehaus.plexus.classworlds.launcher.Launcher.<span class="title">launchEnhanced</span><span class="params">(Launcher.java:<span class="number">289</span>)</span></span></span><br><span class="line"><span class="function">        at org.codehaus.plexus.classworlds.launcher.Launcher.<span class="title">launch</span><span class="params">(Launcher.java:<span class="number">229</span>)</span></span></span><br><span class="line"><span class="function">        at org.codehaus.plexus.classworlds.launcher.Launcher.<span class="title">mainWithExitCode</span><span class="params">(Launcher.java:<span class="number">415</span>)</span></span></span><br><span class="line"><span class="function">        at org.codehaus.plexus.classworlds.launcher.Launcher.<span class="title">main</span><span class="params">(Launcher.java:<span class="number">356</span>)</span></span></span><br><span class="line"><span class="function">Caused by: org.apache.maven.plugin.MojoExecutionException: Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:0.0.6-20190112.081518-1 from/to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at org.apache.maven.plugin.deploy.DeployMojo.<span class="title">execute</span><span class="params">(DeployMojo.java:<span class="number">193</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.plugin.DefaultBuildPluginManager.<span class="title">executeMojo</span><span class="params">(DefaultBuildPluginManager.java:<span class="number">134</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.lifecycle.internal.MojoExecutor.<span class="title">execute</span><span class="params">(MojoExecutor.java:<span class="number">208</span>)</span></span></span><br><span class="line"><span class="function">        ... 20 more</span></span><br><span class="line"><span class="function">Caused by: org.apache.maven.artifact.deployer.ArtifactDeploymentException: Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:0.0.6-20190112.081518-1 from/to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at org.apache.maven.artifact.deployer.DefaultArtifactDeployer.<span class="title">deploy</span><span class="params">(DefaultArtifactDeployer.java:<span class="number">143</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.plugin.deploy.AbstractDeployMojo.<span class="title">deploy</span><span class="params">(AbstractDeployMojo.java:<span class="number">167</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.plugin.deploy.DeployMojo.<span class="title">execute</span><span class="params">(DeployMojo.java:<span class="number">157</span>)</span></span></span><br><span class="line"><span class="function">        ... 22 more</span></span><br><span class="line"><span class="function">Caused by: org.eclipse.aether.deployment.DeploymentException: Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:0.0.6-20190112.081518-1 from/to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at org.eclipse.aether.internal.impl.DefaultDeployer.<span class="title">deploy</span><span class="params">(DefaultDeployer.java:<span class="number">326</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.internal.impl.DefaultDeployer.<span class="title">deploy</span><span class="params">(DefaultDeployer.java:<span class="number">254</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.<span class="title">deploy</span><span class="params">(DefaultRepositorySystem.java:<span class="number">422</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.artifact.deployer.DefaultArtifactDeployer.<span class="title">deploy</span><span class="params">(DefaultArtifactDeployer.java:<span class="number">139</span>)</span></span></span><br><span class="line"><span class="function">        ... 24 more</span></span><br><span class="line"><span class="function">Caused by: org.eclipse.aether.transfer.ArtifactTransferException: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:0.0.6-20190112.081518-1 from/to <span class="title">snapshots</span> <span class="params">(http://maven.myself.com/nexus/content/repositories/snapshots)</span>: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at org.eclipse.aether.connector.basic.ArtifactTransportListener.<span class="title">transferFailed</span><span class="params">(ArtifactTransportListener.java:<span class="number">52</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.<span class="title">run</span><span class="params">(BasicRepositoryConnector.java:<span class="number">364</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.connector.basic.BasicRepositoryConnector.<span class="title">put</span><span class="params">(BasicRepositoryConnector.java:<span class="number">283</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.internal.impl.DefaultDeployer.<span class="title">deploy</span><span class="params">(DefaultDeployer.java:<span class="number">320</span>)</span></span></span><br><span class="line"><span class="function">        ... 27 more</span></span><br><span class="line"><span class="function">Caused by: org.apache.maven.wagon.TransferFailedException: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">put</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">650</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">put</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">553</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">put</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">535</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">put</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">529</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">put</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">509</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.transport.wagon.WagonTransporter$PutTaskRunner.<span class="title">run</span><span class="params">(WagonTransporter.java:<span class="number">653</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.transport.wagon.WagonTransporter.<span class="title">execute</span><span class="params">(WagonTransporter.java:<span class="number">436</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.transport.wagon.WagonTransporter.<span class="title">put</span><span class="params">(WagonTransporter.java:<span class="number">419</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.connector.basic.BasicRepositoryConnector$PutTaskRunner.<span class="title">runTask</span><span class="params">(BasicRepositoryConnector.java:<span class="number">519</span>)</span></span></span><br><span class="line"><span class="function">        at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.<span class="title">run</span><span class="params">(BasicRepositoryConnector.java:<span class="number">359</span>)</span></span></span><br><span class="line"><span class="function">        ... 29 more</span></span><br><span class="line"><span class="function">Caused by: java.net.SocketException: Connection reset by peer: socket write error</span></span><br><span class="line"><span class="function">        at java.net.SocketOutputStream.<span class="title">socketWrite0</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function">        at java.net.SocketOutputStream.<span class="title">socketWrite</span><span class="params">(SocketOutputStream.java:<span class="number">111</span>)</span></span></span><br><span class="line"><span class="function">        at java.net.SocketOutputStream.<span class="title">write</span><span class="params">(SocketOutputStream.java:<span class="number">155</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.io.SessionOutputBufferImpl.<span class="title">streamWrite</span><span class="params">(SessionOutputBufferImpl.java:<span class="number">126</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.io.SessionOutputBufferImpl.<span class="title">flushBuffer</span><span class="params">(SessionOutputBufferImpl.java:<span class="number">138</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.io.SessionOutputBufferImpl.<span class="title">write</span><span class="params">(SessionOutputBufferImpl.java:<span class="number">169</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.io.ContentLengthOutputStream.<span class="title">write</span><span class="params">(ContentLengthOutputStream.java:<span class="number">115</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon$RequestEntityImplementation.<span class="title">writeTo</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">209</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.DefaultBHttpClientConnection.<span class="title">sendRequestEntity</span><span class="params">(DefaultBHttpClientConnection.java:<span class="number">158</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.conn.CPoolProxy.<span class="title">sendRequestEntity</span><span class="params">(CPoolProxy.java:<span class="number">162</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.protocol.HttpRequestExecutor.<span class="title">doSendRequest</span><span class="params">(HttpRequestExecutor.java:<span class="number">237</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.protocol.HttpRequestExecutor.<span class="title">execute</span><span class="params">(HttpRequestExecutor.java:<span class="number">122</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.MainClientExec.<span class="title">execute</span><span class="params">(MainClientExec.java:<span class="number">271</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.ProtocolExec.<span class="title">execute</span><span class="params">(ProtocolExec.java:<span class="number">184</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.RetryExec.<span class="title">execute</span><span class="params">(RetryExec.java:<span class="number">88</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.execchain.RedirectExec.<span class="title">execute</span><span class="params">(RedirectExec.java:<span class="number">110</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.client.InternalHttpClient.<span class="title">doExecute</span><span class="params">(InternalHttpClient.java:<span class="number">184</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.httpclient.impl.client.CloseableHttpClient.<span class="title">execute</span><span class="params">(CloseableHttpClient.java:<span class="number">82</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">execute</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">834</span>)</span></span></span><br><span class="line"><span class="function">        at org.apache.maven.wagon.providers.http.AbstractHttpClientWagon.<span class="title">put</span><span class="params">(AbstractHttpClientWagon.java:<span class="number">596</span>)</span></span></span><br><span class="line"><span class="function">        ... 38 more</span></span><br><span class="line"><span class="function">[ERROR]</span></span><br><span class="line"><span class="function">[ERROR]</span></span><br><span class="line"><span class="function">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span></span><br><span class="line"><span class="function">[ERROR] [Help 1] http:<span class="comment">//cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span></span></span><br></pre></td></tr></table></figure><p>由于对 Maven 构件的原理不清楚，通过日志报错也看不出根本原因是什么，根据最后一行日志的链接：<a href="http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException" target="_blank" rel="noopener">http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</a> ，我看到描述：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unlike many other errors, this exception is not generated by the Maven core itself but by a plugin. As a rule of thumb, plugins use this error to signal a problem <span class="keyword">in</span> their configuration or the information they retrieved from the POM.</span><br><span class="line"></span><br><span class="line">The concrete meaning of the exception depends on the plugin so please have a look at its documentation. The documentation <span class="keyword">for</span> many common Maven plugins can be reached via our plugin index.</span><br></pre></td></tr></table></figure><p></p><p>大致意思也就是说这种类型的错误一般不是 Maven 的问题，而是所使用的 Maven 构件的问题，在这里我使用了 deploy 构件，我也知道和 deploy 构件有关，但是具体原因是什么也没说明；</p><p>于是接下来使用 -e 参数（完整命令：mvn deploy -e），除了上述的报错日志外，还可以打印更为详细的错误日志追踪信息，然后发现一直会有下面的错误输入，而且一直重复，没有要停的迹象，我只能手动停掉 mvn 进程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: progressed file size cannot be greater than size: <span class="number">59156480</span> &gt; <span class="number">58029604</span></span><br></pre></td></tr></table></figure><p>异常信息截图 </p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzkj4vhui7j20vi06xdi6.jpg" alt="构件大小相关异常" title="构件大小相关异常"></p><p> 换算一下单位：<br>59156480KB=56.42M（正是需要发布的构件的大小）；<br>58029604KB=55.34M；</p><p>1、通过搜索引擎对异常信息的搜索，大部分结果显示和 Maven 后台的 Web 服务有关，如果使用的是 Nginx，会有一个参数用来限制上传文件的大小，上传文件的大小超过最大限制，就会上传失败，并且抛出异常。我部署其它的小构件没有问题，怀疑是这个原因，于是我询问运维人员公司的 Maven 私服对上传的公共构件有没有大小限制（即可能是 Nginx 服务有没有限制上传文件的大小），运维说不会。但是我还是怀疑，于是想通过 Web 端的界面来手动上传我的构件，发现 Web 端的界面没有开放，无法完成上传操作，接下来我就想看看 Maven 后台服务的对应参数配置的值是多大（也可能使用的是默认值），但是不知道后台采用的是什么服务（Nginx 还是 Netty 不确定），先放弃这条路；</p><p>2、也有结果显示是 Maven 的版本问题，有些版本有 bug，所以造成了这个问题。</p><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 既然没有分析出来具体的原因，只能尝试每一种解决方案了。</p><p>1、既然怀疑是 Maven 私服限制了构件的大小，那就想办法减小构件。先在本地 install，然后去本地仓库看一下生成的构件的大小，结果我惊讶地发现构件居然有 330M 之大，吓死人了，这个打包发布构件的配置肯定有问题，肯定把第三方依赖全部打进去了。我查看了以前生成的正常的构件，也就 60M 左右。</p><p>以下放出对比图 2 个 </p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzkisemw0oj20oy0d6glu.jpg" alt="旧版本正常构件大小" title="旧版本正常构件大小"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzkit8ztcpj20oy0d6t91.jpg" alt="本地新构件过大" title="本地新构件过大"></p><p> 这一看就是把第三方各种依赖包都一起发布了，才会造成构件有这么大，于是更改 pom.xml 文件，把第三方依赖去除，deploy 的时候是不需要的，同时也删除了一些 resources 资源文件夹里面的文本文件，删除时发现文本文件竟然有几十 M，怪不得以前发布的构件大小有 60M 左右，原来都是文本文件在占用空间；</p><p>更新了之后，直接重新 deploy，不报错了，直接 deploy 成功，去私服仓库搜索查看，大概 30M 左右，很正常 </p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fzkjfjiisoj20im0igdgr.jpg" alt="最终正常的构件" title="最终正常的构件"></p><p>2、问题使用方法一已经解决了，也就是和 Maven 版本没有关系了，而且，在我的当前 Maven 环境下，我去 deploy 其它构件也是成功的，不会有任务报错，所以也从侧面反映了这个问题和 Mave 版本无关，和 Maven 环境也无关；</p><h1 id="问题总结"><a href="# 问题总结" class="headerlink" title="问题总结"></a> 问题总结 </h1><p> 参考：<a href="http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException" target="_blank" rel="noopener">http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</a> ；</p><p>apache 的官方 jira：<br><a href="http://mail-archives.apache.org/mod_mbox/maven-issues/201808.mbox/%3CJIRA.13182024.1535592594000.205524.1535738700211@Atlassian.JIRA%3E" target="_blank" rel="noopener">http://mail-archives.apache.org/mod_mbox/maven-issues/201808.mbox/%3CJIRA.13182024.1535592594000.205524.1535738700211@Atlassian.JIRA%3E</a> ；</p><p><a href="https://issues.apache.org/jira/browse/MNG-6469?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/MNG-6469?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel</a> ；</p><p>这个问题去网上搜索不到资料，很痛苦，问人也没有能帮到我的，只能自己去慢慢摸索试验，整个过程比较艰难；</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天在整理代码的时候，在本机（自己的电脑）通过 Maven 的 deploy 插件（org.apache.maven.plugins:maven-deploy-plugin:2.7）进行发布，把代码打包成构件发布到远程的 Maven 仓库（公司的私服），这样方便大家调用。可是，其中有一个项目发布不了（其它类似的 2 个项目都可以，排除了环境的原因），总是报错：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Failed to deploy artifacts: Could not transfer artifact xxx.yyy.zzz:dt-x-y-z:jar:&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.6-&lt;span class=&quot;number&quot;&gt;20190112.081518&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; from/&lt;span class=&quot;function&quot;&gt;to &lt;span class=&quot;title&quot;&gt;snapshots&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(http://maven.myself.com/nexus/content/repositories/snapshots)&lt;/span&gt;: Connection reset by peer: socket write error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上错误日志中的项目名称、包名称均被替换。本文就记录从发现问题到解决问题的过程。环境所使用的 Maven 版本为：3.5.0。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Maven" scheme="https://www.playpi.org/tags/Maven/"/>
    
      <category term="deploy" scheme="https://www.playpi.org/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gson 将 = 转为 u003d 的问题</title>
    <link href="https://www.playpi.org/2019010601.html"/>
    <id>https://www.playpi.org/2019010601.html</id>
    <published>2019-01-06T13:57:22.000Z</published>
    <updated>2019-01-07T13:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --><p>今天遇到一个问题，实现 Web 后台接收 http 请求的一个方法，发现前端传过来的参数值，有一些特殊符号总是使用了 unicode 编码，例如等号 =，后台接收到的就是 \u003d，导致使用这个参数做 JSON 变换的时候就会出错。我看了一下这个参数取值，是前端直接填写的，而填写的人是从其它地方复制过来的，人为没有去改变，前端没有验证转换，导致传入后台的已经是这样了，那么后台只好自己想办法转换。</p><a id="more"></a><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 其实就是字符串还原操作，把 Java 字符串里面的 unicode 编码子串还原为原本的字符，例如把 \u003d 转为 = 这样。</p><p>自己实现一个工具类，做编码字符串和普通字符串的转换，可以解决这个问题。</p><p>单个编码转换，公共方法示例：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unicode 转字符串 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unicode 全为 Unicode 的字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">unicode2String</span><span class="params">(String unicode)</span> </span>&#123;</span><br><span class="line">    StringBuffer string = <span class="keyword">new</span> StringBuffer ();</span><br><span class="line">    String [] hex = unicode.split (<span class="string">"\\\\u"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; hex.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 转换出每一个代码点 </span></span><br><span class="line">        <span class="keyword">int</span> data = Integer.parseInt (hex [i], <span class="number">16</span>);</span><br><span class="line">        <span class="comment">// 追加成 string</span></span><br><span class="line">        string.append ((<span class="keyword">char</span>) data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string.toString ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>整个字符串转换，公共方法示例：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 含有 unicode 的字符串转一般字符串 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unicodeStr 混有 Unicode 的字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">unicodeStr2String</span><span class="params">(String unicodeStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = unicodeStr.length ();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 正则匹配条件，可匹配 \\u 1 到 4 位，一般是 4 位可直接使用 String regex = "\\\\u [a-f0-9A-F]&#123;4&#125;";</span></span><br><span class="line">    String regex = <span class="string">"\\\\u [a-f0-9A-F]&#123;1,4&#125;"</span>;</span><br><span class="line">    Pattern pattern = Pattern.compile (regex);</span><br><span class="line">    Matcher matcher = pattern.matcher (unicodeStr);</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer ();</span><br><span class="line">    <span class="keyword">while</span> (matcher.find ()) &#123;</span><br><span class="line">        <span class="comment">// 原本的 Unicode 字符 </span></span><br><span class="line">        String oldChar = matcher.group ();</span><br><span class="line">        <span class="comment">// 转换为普通字符 </span></span><br><span class="line">        String newChar = unicode2String (oldChar);</span><br><span class="line">        <span class="keyword">int</span> index = matcher.start ();</span><br><span class="line">        <span class="comment">// 添加前面不是 unicode 的字符 </span></span><br><span class="line">        sb.append (unicodeStr.substring (count, index));</span><br><span class="line">        <span class="comment">// 添加转换后的字符 </span></span><br><span class="line">        sb.append (newChar);</span><br><span class="line">        <span class="comment">// 统计下标移动的位置 </span></span><br><span class="line">        count = index + oldChar.length ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加末尾不是 Unicode 的字符 </span></span><br><span class="line">    sb.append (unicodeStr.substring (count, length));</span><br><span class="line">    <span class="keyword">return</span> sb.toString ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"ABCDEFG\\u003d"</span>;</span><br><span class="line">System.out.println (<span class="string">"====unicode2String 工具转换:"</span> + unicodeStr2String (str));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">====unicode2String 工具转换：ABCDEFG=</span><br></pre></td></tr></table></figure><p>截图示例：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fyyep0kwtgj20yv0kk0ug.jpg" alt="自己转换" title="自己转换"></p><h1 id="问题后续"><a href="# 问题后续" class="headerlink" title="问题后续"></a>问题后续 </h1><p> 后续我又在想，这个字符串到底是怎么来的，为什么填写的人会复制出来这样一个字符串，一般 unicode 编码不会出现在日常生活中的。我接着发现这个字符串是从另外一个系统导出的，导出的时候是一个类似于 Java 实体类的 JSON 格式字符串，从里面复制出来这个值，就是 \u003d 格式的。</p><p>那我觉得肯定是这个系统有问题，做 JSON 序列化的时候没有控制好序列化的方式，导致对于特殊字符就会自动转为 unicode 编码，给他人带来麻烦，当然，我无法得知系统内部做了什么，但是猜测可能是使用 Gson 工具做序列化的时候没有正确使用 Gson 的对象，只是简单的生成 JSON 字符串而已，例如看我下面的代码示例（等号 = 会被转为 \u003d）。</p><p>使用普通的 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Gson gson1 = <span class="keyword">new</span> Gson ();</span><br></pre></td></tr></table></figure><p> 会导致后续转换 JSON 字符串的时候出现 unicode 编码子串的情况，而正确生成 Gson 对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Gson gson2 = <span class="keyword">new</span> GsonBuilder ().disableHtmlEscaping ().create ();</span><br></pre></td></tr></table></figure><p> 则不会出现这种情况。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fyyeompqqcj20zr0k3jt4.jpg" alt="正确使用 Gson" title="正确使用 Gson"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Apr 14 2019 03:51:49 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天遇到一个问题，实现 Web 后台接收 http 请求的一个方法，发现前端传过来的参数值，有一些特殊符号总是使用了 unicode 编码，例如等号 =，后台接收到的就是 \u003d，导致使用这个参数做 JSON 变换的时候就会出错。我看了一下这个参数取值，是前端直接填写的，而填写的人是从其它地方复制过来的，人为没有去改变，前端没有验证转换，导致传入后台的已经是这样了，那么后台只好自己想办法转换。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Gson" scheme="https://www.playpi.org/tags/Gson/"/>
    
      <category term="等号编码转换" scheme="https://www.playpi.org/tags/%E7%AD%89%E5%8F%B7%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="u003d" scheme="https://www.playpi.org/tags/u003d/"/>
    
  </entry>
  
</feed>
