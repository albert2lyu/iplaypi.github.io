<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>虾丸派</title>
  
  <subtitle>烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.playpi.org/"/>
  <updated>2018-12-25T17:36:37.000Z</updated>
  <id>https://www.playpi.org/</id>
  
  <author>
    <name>playpi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可乐鸡翅做法总结</title>
    <link href="https://www.playpi.org/2018122501.html"/>
    <id>https://www.playpi.org/2018122501.html</id>
    <published>2018-12-24T17:36:37.000Z</published>
    <updated>2018-12-25T17:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 本文简单介绍可乐鸡翅的做法总结，这是一道偏甜的菜。</p><a id="more"></a><p> 待整理。</p><p> 注意不要再放糖了，一罐可乐里面含糖大概 35 克；</p><p> 注意如果放了生抽，也不用放盐了，或者少量放一点点；</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本文简单介绍可乐鸡翅的做法总结，这是一道偏甜的菜。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="可乐鸡翅" scheme="https://www.playpi.org/tags/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/"/>
    
  </entry>
  
  <entry>
    <title>Spark 错误之 JavaSparkContext not serializable</title>
    <link href="https://www.playpi.org/2018122101.html"/>
    <id>https://www.playpi.org/2018122101.html</id>
    <published>2018-12-20T16:43:50.000Z</published>
    <updated>2018-12-20T16:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>今天更新代码，对 Spark 里面的 RDD 随便增加了一个 Function，结果遇到了序列化（Serializable）的问题，这个不是普通的自定义类不能序列化问题，而是 JavaSparkContext 的用法问题，由于小看了这个问题，多花了一点时间解决问题，本文就记录下这一过程。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 针对已有的项目改动了一点点，结果直接出现了这个错误：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fydoetmx57j21gx0hjgph.jpg" alt="日志报错" title="日志报错"></p><p>一开始疏忽大意了，以为像往常一样，是某些需要传递的对象对应的类没有序列化，由于对代码不敢改动太大，就想着用最简单的方法，把几个自定义类都序列化了，以为就应该可以了。结果，还是不行，此时虽然不会有自定义类的序列化问题了，但是却出现了终极错误：JavaSparkContext not serializable，这是什么意思呢，是说 JavaSparkContext 不能序列化，总不能把 JavaSparkContext 序列化吧，Spark 是不允许这么干的。</p><p>那么问题是什么呢？我首先猜测肯定是 Function 里面用到了 JavaSparkContext 对象，导致启动 Spark 任务的时候，需要序列化 Function 用到的所有对象（当然也需要序列化对象所属类里面的所有属性），而这些 Function 所用到的所有对象里面，就有 JavaSparkContext 对象。于是，我耐心看了一下代码，果然，在创建 Function 对象的时候，竟然把 JavaSparkContext 对象作为参数传进去了，还是因为 JavaSparkContext 不能乱用。</p><p>其实，报错日志里面都已经明显指向说明了，除了自定义的类，错误归结于 <br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at org.apache.spark.api.java.AbstractJavaRDDLike.mapPartitions(JavaRDDLike.scala:<span class="number">46</span>)</span><br></pre></td></tr></table></figure><p></p><p> 而这里的代码，正是我增加的一部分，为了贪图简单方便，直接把 JavaSparkContext 对象传递给了 mapPartitions 对应的 Function。</p><h1 id="解决问题"><a href="# 解决问题" class="headerlink" title="解决问题"></a>解决问题 </h1><p> 既然找到了问题，接下来就好办了。既然 JavaSparkContext 不能乱用，那就不用，把这个传递参数去掉，即可正常运行，但是这样做太简单粗暴，不是解决问题的思路。仔细分析一下，可以有 2 种解决办法（思路就是避免序列化）：</p><p>1、如果在 Function 里面非要用到 JavaSparkContext 对象，那就把 JavaSparkContext 对象设置为全局静态的 Java 属性（使用 static 关键字），那么在哪里都可以调用它了，而无需担心序列化的问题（静态属性可以避免从 Driver 端发送到 Executor 端，从而避免了序列化过程）；</p><p>2、对于 Function 不要使用内部匿名类，这样必然需要序列化 Function 对象，同时也必然需要序列化 Function 对象用到的 JavaSparkContext 对象，其实可以把 Function 类定义为内部静态类，就可以避免序列化了。</p><h1 id="问题总结"><a href="# 问题总结" class="headerlink" title="问题总结"></a>问题总结 </h1><p>1、出现这种错误，不要想当然地认为就是某种原因造成的，而要先看详细日志，否则会走弯路，浪费一些时间（虽然最终也能解决问题）；</p><p>2、有时候状态不好，晕乎乎的，找问题又慢又低效，此时应该休息一下，等头脑清醒了再继续找问题，否则可能事倍功半，而且影响心情。</p><p> 参考：<a href="https://stackoverflow.com/questions/27706813/javasparkcontext-not-serializable" target="_blank" rel="noopener">https://stackoverflow.com/questions/27706813/javasparkcontext-not-serializable</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天更新代码，对 Spark 里面的 RDD 随便增加了一个 Function，结果遇到了序列化（Serializable）的问题，这个不是普通的自定义类不能序列化问题，而是 JavaSparkContext 的用法问题，由于小看了这个问题，多花了一点时间解决问题，本文就记录下这一过程。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="Spark序列化" scheme="https://www.playpi.org/tags/Spark%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="serializable" scheme="https://www.playpi.org/tags/serializable/"/>
    
  </entry>
  
  <entry>
    <title>微博 url mid 相互转换算法实现 - Java 版本</title>
    <link href="https://www.playpi.org/2018122001.html"/>
    <id>https://www.playpi.org/2018122001.html</id>
    <published>2018-12-20T15:29:13.000Z</published>
    <updated>2018-12-20T15:29:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 对微博数据有了解的人都知道，一条微博内容对应有唯一的微博 url，同时对微博官方来说，又会生成一个 mid，mid 就是一条微博的唯一标识（就像 uid 是微博用户的唯一标识一样），也类似于人的身份证号。其实，微博 url 里面有一串看起来无意义的字符（由字母、数字组成，6-8 个字符长度），可以和 mid 互相转换，本文就根据理论以及 Java 版本的实现，讲解微博 url 与 mid 的互相转换过程。</p><a id="more"></a><p> 待整理。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;对微博数据有了解的人都知道，一条微博内容对应有唯一的微博 url，同时对微博官方来说，又会生成一个 mid，mid 就是一条微博的唯一标识（就像 uid 是微博用户的唯一标识一样），也类似于人的身份证号。其实，微博 url 里面有一串看起来无意义的字符（由字母、数字组成，6-8 个字符长度），可以和 mid 互相转换，本文就根据理论以及 Java 版本的实现，讲解微博 url 与 mid 的互相转换过程。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="微博url" scheme="https://www.playpi.org/tags/%E5%BE%AE%E5%8D%9Aurl/"/>
    
      <category term="微博mid" scheme="https://www.playpi.org/tags/%E5%BE%AE%E5%8D%9Amid/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中字符串截取方法总结</title>
    <link href="https://www.playpi.org/2018121901.html"/>
    <id>https://www.playpi.org/2018121901.html</id>
    <published>2018-12-18T16:31:19.000Z</published>
    <updated>2018-12-18T16:31:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>最近在处理数据的时候，用到了 JavaScript 编程语言，通过绕弯路来解决 ETL 处理的逻辑，其中就用到了字符串的截取方法，查 JavaScript 的文档看到了 3 个方法，被绕的有点晕，本文就总结一下 JavaScript 中字符串截取的方法。</p><a id="more"></a><h1 id="开篇"><a href="# 开篇" class="headerlink" title="开篇"></a>开篇 </h1><p> 首先声明，JavaScript 中对方法名字的大小写是敏感的，该是小写就是小写，该是大写就是大写。</p><h1 id="substring- 方法"><a href="#substring- 方法" class="headerlink" title="substring() 方法"></a>substring() 方法 </h1><h2 id="定义和用法"><a href="# 定义和用法" class="headerlink" title="定义和用法"></a> 定义和用法 </h2><blockquote><p>substring() 方法用于截取字符串中介于两个指定下标之间的字符</p></blockquote><h2 id="语法"><a href="# 语法" class="headerlink" title="语法"></a> 语法 </h2><blockquote><p>stringObject.substring(start, stop)</p></blockquote><p> 上述参数解释：</p><table><thead><tr><th style="text-align:center">参数名 </th><th style="text-align:center"> 解释说明 </th></tr></thead><tbody><tr><td style="text-align:center">start</td><td style="text-align:center"> 必须，一个整数（是负数则被自动置为 0），要截取的子串的第一个字符在 stringObject 中的位置 </td></tr><tr><td style="text-align:center">end</td><td style="text-align:center"> 可选（如果省略该参数，则被默认为字符串长度），一个整数（是负数则被自动置为 0），比要截取的子串的最后一个字符在 stringObject 中的位置多 1</td></tr></tbody></table><h2 id="返回值"><a href="# 返回值" class="headerlink" title="返回值"></a>返回值 </h2><p> 一个全新的字符串，其实就是 stringObject 的一个子字符串，其内容是从 start 到 stop-1 的所有字符，其长度为 stop 减 start。</p><h2 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a>注意事项 </h2><p>1、substring() 方法返回的子字符串包括 start 处的字符，但是不包括 stop 处的字符，这一点可能很多人会迷惑，其实很多编程语言都是这个逻辑；</p><p>2、如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串，不是 null，也不是 undefined）；</p><p>3、如果 start 比 stop 大，那么该方法在截取子串之前会先交换这两个参数，这就会导致参数的顺序不影响截取的结果了；</p><p>4、参数理论上不能出现负数（在本方法中无特殊意义，在其它方法中就有特殊意义了），如果有，那么在截取子串之前会被置为 0。</p><h2 id="举例说明"><a href="# 举例说明" class="headerlink" title="举例说明"></a> 举例说明 </h2><p><strong> 例子 1（从下标 3 截取到字符串最后）：</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">3</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>输出（长度为 10 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-world!</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 2（从下标 3 截取到下标 8）：</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">3</span>, <span class="number">8</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>输出（长度为 5 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-wo</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 3（从下标 3 截取到下标 8，但是参数位置反了）：</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">8</span>, <span class="number">3</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>输出（长度为 5 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-wo</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 4（参数为负数，从下标 0 截取到下标 3）：</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">-1</span>, <span class="number">3</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>输出（长度为 3 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hel</span><br></pre></td></tr></table></figure><p></p><h1 id="substr- 方法"><a href="#substr- 方法" class="headerlink" title="substr() 方法"></a>substr() 方法 </h1><h2 id="定义和用法 -1"><a href="# 定义和用法 -1" class="headerlink" title="定义和用法"></a> 定义和用法 </h2><blockquote><p>substr() 方法可在字符串中截取从 start 下标开始的指定长度的子串</p></blockquote><h2 id="语法 -1"><a href="# 语法 -1" class="headerlink" title="语法"></a> 语法 </h2><blockquote><p>stringObject.substr(start, length)</p></blockquote><p> 上述参数解释：</p><table><thead><tr><th style="text-align:center">参数名 </th><th style="text-align:center"> 解释说明 </th></tr></thead><tbody><tr><td style="text-align:center">start</td><td style="text-align:center"> 必须，必须是数值（0、正数、负数都可以），表示要截取的子串的起始下标。如果是负数，那么该参数声明的是从字符串的尾部开始计算的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。（参数为负数也可以理解成字符串长度加负数之和即为起始下标）</td></tr><tr><td style="text-align:center">length</td><td style="text-align:center">可选（如果省略该参数，那么默认为从 start 开始一直到 stringObject 的结尾对应的长度），必须是数值（0、正数、负数都可以）。</td></tr></tbody></table><h2 id="返回值 -1"><a href="# 返回值 -1" class="headerlink" title="返回值"></a>返回值 </h2><p> 一个全新的字符串，包含从 stringObject 的 start（包括 start 所指的字符）下标开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到 stringObject 的结尾的字符。如果 length 指定为负数或者 0，那么返回空串。如果 length 指定为远远大于 stringObject 长度的正数，那么返回的字符串包含从 start 到 stringObject 的结尾的字符。</p><h2 id="注意事项 -1"><a href="# 注意事项 -1" class="headerlink" title="注意事项"></a>注意事项 </h2><p>1、start 参数为负数是有特殊含义的；</p><p>2、如果 length 指定为负数或者 0，那么返回空串（即长度为 0 的字符串，不是 null，也不是 undefined）；</p><p>3、ECMAscript 没有对该方法进行标准化，因此不建议使用它。</p><h2 id="举例说明 -1"><a href="# 举例说明 -1" class="headerlink" title="举例说明"></a> 举例说明 </h2><p><strong> 例子 1（从下标 3 截取到字符串最后）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出（长度为 9 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-world!</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 2（从下标 3 截取长度为 5 的子串）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出（长度为 5 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-wo</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 3（从下标 3 截取长度为 - 5 的子串，返回空串）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>, <span class="number">-5</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出（返回空串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><p><strong>例子 4（start 参数为负数，即从字符串倒数第 5 个位置截取长度为 3 的子串）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">-5</span>, <span class="number">3</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出（长度为 3 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orl</span><br></pre></td></tr></table></figure><p></p><h1 id="slice- 方法"><a href="#slice- 方法" class="headerlink" title="slice() 方法"></a>slice() 方法 </h1><h2 id="定义和用法 -2"><a href="# 定义和用法 -2" class="headerlink" title="定义和用法"></a> 定义和用法 </h2><blockquote><p>slice() 方法用于截取字符串中介于两个指定下标之间的字符，与 substring() 方法的功能类似</p></blockquote><h2 id="语法 -2"><a href="# 语法 -2" class="headerlink" title="语法"></a> 语法 </h2><blockquote><p>stringObject.slice(start, end)</p></blockquote><p> 上述参数解释：</p><table><thead><tr><th style="text-align:center">参数名 </th><th style="text-align:center"> 解释说明 </th></tr></thead><tbody><tr><td style="text-align:center">start</td><td style="text-align:center"> 必须，一个整数（0、正数、负数，负数有特殊含义），要截取的子串的第一个字符在 stringObject 中的位置。如果是负数，那么该参数声明的是从字符串的尾部开始计算的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。（参数为负数也可以理解成字符串长度加负数之和即为起始下标）</td></tr><tr><td style="text-align:center">end</td><td style="text-align:center">可选（如果省略该参数，则被默认为字符串长度），一个整数（负数含义与 start 相同），比要截取的子串的最后一个字符在 stringObject 中的位置多 1</td></tr></tbody></table><h2 id="返回值 -2"><a href="# 返回值 -2" class="headerlink" title="返回值"></a>返回值 </h2><p> 一个全新的字符串，其实就是 stringObject 的一个子字符串，其内容是从 start 到 stop-1 的所有字符，其长度为 stop 减 start。</p><h2 id="注意事项 -2"><a href="# 注意事项 -2" class="headerlink" title="注意事项"></a>注意事项 </h2><p>1、slice() 方法返回的子字符串包括 start 处的字符，但是不包括 stop 处的字符，这一点可能很多人会迷惑，其实很多编程语言都是这个逻辑；</p><p>2、如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串，不是 null，也不是 undefined）；</p><p>3、参数可以出现负数（比 substring() 方法灵活多了）。</p><h2 id="举例说明 -2"><a href="# 举例说明 -2" class="headerlink" title="举例说明"></a> 举例说明 </h2><p><strong> 例子 1（从下标 3 截取到字符串最后）：</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">3</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>输出（长度为 9 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-world!</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 2（从下标 3 截取到下标 8）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">3</span>, <span class="number">8</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出（长度为 5 的子串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-wo</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 3（从下标 3 截取到下标 8，但是参数使用负数，从下标 - 9 截取到下标 - 4）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">-9</span>, <span class="number">-4</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出（长度为 5 的子串，（-4）-（-9）=5）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lo-wo</span><br></pre></td></tr></table></figure><p></p><p><strong>例子 4（从下标 3 截取到下标 2）：</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello-world!"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>输出返回空串）：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;最近在处理数据的时候，用到了 JavaScript 编程语言，通过绕弯路来解决 ETL 处理的逻辑，其中就用到了字符串的截取方法，查 JavaScript 的文档看到了 3 个方法，被绕的有点晕，本文就总结一下 JavaScript 中字符串截取的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="JavaScript" scheme="https://www.playpi.org/tags/JavaScript/"/>
    
      <category term="字符串截取" scheme="https://www.playpi.org/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>西红柿疙瘩汤做法总结</title>
    <link href="https://www.playpi.org/2018121601.html"/>
    <id>https://www.playpi.org/2018121601.html</id>
    <published>2018-12-15T17:57:00.000Z</published>
    <updated>2018-12-16T17:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>西红柿疙瘩汤，是一道做法非常简单的主食与配菜混为一起的菜品，适合在寒冷的冬天食用，吃一碗热乎乎的，非常暖胃，我知道的在河南与安徽都有这个做法。本文就讲述西红柿疙瘩汤的做法总结。</p><a id="more"></a><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 以下的食材份量大约 2 人份：</p><ul><li>黄心乌菜一颗（实在没有使用其它青菜也可以）</li><li>西红柿一颗（粉的最好，与脆的对立）</li><li>鸡蛋 2 颗 </li><li> 面粉 100 克 </li><li> 小葱、香菜各 2 棵 </li><li> 调味料（食用盐、芝麻油）</li></ul><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a>制作步骤 </h1><p> 从开火到关火预计耗时 15-20 分钟：</p><p>0、葱花香菜段；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya5zv7hnmj229s29s4qq.jpg" alt="葱花香菜段" title="葱花香菜段"></p><p>1、西红柿去皮，划十字刀花，放入热水中烫 1 分钟左右，取出直接去皮，不去皮也行，但是会影响口感，去皮后切丁，切小一点，放入碗中备用；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya5kxue8tj229s29se81.jpg" alt="一颗西红柿" title="一颗西红柿"></p><p>2、准备黄心乌菜，洗干净，随便切（手撕也行，无所谓），切成条状或者小块状，别太大就行；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya5lswpt3j20m80m844i.jpg" alt="黄心乌长这样" title="黄心乌长这样"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya5m1xtc6j229s29su0x.jpg" alt="黄心乌切碎" title="黄心乌切碎"></p><p>3、面粉放入大碗中，放在水龙头下，让水一滴一滴滴下来，迅速搅拌面粉，很快就可以做成面粒；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya5otcr3mj229s29s7wi.jpg" alt="面粒长这样" title="面粒长这样"></p><p>4、鸡蛋打入碗中，搅拌均匀备用；</p><p>5、锅烧热，倒入油，炒制西红柿丁，中小火炒制 3-5 分钟，此时西红柿的状态就是一半是糊状，一半是小颗粒，混合在一起，倒入开水（注意量的控制，比想象的多倒一点，面粒会吸收大量水分的），大火烧开；</p><p>6、烧开后放入面粒，大火煮 5 分钟，面粒基本熟透，汤变得浓稠，放入青菜，中火继续煮 1 分钟左右，鸡蛋液慢慢淋入锅中，搅拌，放入食用盐，中火继续煮 2 分钟；</p><p>7、开锅，放入芝麻油、香菜段，葱花，搅拌十几秒，关火。</p><p>一锅 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy94yo4wibj229s29snpd.jpg" alt="一锅" title="一锅"></p><p> 一碗 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya5xkeysqj229s29shdt.jpg" alt="一碗" title="一碗"></p><p> 做完顺便又加了 2 个菜：<br>花菜回锅肉 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya60u5iacj229s29se81.jpg" alt="花菜回锅肉" title="花菜回锅肉"></p><p> 辣椒回锅肉 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya61058ppj229s29su0x.jpg" alt="辣椒回锅肉" title="辣椒回锅肉"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项 </h1><p>1、青菜最好选择黄心乌，因为我一直吃的都是这种，黄心乌这种青菜一般在沿淮地区才播种，因为它比较耐寒，在秋季播种，在冬天收割，一般北方的冬天也看不到其它青菜可以生长了；</p><p>2、条件允许的话，可以放一点酱肉之类的肉粒进去，更能增加食欲；</p><p>3、做面粒的时候切记不要直接倒水搅拌，这样是做不成的一粒一粒的效果的，只能用水滴进去然后迅速搅拌，使水滴周围裹上面粉形成一粒，很快就全部都是面粒了，而且很均匀，另外，做好面粒后要立马使用，不要提前做好放那里，因为放久了（10 分钟都不行）面粒会粘连在一起，实在要放的话再多加点面粉进去，让面粒之间隔开；</p><p>4、西红柿最好选择粉的，就是那种吃起来很柔绵的，更容易做成均匀的汤；</p><p>5、做回锅肉，肉要煮到什么程度才能回锅，简单的判断方法就是筷子可以轻易穿透肉，一半要煮 20 分钟以上。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fya63x2errj229s29snpd.jpg" alt="肉回锅之前" title="肉回锅之前"></p><h1 id="补充说明"><a href="# 补充说明" class="headerlink" title="补充说明"></a> 补充说明</h1><p>2018 年 12 月 23 日，广州突然降温，降到 17 度左右（前一天的冬至还 25 度呢，短袖都穿起来了），天气冷了，于是又煮了一锅。可惜这次没买到香菜，没买到黄心乌菜，也没买到酱肉，凑活着吃。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fyiauqznd7j229s29sx6p.jpg" alt="2018 年 12 月 23 日又煮了一锅" title="2018 年 12 月 23 日又煮了一锅"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;西红柿疙瘩汤，是一道做法非常简单的主食与配菜混为一起的菜品，适合在寒冷的冬天食用，吃一碗热乎乎的，非常暖胃，我知道的在河南与安徽都有这个做法。本文就讲述西红柿疙瘩汤的做法总结。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="西红柿疙瘩汤" scheme="https://www.playpi.org/tags/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%96%99%E7%98%A9%E6%B1%A4/"/>
    
      <category term="疙瘩汤" scheme="https://www.playpi.org/tags/%E7%96%99%E7%98%A9%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式列表</title>
    <link href="https://www.playpi.org/2018121401.html"/>
    <id>https://www.playpi.org/2018121401.html</id>
    <published>2018-12-13T18:18:48.000Z</published>
    <updated>2018-12-14T18:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 正则表达式是一种表达式语句。本文记录一些常用的正则表达式，以便使用。</p><a id="more"></a><p> 待整理。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;正则表达式是一种表达式语句。本文记录一些常用的正则表达式，以便使用。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="正则表达式" scheme="https://www.playpi.org/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>与微博内容分析相关的正则表达式</title>
    <link href="https://www.playpi.org/2018121101.html"/>
    <id>https://www.playpi.org/2018121101.html</id>
    <published>2018-12-11T14:16:19.000Z</published>
    <updated>2018-12-11T14:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>在分析微博内容时，常常需要进行特殊内容去除与抽取，例如抽取微博话题、微博昵称、微博表情、微博短链接、网址长链接等等。本文依据实际使用情况，记录下了与微博内容分析相关的正则表达式，以便查用。</p><a id="more"></a><h1 id="微博表情"><a href="# 微博表情" class="headerlink" title="微博表情"></a>微博表情 </h1><p> 表情是使用左右中括号包含的文本（在实际使用时，显示的是 emoji 表情，不是单纯的字符），例如：[爱心]、[微笑]、[笑哭]，分别表示：:heart:、❤️、:smile:、😊、:joy:、😂</p><p>参考：<a href="https://emojipedia.org" target="_blank" rel="noopener">emoji 百科 </a> 。</p><p> 如果在微博内容中抽取表情，使用正则表达式（1-7 个字符，中文和字母，不排除有的新的表情出现，导致字符更长）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[[\u4e00-\u9fa5A-Za-z]&#123;1,7&#125;\]</span><br></pre></td></tr></table></figure><p>不同字符长度的表情举例（我用了 10 分钟把微博表情全部浏览了一遍，发现 [小黄人] 系列、[文明遛狗]是最近刚刚发布出来的）：[耶]、[来]、[跪了]、[ok]、[中国赞]、[紫金草]、[doge]、[文明遛狗]、[给你小心心]、[小黄人微笑]、[弗莱见钱眼开]、[小黄人剪刀手]、[哆啦 A 梦害怕]、[带着微博去旅行]。</p><h1 id="微博昵称"><a href="# 微博昵称" class="headerlink" title="微博昵称"></a>微博昵称 </h1><p> 微博昵称是用户填写的昵称，并且在转发或者提到时，会增加 @ 前缀，例如有一个 playpi 微博用户，在实际微博内容中，会以 @playpi 的形式出现，当然，微博昵称的可用字符是有限制的，不是任意字符都行，长度也是有限制的，最少 4 个字符，最多 30 个字符。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy6r1bwv0xj20mi082dfy.jpg" alt="微博昵称字符限制" title="微博昵称字符限制"></p><p>以及微博客服的回答：<a href="https://www.weibo.com/2016713117/FCf87jJZt?type=comment#_rnd1544860586591" target="_blank" rel="noopener">微博客服微博 </a> 。</p><p> 但是这个规则是针对修改昵称的限制，如果有些帐号是以前注册的，并且昵称在微博官方限制以前没有修改过，那么就有可能是 2 个字符，3 个字符，例如各个明星、作家、自媒体的个人微博：@阑夕、@王力宏、@韩寒 等等。</p><p>如果在微博内容中抽取昵称，使用正则表达式（中文、数字、字母、横线、下划线的组合，2-30 个字符）：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@[\u4e00-\u9fa5A-Z0-9a-z_-]&#123;2,30&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="微博话题"><a href="# 微博话题" class="headerlink" title="微博话题"></a>微博话题 </h1><p> 话题是微博定义的一种概念，可以用来标识热门事件、重大新闻、明星、综艺节目等等，发布规则就是使用 2 个 #符号包含话题内容（例如：# 创造 101#），话题即生成，微博还专门有一个实时话题榜单。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy6ro4qztbj20v40q2doc.jpg" alt="微博话题榜" title="微博话题榜"></p><p>如果在微博内容中抽取话题，使用正则表达式（2 个 #号之间，非指定的符号，长度在 1-49 之间）：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[^@&lt;&gt;#"&amp;'\r\n\t]&#123;1,49&#125;#</span></span><br></pre></td></tr></table></figure><p></p><p>注意，我找到 2014 年的 <a href="https://iask.sina.com.cn/b/wnINuLfme5.html" target="_blank" rel="noopener">一篇旧帖子 </a>，微博小秘书评论说话题不能包含指定的几个特殊字符，还有内容长度限制，但是我在微博页面试了一下，这些特殊字符都可以使用（但是生成的话题页面，&lt; 字符、&gt; 字符被转成了 html 字符实体，换行符后的内容被截断，@符号、’单引号、” 双引号被自动替换掉，# 符号根本无法发布，空格符可以正常使用），而且长度限制是 1-49 个字符（中英文、标点都算 1 个字符）。但是为了话题内容的传播，还是使用通俗易懂的中文或者字母比较好。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy6s5061rxj20gv03uwei.jpg" alt="话题测试发布" title="话题测试发布"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy6s42ecfzj20k904l0sq.jpg" alt="话题测试结果" title="话题测试结果"></p><h1 id="微博短链接"><a href="# 微博短链接" class="headerlink" title="微博短链接"></a> 微博短链接 </h1><p> 微博短链接是微博官方提供的网址压缩功能产生的一种只包含少量字符的短网址，例如：<a href="http://finance.sina.com.cn" target="_blank" rel="noopener">http://finance.sina.com.cn</a> ，压缩后为：<a href="http://t.cn/RnM1Uti" target="_blank" rel="noopener">http://t.cn/RnM1Uti</a> 。这样的话，发微博时链接占用更少的字符长度。如果发微博时，内容中带了链接，例如视频地址、淘宝店地址，会被自动压缩为短链接。微博短链接可以直接在浏览器中访问，会被微博的网址解析服务器转换为原来的正常链接再访问。</p><p>如果在微博内容中抽取短链接，使用正则表达式（我这里只是抽取 t.cn 域名的，6-8 个字母、数字）：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https&#123;0,1&#125;://t.cn/[A-Z0-9a-z]&#123;6,8&#125;[/]&#123;0,1&#125;#</span></span><br></pre></td></tr></table></figure><p></p><p>参考：<br>微博开放平台说明：<a href="http://open.weibo.com/wiki/2/short_url/shorten" target="_blank" rel="noopener">http://open.weibo.com/wiki/2/short_url/shorten</a> ；<br>免费在线短链接转换工具：<a href="http://dwz.wailian.work" target="_blank" rel="noopener">http://dwz.wailian.work</a> 。</p><h1 id="网址长链接"><a href="# 网址长链接" class="headerlink" title="网址长链接"></a>网址长链接 </h1><p> 网址长链接也就是普通的网址，有多种可能性。</p><p>如果在微博内容中抽取网址长链接，使用正则表达式（我这里只考虑 http、https、ftp、file 协议）：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(https?|ftp|file)://[-A-Za-z0-9+&amp;@<span class="comment">#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在分析微博内容时，常常需要进行特殊内容去除与抽取，例如抽取微博话题、微博昵称、微博表情、微博短链接、网址长链接等等。本文依据实际使用情况，记录下了与微博内容分析相关的正则表达式，以便查用。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="正则表达式" scheme="https://www.playpi.org/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="微博内容" scheme="https://www.playpi.org/tags/%E5%BE%AE%E5%8D%9A%E5%86%85%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>Win10 默认程序设置无效</title>
    <link href="https://www.playpi.org/2018120901.html"/>
    <id>https://www.playpi.org/2018120901.html</id>
    <published>2018-12-09T09:21:14.000Z</published>
    <updated>2018-12-09T09:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>装了 Windows 10 系统（教育版本），用了将近 3 个月了，最近发现一个诡异的现象，我的默认程序设置每次都只是设置后生效一段时间，例如视频播放器、音乐播放器，我分别设置成了迅雷看看、网易云音乐，用了半天之后，发现又变成了 Window 10 系统自带的视频播放器。这个现象也不是重启之后才出现的，而是平时用着用着就会出现，很莫名其妙。后来查阅资料发现这是一个普遍的现象，这个问题的根本原因是 Windows 10 自带的 bug，通常导致这个 bug 出现的原因是开启了系统的自动更新。</p><a id="more"></a><h1 id="现象"><a href="# 现象" class="headerlink" title="现象"></a>现象 </h1><p> 在 Windows 10 系统（没有打对应补丁的）中，如果开启了系统自动更新，就会触发相应的 bug：默认程序会被系统更改回系统自带的程序，例如视频播放器、音乐播放器等等。这个问题的原因用官方标识来指定就是由于 <strong>KB3135173</strong> 所致，同时这个 bug 已经有对应的补丁了。</p><p>按照系统设置，把某些默认程序改为自己需要的，我这里把视频播放器改为迅雷影音，设置特定格式的文件（.mkv，.mp4 等等）使用迅雷影音打开。</p><p>在桌面右下角打开 <strong>所有设置 </strong>选项 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0n2j57csj20bq0ahmz4.jpg" alt="所有设置" title="所有设置"></p><p> 在 Windows 设置中，选择 <strong>应用 </strong>选项 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0nlh83ifj20xc0pwdgf.jpg" alt="选择应用" title="选择应用"></p><p> 选择默认应用，设置视频播放器为 <strong>迅雷影音 </strong><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0nnjkzdcj20xc0pw445.jpg" alt="设置视频播放器为迅雷影音" title="设置视频播放器为迅雷影音"></p><p> 上述的设置步骤实际上还不够，因为视频类型有很多种，还需要进一步指定每种类型的默认播放器，在默认应用下方有一个 <strong>按文件类型指定默认应用 </strong>选项 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0nqc3hdtj20xc0pw43w.jpg" alt="按文件类型指定默认应用" title="按文件类型指定默认应用"></p><p> 我这里特别关注 <strong>.mkv</strong>、<strong>.mp4</strong> 这 2 种格式的文件，默认应用设置为 <strong>迅雷影音 </strong><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0nusxmrxj20md0pw0tu.jpg" alt="单独设置 2 种文件类型" title="单独设置 2 种文件类型"></p><p> 上述内容设置完成，就可以使用了，但是用不了多久，系统时不时就弹出提示框，通知默认程序重置，然后又被设置为系统内置的应用了 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0mr10t67j20bh0h977t.jpg" alt="弹出提示框" title="弹出提示框"></p><h1 id="解决方案"><a href="# 解决方案" class="headerlink" title="解决方案"></a> 解决方案 </h1><h2 id="不推荐方案"><a href="# 不推荐方案" class="headerlink" title="不推荐方案"></a> 不推荐方案 </h2><p> 更改注册表、使用命令行卸载系统默认程序，这些方案是可行的，但是对于普通用户来说太麻烦了一点，根本不懂得如何操作，而且解决方法太粗暴了，当然喜欢折腾的人是可以选择的。</p><p>以下给出几个命令行示例（需要在管理员模式下执行，打开 Windows PowerShell 的时候选择有管理员的那个）：</p><p>卸载 “电影和电视” 应用（星号表示通配符，下同）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-appxpackage *zunevideo* | remove-appxpackage</span><br></pre></td></tr></table></figure><p></p><p>卸载 “Groove 音乐” 应用 <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-appxpackage *zunemusic* | remove-appxpackage</span><br></pre></td></tr></table></figure><p></p><p> 卸载 “照片” 应用 <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-appxpackage *photos* | remove-appxpackage</span><br></pre></td></tr></table></figure><p></p><p> 如果还想恢复已经卸载的系统自带应用，可以使用以下命令（重装所有系统内置的应用）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-AppxPacKage -allusers | foreach &#123;Add-AppxPacKage -register <span class="string">"<span class="variable">$($_.InstallLocation)</span>appxmanifest.xml"</span> -DisableDevelopmentMode&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="推荐直接打补丁（更新系统）"><a href="# 推荐直接打补丁（更新系统）" class="headerlink" title="推荐直接打补丁（更新系统）"></a>推荐直接打补丁（更新系统）</h2><p>这个方法很简单，容易操作，直接在系统更新里面更新即可，确保要能更新到 <strong>KB3135173</strong> 这个补丁才行（或者更高版本的补丁）。</p><p>我这里是已经更新完成的，等待重启，补丁标识是 <strong>KB4469342</strong>。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0n75u4o3j20xc0pw442.jpg" alt="系统更新" title="系统更新"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;装了 Windows 10 系统（教育版本），用了将近 3 个月了，最近发现一个诡异的现象，我的默认程序设置每次都只是设置后生效一段时间，例如视频播放器、音乐播放器，我分别设置成了迅雷看看、网易云音乐，用了半天之后，发现又变成了 Window 10 系统自带的视频播放器。这个现象也不是重启之后才出现的，而是平时用着用着就会出现，很莫名其妙。后来查阅资料发现这是一个普遍的现象，这个问题的根本原因是 Windows 10 自带的 bug，通常导致这个 bug 出现的原因是开启了系统的自动更新。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Win10" scheme="https://www.playpi.org/tags/Win10/"/>
    
      <category term="默认程序设置" scheme="https://www.playpi.org/tags/%E9%BB%98%E8%AE%A4%E7%A8%8B%E5%BA%8F%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spark on Yarn 查看日志</title>
    <link href="https://www.playpi.org/2018120702.html"/>
    <id>https://www.playpi.org/2018120702.html</id>
    <published>2018-12-06T18:06:20.000Z</published>
    <updated>2018-12-06T18:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 一直一来都是直接在 Yarn 的 UI 界面上面查看 Spark 任务的日志的，感觉看少量的内容还勉强可以，但是如果内容很多，浏览器就没法看了，更没法分析。本文讲述如何使用 Yarn 自带的命令在终端查看 Spark 任务的日志，也可以拷贝出日志文件，便于分析。</p><a id="more"></a><p>1、查看某个 Spark 任务的日志，使用 logs 入口：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn logs -applicationId application_1542870632001_26426</span><br></pre></td></tr></table></figure><p></p><p> 如果日志非常多，直接看会导致刷屏，看不到有用的信息，所以可以重定向到文件中，再查看文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn logs -applicationId application_1542870632001_26426 &gt; ./application.log</span><br></pre></td></tr></table></figure><p></p><p>2、查看某个 Spark 任务的状态，使用 application 入口：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn application -status application_1542870632001_26426</span><br></pre></td></tr></table></figure><p></p><p> 同时也可以看到队列、任务类型、日志链接等详细信息 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxxloh9spej20uo0auaas.jpg" alt="查看状态" title="查看状态"></p><p>3、kill 掉某个 Spark 任务，有时候是直接在 Driver 端 kill 掉进程，然后 Yarn 的 Spark 任务也会随之失败，但是这种做法是不妥的。其实 kill 掉 Spark 任务有自己的命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn application -<span class="built_in">kill</span> application_1542870632001_26426</span><br></pre></td></tr></table></figure><p></p><p>4、需要注意的是，步骤 1 中去查看日志，要确保当前 HADOOP_USER_NAME 用户是提交 Spark 任务的用户，否则是看不到日志的，因为日志是放在 HDFS 对应的目录中的，其中路径中会有用户名。此外，步骤 1 中的日志要等 Spark 任务运行完了才能看到，否则日志文件不存在（还没收集到 HDFS 中）。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;一直一来都是直接在 Yarn 的 UI 界面上面查看 Spark 任务的日志的，感觉看少量的内容还勉强可以，但是如果内容很多，浏览器就没法看了，更没法分析。本文讲述如何使用 Yarn 自带的命令在终端查看 Spark 任务的日志，也可以拷贝出日志文件，便于分析。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="Yarn" scheme="https://www.playpi.org/tags/Yarn/"/>
    
      <category term="日志查看" scheme="https://www.playpi.org/tags/%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B/"/>
    
  </entry>
  
  <entry>
    <title>煮鸡蛋做法总结</title>
    <link href="https://www.playpi.org/2018120301.html"/>
    <id>https://www.playpi.org/2018120301.html</id>
    <published>2018-12-02T18:30:45.000Z</published>
    <updated>2018-12-02T18:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>本文记录水煮鸡蛋的做法总结。</p><a id="more"></a><h1 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a>介绍 </h1><p> 水煮鸡蛋是最常见的吃法之一，做法非常简单，直接将鸡蛋放入开水中煮熟即可。煮熟的鸡蛋营养丰富，水煮鸡蛋的营养可以 100% 被保留，是所有的鸡蛋做法中营养被保留的最好的一种。建议每天食用 1-2 个，因为过量的食用可能会导致营养不良，同时鸡蛋的营养并没有被身体吸收，相当于浪费了。</p><p>在生活当中，大家几乎每天早上都会吃煮鸡蛋，或者茶叶蛋，但是有一些人卖的煮鸡蛋不算成功的煮鸡蛋，因为剥皮的时候发现不好剥，蛋壳与蛋白紧紧粘在一起，吃起来可麻烦了，这是因为煮鸡蛋的做法错误，遗漏了重要的步骤。</p><h1 id="做法步骤"><a href="# 做法步骤" class="headerlink" title="做法步骤"></a>做法步骤 </h1><p>1、简单地清洗一下鸡蛋，因为鸡蛋的表面可能会有一些茅草、粪便之类的污垢，这是因为鸡蛋必须是原生的，存储、运输、销售过程都不能清洗，如果非要清洗，水会破坏表面的保护膜，放不了两天鸡蛋就坏了；</p><p>2、放在冷水中浸泡一会儿，1-2 分钟，这样做的目的是防止沸水煮的时候蛋壳破裂；</p><p>3、放入锅中，水的高度稍微没过鸡蛋，使用中火煮开水，不要使用大火，大火煮的速度太快，鸡蛋容易裂开，另外中火使水沸腾的时间会长一些，预热了鸡蛋，味道更香；</p><p>4、水沸腾后，改为小火，煮 7-8 分钟（如果继续使用中火，5 分钟左右即可）；</p><p>5、如果需要溏心蛋（蛋清凝固，蛋黄成稠液状，软嫩滑润），煮 5 分钟即可；</p><p>6、煮熟后不要立即捞出，等 1-2 分钟，然后才捞出，切记此时需要放入冷水中，浸泡 1-3 分钟，这一步骤的目的是保证鸡蛋容易剥开，避免蛋白和蛋壳粘在一起。</p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项</h1><p>1、煮鸡蛋前最好放入冷水中浸泡 1-2 分钟，防止煮的过程开裂；</p><p>2、注意控制火力和时间，鸡蛋不能煮太久，超过 10 分钟会有化学反应，导致营养流失；</p><p>3、煮熟后不要立即捞出，捞出后也要放在冷水中浸泡，防止蛋白和蛋壳粘在一起；</p><p>4、每天不要吃太多，1-2 个就够了；</p><p>5、如果想要保持蛋黄在中间，煮鸡蛋的过程中要适当搅拌让鸡蛋旋转。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本文记录水煮鸡蛋的做法总结。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="煮鸡蛋" scheme="https://www.playpi.org/tags/%E7%85%AE%E9%B8%A1%E8%9B%8B/"/>
    
  </entry>
  
  <entry>
    <title>一条正则表达式引发的惨案</title>
    <link href="https://www.playpi.org/2018120201.html"/>
    <id>https://www.playpi.org/2018120201.html</id>
    <published>2018-12-01T18:04:13.000Z</published>
    <updated>2018-12-07T18:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 本文讲述由于正则表达式引发的性能惨案，背景就是使用 Java 编程语言进行正则表达式匹配，由于正则表达式很复杂，再加上 Java 使用的是 NFA（非确定型有穷自动机）匹配引擎，导致匹配一条文本内容使用了十几个小时还没完成，一直卡住，同时线上环境的主机 CPU 使用率也居高不下（我猜的，因为我没有权限看）。</p><a id="more"></a><p> 整理中。</p><p> 参考：<br><a href="http://www.cnblogs.com/study-everyday/p/7426862.html" target="_blank" rel="noopener">http://www.cnblogs.com/study-everyday/p/7426862.html</a><br><a href="https://www.jianshu.com/p/5c2e893b8d5d" target="_blank" rel="noopener">https://www.jianshu.com/p/5c2e893b8d5d</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本文讲述由于正则表达式引发的性能惨案，背景就是使用 Java 编程语言进行正则表达式匹配，由于正则表达式很复杂，再加上 Java 使用的是 NFA（非确定型有穷自动机）匹配引擎，导致匹配一条文本内容使用了十几个小时还没完成，一直卡住，同时线上环境的主机 CPU 使用率也居高不下（我猜的，因为我没有权限看）。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="正则表达式" scheme="https://www.playpi.org/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="Java NFA" scheme="https://www.playpi.org/tags/Java-NFA/"/>
    
      <category term="非确定型有穷自动机" scheme="https://www.playpi.org/tags/%E9%9D%9E%E7%A1%AE%E5%AE%9A%E5%9E%8B%E6%9C%89%E7%A9%B7%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="正则无限回溯" scheme="https://www.playpi.org/tags/%E6%AD%A3%E5%88%99%E6%97%A0%E9%99%90%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>jackson 包版本低导致 NoSuchMethodError</title>
    <link href="https://www.playpi.org/2018120101.html"/>
    <id>https://www.playpi.org/2018120101.html</id>
    <published>2018-11-30T18:02:03.000Z</published>
    <updated>2018-11-30T18:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>本文讲述 Java 项目由 Maven 包冲突或者版本不合适导致的运行时错误：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.JavaType.isReferenceType()Z</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h1 id="起因"><a href="# 起因" class="headerlink" title="起因"></a>起因 </h1><p> 今天在升级 Web 项目的相关接口，更新了所依赖的 SDk 版本，删除了一些旧代码，测试时发现某个功能不可用，直接抛出异常，异常是在运行时抛出的，编译、打包、部署都没有任何问题。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqmy8sggbj213t0eyq5s.jpg" alt="NoSuchMethodError 异常" title="NoSuchMethodError 异常"></p><p>我看到第一眼，就知道肯定是 Maven 依赖问题，要么是版本冲突（存在不同版本的 2 个相同依赖），要么是依赖版本不对（太高或者太低），但为了保险起见，我还是先检查了一下 Git 的提交记录，看看有没有对 pom.xml 配置文件做相关改动。检查后发现，除了一些业务逻辑的变动，以及无关 jackson 依赖的版本升级，没有其它对 pom.xml 文件的改动，由此可以断定，某个依赖的升级导致了此问题，问题原因找到了，接下来就是解决问题。</p><h1 id="解决办法"><a href="# 解决办法" class="headerlink" title="解决办法"></a>解决办法 </h1><h2 id="查看项目的 -Maven- 依赖树"><a href="# 查看项目的 -Maven- 依赖树" class="headerlink" title="查看项目的 Maven 依赖树"></a> 查看项目的 Maven 依赖树 </h2><p> 由于依赖太多，使用可视化的插件查看太繁杂，所以选择直接使用 maven 的 dependency 构件来生成文本，然后再搜索查看：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree &gt; tree.txt</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqnq28eqmj20nb071jrm.jpg" alt="mvn 命令行脚本" title="mvn 命令行脚本"></p><p>在 tree.txt 文件中搜索 jackson，可以找到 jackson-databind 相关的依赖包，还有 jackson-annotations、jackson-core 这 2 个依赖包。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqob296i5j218a0q2whw.jpg" alt="jackson 依赖搜索" title="jackson 依赖搜索"></p><p>jackson-databind 的版本为 2.9.3<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqovrmijgj20vz0gg0ub.jpg" alt="jackson-databind 的版本" title="jackson-databind 的版本"></p><p>确定了使用的版本，接下来可以在 IDEA 里面搜索一下这个类，然后再找调用的方法，直接去查看源码，看看到底有没有这个方法。搜索 JavaType Java 类，注意包的路径，可能会有很多重名的类出现，我是用 Ctrl + Shift + T 的快捷键搜索，各位根据自己的快捷键设置进行搜索。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqoyomz3nj21ha0ketbp.jpg" alt="搜索 JavaType 类" title="JavaType"></p><p>然后进入类的源代码，搜索方法 isReferenceType，报错信息后面的大写的 Z，是 JNI 字段描述符，表示这个方法的返回值类型，Z 表示 Boolean 类型，我们搜索看看有没有这个方法。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqp3posd9j218h0l2dhd.jpg" alt="搜索方法 isReferenceType" title="搜索方法 isReferenceType"></p><p>我们发现连同名的方法都没有，更不用看返回值类型了，但是注意还是要去父类还有接口里面去搜索一下，保证都没有才是最终的没有。经过查找，没发现这个方法（主要原因是父类 ResolvedType 的版本太低，父类所在的 jackson-core 的版本只有 2.3.3，所以找不到这个方法），到这里就要准备升级 jackson-core 或者降级 jackson-databind 依赖了。</p><h2 id="去除多余依赖"><a href="# 去除多余依赖" class="headerlink" title="去除多余依赖"></a>去除多余依赖 </h2><p> 如果是检查到存在依赖冲突的情况，一般是高低版本之间的冲突（最多的情况是多级传递依赖引起的），然后 Maven 编译打包时会全部打进业务的包。</p><p>1、导致运行时程序不知道选择哪一个，于是抛出 NoSuchMethodError 异常，此时根据需要，移除多余的依赖包即可；</p><p>2、步骤 1 操作后，还是一种可能是虽然只存在一个版本，但是由于版本太新或者太旧，无法兼容所有的调用，导致多处需要调用这个依赖包的地方总会有某个地方出现 NoSuchMethodError 异常。此时就比较麻烦，如果能找到一个合适版本的依赖包，兼容所有的调用，当然是好的；或者升级调用处对应的接口版本；如果还是无法解决，就只能通过 Shade 构件解决问题了，此处就不赘述了。</p><p>经过检查，我这里遇到的就是步骤 2 的情况，虽然只剩下一个依赖包，但是版本太低或者太高，导致调用时找不到 isReferenceType 方法，类其实是存在的，所以要采用升级或者降级的方式。</p><h2 id="升级降级依赖"><a href="# 升级降级依赖" class="headerlink" title="升级降级依赖"></a>升级降级依赖 </h2><p> 如果是检查到只有一个依赖，并没有冲突的情况，就容易了，直接找到最稳定的版本或者适合使用的旧版本，提取依赖的坐标，配置到 pom.xml 文件中即可。</p><p>经过检查，我这里遇到的就是这种情况，去 Maven 私服中搜索 jackson，找到合适的版本（自己根据需要选择，我这里选择 jackson-databind 的 2.9.7 版本，然后 jackson-core 也指定 2.9.7 版本，就可以了，然后又查资料也发现这个方法是 2.6.0 版本之后才开始加上的），配置到 pom.xml 文件中即可。</p><p>私服搜索 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqnn8b0rmj219s0nugn4.jpg" alt="jackson 搜索" title="jackson 搜索"></p><p> 配置到 pom.xml<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqq62vwuvj20mw07kdg4.jpg" alt="jackson 配置" title="jackson 配置"></p><p>我这里使用了常量，在 pom.xml 文件的 properties 属性下面配置即可。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxqq73kgcsj20oo02o746.jpg" alt="Maven 版本常量" title="Maven 版本常量"></p><h1 id="踩坑总结"><a href="# 踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1、其实 jackson 这个依赖我并没有使用，而是引用的一个第三方依赖内部使用的，但是这个第三方依赖并没有一同打进来，也没有说明需要什么版本的，所以导致我自己在实验，最终找到到底哪一个版本合适。</p><p>2、为了统一，jackson-core 的版本要与 jackson-databind 的版本一致，jackson-databind 里面是已经自带了 jackson-annotations 的，由于 jackson-databind 里面的类继承了 jackson-core 里面的，所以才都要升级并且保持版本一致。</p><p>3、搜索类方法时，注意留意父类和接口里面，不一定非要在当前类里面出现。更改版本后同样也去类里面搜索一下，看看有没有需要调用的方法出现，确定版本用对了再继续做测试。</p><p>4、这种错误在编译、打包、部署阶段是检查不出来的，因为代码并没有实际调用到，属于运行时错误，只有跑起来程序，执行到需要使用该方法的时候，才会报错。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本文讲述 Java 项目由 Maven 包冲突或者版本不合适导致的运行时错误：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.JavaType.isReferenceType()Z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="NoSuchMethodError" scheme="https://www.playpi.org/tags/NoSuchMethodError/"/>
    
      <category term="jackson" scheme="https://www.playpi.org/tags/jackson/"/>
    
      <category term="Maven" scheme="https://www.playpi.org/tags/Maven/"/>
    
      <category term="SpringMVC" scheme="https://www.playpi.org/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 个人站点绑定独立的域名</title>
    <link href="https://www.playpi.org/2018112701.html"/>
    <id>https://www.playpi.org/2018112701.html</id>
    <published>2018-11-27T03:55:57.000Z</published>
    <updated>2018-11-27T03:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 随着越来越多的人使用 GitHub，都在里面创建了自己的仓库，或者 clone 了别人的优秀项目，也有很多人想利用 GitHub 自带的 GitHub Pages 来搭建个人博客，此时就可以使用独立的域名 <a href="https://www.username.github.io" target="_blank" rel="noopener">https://www.username.github.io</a> 访问自己的博客，全部的资源都来自于 GitHub，并且是免费的，不需要其它任何配置或者购买，这里面包含域名、流量、带宽、存储空间、Htpps 认证等服务。但是，有的人可能购买了自己的独立域名，例如： <a href="https://www.abc.com" target="_blank" rel="noopener">https://www.abc.com</a> ，并且想把域名直接绑定到 GitHub 免费的域名上面，这样以后访问博客的时候更容易辨识，本文就描述 GitHub Pages 绑定独立域名的操作过程，前提是 GitHub Pages 已经创建完成。</p><a id="more"></a><p> 待整理。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;随着越来越多的人使用 GitHub，都在里面创建了自己的仓库，或者 clone 了别人的优秀项目，也有很多人想利用 GitHub 自带的 GitHub Pages 来搭建个人博客，此时就可以使用独立的域名 &lt;a href=&quot;https://www.username.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.username.github.io&lt;/a&gt; 访问自己的博客，全部的资源都来自于 GitHub，并且是免费的，不需要其它任何配置或者购买，这里面包含域名、流量、带宽、存储空间、Htpps 认证等服务。但是，有的人可能购买了自己的独立域名，例如： &lt;a href=&quot;https://www.abc.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.abc.com&lt;/a&gt; ，并且想把域名直接绑定到 GitHub 免费的域名上面，这样以后访问博客的时候更容易辨识，本文就描述 GitHub Pages 绑定独立域名的操作过程，前提是 GitHub Pages 已经创建完成。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.playpi.org/categories/building/"/>
    
    
      <category term="GitHub" scheme="https://www.playpi.org/tags/GitHub/"/>
    
      <category term="个人站点" scheme="https://www.playpi.org/tags/%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9/"/>
    
      <category term="绑定域名" scheme="https://www.playpi.org/tags/%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Win10 输入法简繁体快捷键与 IDEA 冲突</title>
    <link href="https://www.playpi.org/2018112301.html"/>
    <id>https://www.playpi.org/2018112301.html</id>
    <published>2018-11-23T10:26:03.000Z</published>
    <updated>2018-12-09T10:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>用了 2 个月的 Windows 10 系统（教育版），又安装了 IDEA 代码集成工具，开发的时候，发现每一次只要我使用快捷键 Ctrl + Shift + F 格式化代码后（主要作用就是代码对齐），不起作用，而且写中文注释时发现输入法的中文就被切换为了繁体，再来一次就被切换为了简体。到这里，我知道 IDEA 的快捷键与输入法的快捷键冲突了。</p><a id="more"></a><h1 id="解决方案"><a href="# 解决方案" class="headerlink" title="解决方案"></a>解决方案 </h1><p>1、如前文描述，在写代码的过程中发现这个问题，并且看出是快捷键冲突的问题，接下来就要解决它。作为一名工程师，IDEA 的快捷键是因为使用习惯设置的，是写代码效率的保证，不可能更改的，任何与它有冲突的快捷键都要让步，那肯定是要更改输入法的快捷键的；</p><p>2、信心满满，打开 <strong> 搜狗输入法 </strong>的 <strong>属性设置 </strong>界面，找到 <strong>高级 </strong>选项，选择，可以看到里面有 <strong>快捷键 </strong>的相关配置；</p><p>配置所有的快捷键 <br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0oij39bnj20ld0f0dgj.jpg" alt="快捷键配置" title="快捷键配置"></p><p>3、看了半天，也就这么几个快捷键配置，里面根本没有 <strong> 简体 / 繁体 </strong>切换这一个配置选择，去搜索了一下其它资料，发现 <strong>简体 / 繁体 </strong>切换这一个快捷键是 Windows 10 系统内置的，默认就是 Ctrl + Shift + F，默认是给微软输入法使用的，某些版本的 Windows 10 系统有 bug，无法更改，哪怕卸载微软输入法，安装其它输入法也无效；</p><p>4、我看了我的 Windows 10 系统版本，已经是新版本了，不会有那个 bug 出现了，所以要从系统设置入手了，应该有地方设置才对，查看了语言里面的设置信息，没找到，只能又返回到搜狗输入法里面，这时突然看到里面有一个 <strong>系统功能快捷键 </strong>选项；</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0ort48p1j20ld0f03z6.jpg" alt="系统功能快捷键" title="系统功能快捷键"></p><p>5、就是这里了，点进去，把 <strong>简繁切换 </strong>关闭（如果需要保留的话，更改快捷键即可），解决问题。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy0oua7u57j20dv09q3ym.jpg" alt="关闭简繁切换" title="关闭简繁切换"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;用了 2 个月的 Windows 10 系统（教育版），又安装了 IDEA 代码集成工具，开发的时候，发现每一次只要我使用快捷键 Ctrl + Shift + F 格式化代码后（主要作用就是代码对齐），不起作用，而且写中文注释时发现输入法的中文就被切换为了繁体，再来一次就被切换为了简体。到这里，我知道 IDEA 的快捷键与输入法的快捷键冲突了。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Win10" scheme="https://www.playpi.org/tags/Win10/"/>
    
      <category term="输入法" scheme="https://www.playpi.org/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
      <category term="快捷键冲突" scheme="https://www.playpi.org/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客静态资源压缩优化</title>
    <link href="https://www.playpi.org/2018112101.html"/>
    <id>https://www.playpi.org/2018112101.html</id>
    <published>2018-11-20T16:53:13.000Z</published>
    <updated>2018-11-20T16:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>使用 hexo-cli 生成的静态网页 html 文件，使用文本编辑器打开，可以看到内容中有大量的回车换行等空白符。尽管是空白符，但是也占据着空间大小，而且那么多，导致 html 文件偏大，网页加载时不仅浪费流量，而且还影响速度。同时，最重要的是对于手机端来说，静态页面 html 文件太大了的确不友好。所以要做优化，用术语说是压缩，其实目的就是在生成 html 文件时，尽量去除内容中多余的空白符，减小 html 文件的大小。此外，顺便也把 css 文件、js 文件一起压缩了。</p><a id="more"></a><h1 id="当前现象"><a href="# 当前现象" class="headerlink" title="当前现象"></a>当前现象 </h1><p> 为了简单起见，只是列举 html 文件来看现象，目前查看生成的 8 个 html 静态页面（为了具有对比性，不包含当前页面），大小为 314 K。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxg5iuthmbj20sr0guta4.jpg" alt="8 个 html 文件" title="8 个 html 文件"></p><p>打开其中一个 html 文件查看内容，可以看到很多回车换行符。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxg5kn3bz2j20u00iidgy.jpg" alt="连续多个回车换行符" title="连续多个回车换行符"></p><p>接下来就是要想办法消除这些空白符。</p><h1 id="压缩方式选择"><a href="# 压缩方式选择" class="headerlink" title="压缩方式选择"></a>压缩方式选择 </h1><p> 通过查看 hexo 官网（附上插件库：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo 插件库 </a>），搜索资料了解别人的例子，发现有两种方式：</p><ul><li> 一种是先全局（-g 参数）安装 gulp 模块，根据压缩需求再安装需要的模块，例如 gulp-htmlclean、gulp-htmlmin、gulp-imagemin、gulp-minify-css、gulp-uglify，每个模块都有自己的功能，另外需要单独配置一个 js 脚本（放在站点根目录下），指明使用的模块，文件所在目录或者通配符文件名，然后每次使用 hexo generate 之后再使用 gulp 就可以压缩文件了。这种方式灵活度高，可以自定义，而且 gulp 的功能与 hexo 解耦，如果有其它静态文件，也可以使用 gulp 进行压缩。但是缺点也显而易见，门槛太高了，根据我的折腾经验，如果出了问题肯定要捣鼓半天，对于我这种零基础的人来说不够友好，我不选择；</li><li>另一种是类似于 hexo 的一个插件，像其它插件或者主题一样，直接安装一个模块，在配置文件中配置你想要的压缩内容，在 hexo generate 的时候就可以实现压缩，无需关心具体流程，也不用配置什么脚本，非常容易，我选择这个，目前我看到有两个类似的插件：<a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat</a>、<a href="https://github.com/mamboer/hexo-filter-cleanup" target="_blank" rel="noopener">hexo-filter-cleanup</a>，用法都差不多，我选择前者，其实这些插件也是依赖于其它插件，把多种插件的功能整合在一起而已。</li></ul><h1 id="安装配置"><a href="# 安装配置" class="headerlink" title="安装配置"></a>安装配置 </h1><p>hexo-neat 插件其实是使用 HTMLMinifier、clean-css、UglifyJS 插件实现。</p><p> 安装（由于网络不稳定因素，可能不是一次就成功，可以多试几次）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p></p><p>站点配置 <br> 编辑站点的配置文件 &#95;config.yml，开启对应的属性 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件压缩, 设置一些需要跳过的文件 </span></span><br><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩 html</span></span><br><span class="line">neat_html:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line"><span class="comment"># 压缩 css</span></span><br><span class="line">neat_css:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩 js</span></span><br><span class="line">neat_js:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">'**/*.min.js'</span></span><br><span class="line">    - <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">    - <span class="string">'**/index.js'</span></span><br></pre></td></tr></table></figure><h1 id="查看效果"><a href="# 查看效果" class="headerlink" title="查看效果"></a> 查看效果 </h1><p> 在执行 hexo generate 的命令行中就可以看到压缩率输出。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxzdwrue7aj20gj0ahdgr.jpg" alt="压缩率输出" title="压缩率输出"></p><p>8 个 html 文件被压缩后，大小只有 206 K，和之前的 314 K 比少了 108 K，虽然只是简单的数字，也可以看到压缩效果不错。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxg6y7u1mej20ro0guq49.jpg" alt="8 个文件压缩后" title="8 个文件压缩后"></p><p>继续打开先前打开的那个 html 文件，可以看到整个 html 文档被合并成为了一行文本内容，不影响浏览器对 html 文件的解析展示，回车换行的空白符内容肯定没有了。但是这样对于 html 文件的可读性变差了，最好还是使用一些回车换行符的，还好这些 html 文件我不会去看，能接受目前的效果。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxg743fu8jj20u00igq3g.jpg" alt="html 文件内容合并为一行" title="html 文件内容合并为一行"></p><h1 id="踩坑记录"><a href="# 踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><p>1、由于牵涉到压缩文件，所以 hexo 生成静态文件的速度会比以前慢一点，但是可以接受。</p><p>2、不要跳过 .md 文件，也不要跳过 .swig 文件，因为是在 hexo generate 阶段进行压缩的，所以这些文件必须交给 hexo-neat 插件处理，才能保证生成的 html 文件纯净。</p><p>3、参考博客：<a href="https://www.huangzz.xyz/hexo-optimized-file-compression.html" target="_blank" rel="noopener">1</a>、<a href="https://blog.csdn.net/lewky_liu/article/details/82432003" target="_blank" rel="noopener">2</a>、<a href="https://www.ecpeng.com/2018/04/02/%E5%85%B3%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8E%8B%E7%BC%A9%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">3</a>、<a href="https://juejin.im/post/5a93c9385188257a84625aad" target="_blank" rel="noopener">4</a>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;使用 hexo-cli 生成的静态网页 html 文件，使用文本编辑器打开，可以看到内容中有大量的回车换行等空白符。尽管是空白符，但是也占据着空间大小，而且那么多，导致 html 文件偏大，网页加载时不仅浪费流量，而且还影响速度。同时，最重要的是对于手机端来说，静态页面 html 文件太大了的确不友好。所以要做优化，用术语说是压缩，其实目的就是在生成 html 文件时，尽量去除内容中多余的空白符，减小 html 文件的大小。此外，顺便也把 css 文件、js 文件一起压缩了。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.playpi.org/categories/building/"/>
    
    
      <category term="建站" scheme="https://www.playpi.org/tags/building/"/>
    
      <category term="Hexo" scheme="https://www.playpi.org/tags/Hexo/"/>
    
      <category term="代码压缩" scheme="https://www.playpi.org/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>Google 账号开启两步验证与应用专用密码</title>
    <link href="https://www.playpi.org/2018111901.html"/>
    <id>https://www.playpi.org/2018111901.html</id>
    <published>2018-11-19T13:17:59.000Z</published>
    <updated>2018-11-19T13:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>使用 Google 账号的都知道，带来了很多方便，不仅有强大的免费搜索服务，还有 Google 文档、云主机、云存储等各种服务，但是唯一的缺点是需要翻墙，让一些人望而却步，把很多人挡在了便利门外。本文是针对已经实现翻墙愿望，并在日常工作中会使用到 Google 账号的人，说不定可以给你带来一些冷知识，解决一些小问题。</p><a id="more"></a><h1 id="Google- 账号的便利性"><a href="#Google- 账号的便利性" class="headerlink" title="Google 账号的便利性"></a>Google 账号的便利性 </h1><p> 目前在日常工作与生活中，查找资料时，基本使用的都是 Google 搜索，并且使用非常好用的 Chrome 浏览器。其中我用的最多就是标签收藏，平时偶尔搜到什么有用的知识点或者需要反复查看的网页，来不及看完整理，就先把网页分类收藏了，以便日后查漏补缺。</p><p>此时，利用 Chrome 浏览器的标签收藏功能，可以很方便地把一切网页收藏起来，并且可以很好地分类存放，清晰明了。可能有人说也有很多其它的工具可以做到这一点，不久收藏吗？但是我觉得还是利用 Chrome 浏览器自带的这个功能比较好，再配合 Google 账号，就可以达到同步更新的效果了，公司的电脑、家里的电脑，只要都登录了 Google 账号，所有收藏的标签都可以实时同步。而且，所有的浏览记录、搜索历史、记住的账号密码等等，都可以同步，跨机器使用也很方便。再配合 Chrome 浏览器的插件，对收藏的网页搜索起来非常方便。</p><h1 id="Google- 账号开启两步验证"><a href="#Google- 账号开启两步验证" class="headerlink" title="Google 账号开启两步验证"></a>Google 账号开启两步验证 </h1><p> 为了安全起见，最好给 Google 账号开启两步验证，可以选择绑定手机号、启用身份验证器、安全密钥等方式，为了方便，我选择了绑定手机号。开启两步验证后，在陌生的设备上登录 Google 账号（包括 Google 自家的各种应用，例如邮件、YouTube 等）需要验证码的二次验证，当然，如果把设备设置为可信任的设备，则不需要每次都重复输入验证码。</p><p>开启的方式非常简单，登录 Google 账号，在”登录与安全 “中有” 两步验证“的开启选项，选择自己需要的方式，继续即可。</p><p>启两步验证 1<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdpircndxj21hc0q2ac6.jpg" alt="开启两步验证 1" title="开启两步验证 1"></p><p>启两步验证 2<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdpjdxg23j21hc0q20u8.jpg" alt="开启两步验证 2" title="开启两步验证 2"></p><p>如果使用”身份验证器 “的方式，还需要在手机上安装一个” 身份验证器 “应用，校准时间后，每隔 30 秒更新验证码，登录账号时需要使用当前的验证码，并且在有效期内完成登录的操作，否则验证码过期，需要使用新的验证码，类似于手机收到的验证码只有 1 分钟一样。同时，如果使用 Google 邮箱账号注册了其它平台的账号，例如注册了 Twitter，注册了 Facebook，为了安全起见也可以使用” 身份验证器“的方式，一种验证方式管理着多种账号的安全。</p><h1 id="开启两步验证后带来的问题"><a href="# 开启两步验证后带来的问题" class="headerlink" title="开启两步验证后带来的问题"></a>开启两步验证后带来的问题 </h1><p> 我遇到的问题之一就是自己手机的邮件客户端无法登录 Google 邮箱了，我使用的时第三方邮件客户端，总是提示我密码错误，其实密码没有错误，是因为 Google 账号开启两步验证后，邮箱的登录也需要对应方式的验证，但是第三方邮件应用并没有做这个验证，所以无法登录。</p><p>本来是想着单独把 Google 邮箱的两步验证关闭，但是找了半天设置选项也没有找到，看来 Google 账号已经是一个大统一的账号，不允许单独设置涉及安全性的信息，可以理解。</p><p>同理，使用其它应用客户端也会遇到相同的问题，当然，Google 官方解释说明也解释了有部分设备不需要关注这个问题，其它大部分设备或者应用还是要受到影响的。</p><p>见：<a href="https://support.google.com/mail/answer/185833?hl=zh-Hans&amp;visit_id=636782289170925112-3791602481&amp;rd=1" target="_blank" rel="noopener">使用应用专用密码登录 </a><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdpwpmmroj20ru0oimyf.jpg" alt="解释说明" title="解释说明"></p><p> 此时，需要使用”应用专用密码 “或者在手机上开发一个” 具有账号访问权限的应用“用来代理整个 Google 的账号访问。</p><h1 id="问题的解决方法"><a href="# 问题的解决方法" class="headerlink" title="问题的解决方法"></a>问题的解决方法 </h1><h2 id="应用专用密码方式的使用"><a href="# 应用专用密码方式的使用" class="headerlink" title="应用专用密码方式的使用"></a> 应用专用密码方式的使用 </h2><h3 id="1、在 -Google- 账号的登录和安全中，可以找到”应用专用密码“这个选项："><a href="#1、在 -Google- 账号的登录和安全中，可以找到”应用专用密码“这个选项：" class="headerlink" title="1、在 Google 账号的登录和安全中，可以找到”应用专用密码“这个选项："></a>1、在 Google 账号的登录和安全中，可以找到”应用专用密码“这个选项：</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdq2531orj21hc0q2wgl.jpg" alt="应用专用密码" title="应用专用密码"></p><h3 id="2、点击进入后，可以看到选择应用与选择设备，由于我使用的是一种不知名的 -Android- 手机，所以官方选项中没有可以选择的，只好自定义一种，随便起一个名字标识即可。"><a href="#2、点击进入后，可以看到选择应用与选择设备，由于我使用的是一种不知名的 -Android- 手机，所以官方选项中没有可以选择的，只好自定义一种，随便起一个名字标识即可。" class="headerlink" title="2、点击进入后，可以看到选择应用与选择设备，由于我使用的是一种不知名的 Android 手机，所以官方选项中没有可以选择的，只好自定义一种，随便起一个名字标识即可。"></a>2、点击进入后，可以看到选择应用与选择设备，由于我使用的是一种不知名的 Android 手机，所以官方选项中没有可以选择的，只好自定义一种，随便起一个名字标识即可。</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdq4j220pj21hc0q2wfb.jpg" alt="应用设备选择" title="应用设备选择"></p><h3 id="3、选择完成后，会生成一串 -16- 位的密码，这个密码就可以在其它设备上登录的时候使用，不需要使用原来的密码，也不需要使用 -Google- 验证码。"><a href="#3、选择完成后，会生成一串 -16- 位的密码，这个密码就可以在其它设备上登录的时候使用，不需要使用原来的密码，也不需要使用 -Google- 验证码。" class="headerlink" title="3、选择完成后，会生成一串 16 位的密码，这个密码就可以在其它设备上登录的时候使用，不需要使用原来的密码，也不需要使用 Google 验证码。"></a>3、选择完成后，会生成一串 16 位的密码，这个密码就可以在其它设备上登录的时候使用，不需要使用原来的密码，也不需要使用 Google 验证码。</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdq6klijxj21hc0q2ta4.jpg" alt="生成专用密码" title="生成专用密码"></p><h3 id="4、在使用过程中还可以看到设备的情况。"><a href="#4、在使用过程中还可以看到设备的情况。" class="headerlink" title="4、在使用过程中还可以看到设备的情况。"></a>4、在使用过程中还可以看到设备的情况。</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqasrztdj21hc0q20ud.jpg" alt="设备活动和安全事件" title="设备活动和安全事件"></p><h2 id="具有账号访问权限的应用的使用"><a href="# 具有账号访问权限的应用的使用" class="headerlink" title="具有账号访问权限的应用的使用"></a> 具有账号访问权限的应用的使用 </h2><p> 这种方式就是手机本身有一个后台应用，代理了 Google 账号的一切请求，把信息转发到本地应用（比如 Chrome 浏览器就是这样一个应用，只不过是官方开发的，只要登录了 Google 账号，邮件、YouTube、搜索、Play、相册、日历等等这些应用同步一起使用，不需要额外再登录，这也是我使用 Chrome 浏览器的原因。），所以后台应用如果知道了 Google 账号的用户名、密码，就可以代理所有 Google 应用的请求，无需关心 应用专用密码了。</p><p>我发现锤子手机的 Smartisan OS 系统（v6.0.3，Android 版本 7.1.1）对邮件就做了这个后台应用 Smartisan Mail，所以在使用内置的邮件客户端时，即使开启了两步验证，也无需关心验证码的问题（第一次登录还是需要验证的）。</p><p>下面截图则是一步一步设置：</p><h3 id="1、在邮件客户端设置中添加 -Google- 邮箱"><a href="#1、在邮件客户端设置中添加 -Google- 邮箱" class="headerlink" title="1、在邮件客户端设置中添加 Google 邮箱"></a>1、在邮件客户端设置中添加 Google 邮箱</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqs7cpoqj20u01meq6k.jpg" alt="添加 Google 邮箱 1" title="添加 Google 邮箱 1"></p><h3 id="2、输入 -Google- 账号密码（也是邮箱密码）"><a href="#2、输入 -Google- 账号密码（也是邮箱密码）" class="headerlink" title="2、输入 Google 账号密码（也是邮箱密码）"></a>2、输入 Google 账号密码（也是邮箱密码）</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqt5xsawj20u01mf0vr.jpg" alt="添加 Google 邮箱 2" title="添加 Google 邮箱 2"></p><h3 id="3、输入验证码（由于开启了两步验证，一定需要），此时切记勾选”在此计算机上不再询问“，才能保证邮件客户端正常收发 -Goole- 邮件，否则不行。"><a href="#3、输入验证码（由于开启了两步验证，一定需要），此时切记勾选”在此计算机上不再询问“，才能保证邮件客户端正常收发 -Goole- 邮件，否则不行。" class="headerlink" title="3、输入验证码（由于开启了两步验证，一定需要），此时切记勾选”在此计算机上不再询问“，才能保证邮件客户端正常收发 Goole 邮件，否则不行。"></a>3、输入验证码（由于开启了两步验证，一定需要），此时切记勾选”在此计算机上不再询问“，才能保证邮件客户端正常收发 Goole 邮件，否则不行。</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqto569aj20u01mcjvf.jpg" alt="添加 Google 邮箱 3" title="添加 Google 邮箱 3"></p><h3 id="4、允许，可以看到 -Smartisan-Mail- 想要访问 -Google- 账号"><a href="#4、允许，可以看到 -Smartisan-Mail- 想要访问 -Google- 账号" class="headerlink" title="4、允许，可以看到 Smartisan Mail 想要访问 Google 账号"></a>4、允许，可以看到 Smartisan Mail 想要访问 Google 账号</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqtv52cej20u01mejz8.jpg" alt="添加 Google 邮箱 4" title="添加 Google 邮箱 4"></p><h3 id="5、点开 -Smartisan-Mail，可以看到开发者信息，里面其实设置了代理转发"><a href="#5、点开 -Smartisan-Mail，可以看到开发者信息，里面其实设置了代理转发" class="headerlink" title="5、点开 Smartisan Mail，可以看到开发者信息，里面其实设置了代理转发"></a>5、点开 Smartisan Mail，可以看到开发者信息，里面其实设置了代理转发</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqtysi1cj20u01matef.jpg" alt="添加 Google 邮箱 5" title="添加 Google 邮箱 5"></p><h3 id="6、此外，在登录成功后，在 -Google- 账号的登录和安全中，可以看到具有账号访问权限的应用："><a href="#6、此外，在登录成功后，在 -Google- 账号的登录和安全中，可以看到具有账号访问权限的应用：" class="headerlink" title="6、此外，在登录成功后，在 Google 账号的登录和安全中，可以看到具有账号访问权限的应用："></a>6、此外，在登录成功后，在 Google 账号的登录和安全中，可以看到具有账号访问权限的应用：</h3><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxdqoifycuj21hc0q2myw.jpg" alt="Smartisan Mail" title="Smartisan Mail"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;使用 Google 账号的都知道，带来了很多方便，不仅有强大的免费搜索服务，还有 Google 文档、云主机、云存储等各种服务，但是唯一的缺点是需要翻墙，让一些人望而却步，把很多人挡在了便利门外。本文是针对已经实现翻墙愿望，并在日常工作中会使用到 Google 账号的人，说不定可以给你带来一些冷知识，解决一些小问题。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Google 账号" scheme="https://www.playpi.org/tags/Google-%E8%B4%A6%E5%8F%B7/"/>
    
      <category term="两步验证" scheme="https://www.playpi.org/tags/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）</title>
    <link href="https://www.playpi.org/2018111601.html"/>
    <id>https://www.playpi.org/2018111601.html</id>
    <published>2018-11-16T11:25:52.000Z</published>
    <updated>2018-11-16T11:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>本文讲述通过 Vultr 云主机搭建 Shadowsocks 的过程，非常不详细。当然，关于云主机很多 VPS 都可以选择，根据价格、配置、地区等可以自由选择。</p><a id="more"></a><h1 id="主机购买"><a href="# 主机购买" class="headerlink" title="主机购买"></a>主机购买 </h1><p> 使用 Vultr 的云主机，选择洛杉矶地区的或者日本的，我的推广链接：<a href="https://www.vultr.com/?ref=7443790" target="_blank" rel="noopener">我的推广链接 </a>，官网：<a href="https://my.vultr.com" target="_blank" rel="noopener">Vultr</a>。</p><p> 价格有 &#36;2.5 / 月（只有 IP6 地址）、&#36;3.5 / 月、&#36;5 / 月等等，更贵的也有，一般选择这三个中的一个就够用了，但是要注意便宜的经常售罄，而且最便宜的只支持 IP6，慎用。</p><h1 id="Shadowsocks- 服务安装"><a href="#Shadowsocks- 服务安装" class="headerlink" title="Shadowsocks 服务安装"></a>Shadowsocks 服务安装 </h1><p> 云主机选择 CentOS 7 x64 版本，全程操作使用 Linux 命令（注意，如果选择其它系统命令会不一致，请自己查询，例如：Debian/Ubuntu 系统的安装命令更简洁，先 apt-get install python-pip，再 pip install shadowsocks 即可）。</p><p>注意如果安装了防火墙（更安全），需要的端口一定要开启，否则启动 Shandowsocks 会失败。</p><p>安装组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install m2crypto python-setuptools</span><br><span class="line">easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>过程如图：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa31ivc8mj21hc0mhdh5.jpg" alt="python-setuptools 安装" title="python-setuptools 安装"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa3g9phq7j21hc0jb405.jpg" alt="pip 安装" title="pip 安装"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa3h3eeyaj210k04edfx.jpg" alt="ss 安装" title="ss 安装"></p><p>配置服务器参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>如下列出主要参数解释说明 </p><table><thead><tr><th style="text-align:center"> 参数名称 </th><th style="text-align:center"> 解释说明 </th></tr></thead><tbody><tr><td style="text-align:center">server</td><td style="text-align:center"> 服务器地址，填 ip 或域名 </td></tr><tr><td style="text-align:center">local_address</td><td style="text-align:center"> 本地地址 </td></tr><tr><td style="text-align:center">local_port</td><td style="text-align:center"> 本地端口，一般 1080，可任意 </td></tr><tr><td style="text-align:center">server_port</td><td style="text-align:center"> 服务器对外开的端口 </td></tr><tr><td style="text-align:center">password</td><td style="text-align:center"> 密码，每个端口可以设置不同的密码 </td></tr><tr><td style="text-align:center">port_password</td><td style="text-align:center">server_port + password ，服务器端口加密码的组合</td></tr><tr><td style="text-align:center">timeout</td><td style="text-align:center"> 超时重连 </td></tr><tr><td style="text-align:center">method</td><td style="text-align:center"> 加密方法，默认：“aes-256-cfb”</td></tr><tr><td style="text-align:center">fast_open</td><td style="text-align:center">开启或关闭 <a href="https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open" target="_blank" rel="noopener">TCP_FASTOPEN</a>，填 true / false，需要服务端支持 </td></tr></tbody></table><p> 配置多端口信息（多个帐号，多人也可用）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"你的 IP 地址"</span>（例如：<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>）,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>（默认值）,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>（默认值）,</span><br><span class="line">    "port_password"（开启的端口和密码，自己按需配置，确保端口打开并不被其它程序占用）: &#123;</span><br><span class="line">        "1227": "pengfeivpn1227",</span><br><span class="line">        "1226": "pengfeivpn1226",</span><br><span class="line">        "1225": "pengfeivpn"</span><br><span class="line">    &#125;,</span><br><span class="line">    "timeout":300（超时时间，默认值）,</span><br><span class="line">    "method":"aes-256-cfb"（加密方法，默认值）,</span><br><span class="line">    "fast_open": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置多端口信息（纯净版本，更改 ip、端口等信息直接复制使用）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>: &#123;</span><br><span class="line">        <span class="attr">"1227"</span>: <span class="string">"vpn1227"</span>,</span><br><span class="line">        <span class="attr">"1226"</span>: <span class="string">"vpn1226"</span>,</span><br><span class="line">        <span class="attr">"1225"</span>: <span class="string">"vpn"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置一个端口信息（只有一个帐号，多人也可用）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"你的 IP 地址"</span>（例如：<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>）,  </span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">1225</span>（唯一的端口）,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"pengfeivpn"</span>（唯一的密码）,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置一个端口信息（纯净版本，更改 ip、端口等信息直接复制使用）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"x.x.x.x"</span>,  </span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">1225</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"vpn"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shadowsocks 性能优化：</p><p>另外还有很多参数可以优化性能，例如设置连接数、字节大小等，比较复杂，在此略过。</p><p>防火墙安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装防火墙 </span></span><br><span class="line">yum install firewalld</span><br><span class="line"><span class="comment"># 启动防火墙 </span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="comment"># 端口号是你自己设置的端口 </span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=1225/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=1226/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=1227/tcp</span><br><span class="line"><span class="comment"># 重载更新的端口信息 </span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>过程如图：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa3il37mlj20ka074dfy.jpg" alt="安装启动防火墙" title="安装启动防火墙"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa3hxmaftj20jd04zmx6.jpg" alt="开启端口重载" title="开启端口重载"></p><p>启动 Shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台运行    </span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"><span class="comment"># 调试时使用下面命令，实时查看日志 </span></span><br><span class="line">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>过程如图：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa3j16ymwj20hf03eglj.jpg" alt="启动 ss" title="启动 ss"></p><h1 id="客户端使用"><a href="# 客户端使用" class="headerlink" title="客户端使用"></a>客户端使用 </h1><h2 id="Windows- 平台使用"><a href="#Windows- 平台使用" class="headerlink" title="Windows 平台使用"></a>Windows 平台使用</h2><p> 下载 Windows 平台的客户端，下载地址：<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">shadowsocks-windows GitHub</a>，<a href="http://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">shadowsocks 官网 </a>，直接解压放入文件夹即可使用，不需要安装。</p><p> 但是注意配置内容（端口、密码、加密协议等等），另外注意有些 Windows 系统缺失 Shadowsocks 必要的组件（.NET Framework），需要安装，官网也有说明。</p><p>配置示例：</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa3pjtymuj20g60dp75k.jpg" alt="ss 配置" title="ss 配置"></p><p>实际上下载程序后，无需安装，直接解压即可，解压后只有一个 exe 文件，双击即可运行（最好放入指定文件夹中，便于程序管理和升级）。第一次启动，需要设置参数，如上图所示，至少配置一台机器，另外还可以设置开机启动，以后不用重新打开。此外，如果有更新版本的程序，会放在 ss_win_temp 文件夹下，直接解压后复制替换掉当前的 exe 文件即可；如果文件夹中有 gui-config.json、statistics-config.json 这 2 个文本文件，它们是程序的配置以及前面设置的翻墙配置，不能删掉；如果使用系统代理的 PAC 模式（推荐使用），会生成 pac.txt 文本文件，存放从 GFWList 获取的被墙的网址，必要时才会通过翻墙代理访问，其它正常的网址则直接访问，这样可以节约流量。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3ly1fxbhx6e12jj20h004qgln.jpg" alt="ss 文件夹" title="ss 文件夹"></p><p>如果有切换代理的需求，搭配浏览器的插件来完成，例如 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="noopener">Proxy SwitchyOmega</a> 就可以。</p><p>关于启动系统代理并使用 PAC 模式（根据条件过滤，不满足的直连），如果是入门级别使用，直接设置完就可以用了，不用再管其它设置，切记要定时更新 GFWList 列表，因为如果某些网站最近刚刚被屏蔽，不在以前的 HFWList 列表里面，就会导致无法连接，只有及时更新才能正常连接。但是还有一种极端情况，就是某些网站 GFWList 迟迟没有收录，怎么更新都不会起作用，别着急，此时可以使用用户自定义规则，模仿 GFWList 填写自己的过滤规则，即可实现灵活的切换，使用用户自定义规则后会在安装文件夹中生成 user-rule.txt 文本文件。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxbo5moanxj20cj0a5dga.jpg" alt="开启系统代理并使用 PAC 模式" title="开启系统代理并使用 PAC 模式"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxbo6rej96j20ip0axjs7.jpg" alt="PAC 模式下更新 GFWList 内容" title="PAC 模式下更新 GFWList 内容"></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxbo7ifow9j20j80apt9k.jpg" alt="PAC 模式下自定义过滤规则" title="PAC 模式下自定义过滤规则"></p><p>其实，PAC 模式的原理就是根据公共的过滤规则（收集被屏蔽的网站列表），自动生成了一个脚本文件，把脚本文件绑定到浏览器的代理设置中，使浏览器访问网站前都会运行这个脚本，根据脚本的结果决定是直接访问还是通过本地代理访问，脚本在 Shadowsocks 的 PAC 设置中可以看到，浏览器的设置信息可以在代理设置中看到（浏览器在 Shadowsocks 开启系统代理的时候会自动设置代理，无需人工干预）。由此可以得知，通过本机访问网络，决定是直接连接还是通过 Shadowsocks 代理连接的是 PAC 脚本，并不是 Shadowsocks 本身，所以如果使用系统的 Ping 命令访问 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 仍然是不能访问的，因为直接 Ping 没有经过 PAC 脚本，还是直接连接了，不可能访问成功。除了浏览器之外，如果其它程序也想访问被屏蔽的网站（例如 Git、Maven 仓库），只能通过程序自己的代理设置进行配置，完成访问的目的。（如果放弃 PAC 模式，直接使用全局模式，则不需要配置任何信息，本机所有的网络请求会全部经过翻墙代理，当然这样做会导致流量消耗过大，并且国内的正常网站访问速度也会很慢）</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxbof33m9dj20ij0aa0tl.jpg" alt="获取 PAC 的脚本地址" title="获取 PAC 的脚本地址"></p><p>获取到的 PAC 脚本地址为：<br><a href="http://127.0.0.1:1080/pac?t=20181118030355597&amp;secret=qZKsW49fDFezR4jJQtRDhUVPRqnFu6JC3Nc+vtXDb0g=" target="_blank" rel="noopener">http://127.0.0.1:1080/pac?t=20181118030355597&amp;secret=qZKsW49fDFezR4jJQtRDhUVPRqnFu6JC3Nc+vtXDb0g=</a></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxboiacqtbj20se0kojse.jpg" alt="浏览器代理配置" title="浏览器代理配置"></p><p>以上是查看 Chrome 浏览器和 IE 浏览器的代理设置信息，对于 Microsoft Edge（Windows 10 自带）浏览器来说，界面有点不一样，在设置 -&gt; 高级 -&gt; 代理设置里面。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxbooa2ikvj20xc0pwq93.jpg" alt="Edge 浏览器设置代理脚本" title="Edge 浏览器设置代理脚本"></p><p>此外，如果在浏览器中有更灵活的需求应用， 例如在设置多个代理的情况下，针对公司内网是一套，针对指定的几个网站是一套，针对被屏蔽的网站是一套，剩余的直接连接。在这种情况下仅仅使用代理脚本就不能完成需求了，显得场景很单一，当然也可以把脚本写的复杂一点，但是成本太高，而且不方便维护更新。这个时候就需要浏览器的插件出场了，例如在 Chrome 下我选择了 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="noopener">SwitchyOmega</a> 这个插件，可以设置多种情景模式，根据实际情况自由切换，非常方便。我设置了三种情景模式：hdpProxy（公司内网）、shadowSocks（翻墙代理）、auto switch（根据条件自动切换），前面两种情景模式直接设置完成即可，最后的 auto switch 需要配置得复杂一点，根据正则表达式或者通配符指定某些网站的访问方式必须使用 hdpProxy 代理，另外其它的根据规则列表 <br>（<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> ，和 Shadowsocks 的 GFWList 列表类似）必须通过翻墙代理，剩余的才是直接连接。当然，此时就不需要把 Shadowsocks 设置为系统代理了，保持 Shadowsocks 后台运行就可以了。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxbp79ywuej21hc0q20v7.jpg" alt="SwitchyOmega 插件配置" title="SwitchyOmega 插件配置"></p><h2 id="Android- 平台使用"><a href="#Android- 平台使用" class="headerlink" title="Android 平台使用"></a>Android 平台使用</h2><p> 下载 Android 平台的客户端，下载地址：<a href="http://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">shadowsocks 官网 </a>。</p><h1 id="踩坑记录"><a href="# 踩坑记录" class="headerlink" title="踩坑记录"></a> 踩坑记录 </h1><p>1、在云主机安装服务端后，又安装了防火墙，但是没有开启 Shadowsocks 需要的端口，导致启动 Shadowsocks 总是失败，但是报错信息又是 Python 和 Linux 的，看不懂，搜索资料也搜不到，后来重装，并且想清楚每一步骤是干什么的，会造成什么影响，通过排除法找到了根本原因。</p><p>2、在 Windows 平台使用的时候，安装了客户端，也安装了 .NET Framework 组件，配置信息确认无误，但是就是上不了外网，同样的操作使用 Android 客户端却可以，所以有理由怀疑是自己的主机问题。后来，重启系统，检查网络，关闭杀毒软件，还是不行，后来，依靠搜索，找到了是杀毒软件 Avast 的问题，扫描 SSL 连接被开启了，大坑，关闭即可。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxa0mkrws7j20pc0nkglz.jpg" alt="Avast 截图"></p><p>3、参考：<a href="https://github.com/sirzdy/shadowsocks" target="_blank" rel="noopener"> 梯子搭建</a></p><p>4、本来以为 Shadowsocks 的系统代理中的 PAC 模式会在接收到网络请求的基础上进行过滤，即 Shadowsocks 能控制所有的网络请求进行过滤判断，然后该翻墙的翻墙，该直连的直连，后来发现不是的，浏览器插件 SwitchyOmega 设置代理规则后，PAC 脚本就不会生效了，全部使用 Shadowsocks 代理的网站都直接翻墙，不会有任何判断了，导致优酷视频消耗了大量的流量，而且速度还很慢。另外，为了保证国内的网站不是经过翻墙代理，能直接连接，就不能使用全局模式。</p><p>5、使用插件 SwitchyOmega 的过程中，一开始是自己整理一些规则，而没有使用<br><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> 列表规则，导致配置信息很多，而且自己看着头都大，不好维护与查看，后来就发现了列表规则，解放了劳动力。</p><p>6、解决了 Chrome 浏览器的收藏跨平台自动更新同步的问题，以前在三台电脑之间添加取消收藏，总是不能更新同步，需要手动开启系统代理设置全局模式（Chrome 浏览器的收藏同步功能被屏蔽了，我又不知道 url 是什么），等一会更新同步之后再关闭（防止其它场景也翻墙了）。目前使用规则列表，收藏可以自动更新同步了，不需要手动来回切换了，也不用担忘记同步的情况了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本文讲述通过 Vultr 云主机搭建 Shadowsocks 的过程，非常不详细。当然，关于云主机很多 VPS 都可以选择，根据价格、配置、地区等可以自由选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="https://www.playpi.org/tags/Shadowsocks/"/>
    
      <category term="Vultr" scheme="https://www.playpi.org/tags/Vultr/"/>
    
      <category term="Avast" scheme="https://www.playpi.org/tags/Avast/"/>
    
      <category term="VPS" scheme="https://www.playpi.org/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Aria2 Web 管理面板使用</title>
    <link href="https://www.playpi.org/2018110902.html"/>
    <id>https://www.playpi.org/2018110902.html</id>
    <published>2018-11-08T17:44:11.000Z</published>
    <updated>2018-11-08T17:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p> 浏览器默认下载器下载百度云的文件速度大多不理想，非客户端下载限速，大文件下载中途失败，让人体验非常不友好。</p><a id="more"></a><p> 哈哈哈哈 </p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;浏览器默认下载器下载百度云的文件速度大多不理想，非客户端下载限速，大文件下载中途失败，让人体验非常不友好。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Aria2 加速百度网盘下载</title>
    <link href="https://www.playpi.org/2018110901.html"/>
    <id>https://www.playpi.org/2018110901.html</id>
    <published>2018-11-08T17:37:18.000Z</published>
    <updated>2018-11-08T17:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>在日常工作和生活当中，应该有不少人自愿或者被迫使用百度网盘，一是因为其它厂商基本都关停了网盘服务；二是在获取互联网资料的时候，基本都是先获取到百度网盘链接，然后自己再去下载；三是有时候想备份一些文件，也只能想起来有百度网盘可以使用。这样的话，慢慢地总是会碰到需要百度网盘的时候，我们暂且不考虑这家企业的口碑怎么样，百度网盘这个产品本身还是不错的：有免费的大量空间，使用人群多，分享获取资料方便。但是，产品让人诟病的地方也有几个，而且由此造成的用户体验非常差，大家骂声一片。本文就详细讲述百度网盘这个产品让人诟病的地方以及可以使用技术方式绕过它，从而提升自己的体验。当然，如果你的钱到位的话，直接充值会员吧，可以消除一切不好的使用体验，同时也免去了阅读本文的时间。</p><a id="more"></a><h1 id="使用中遇到的问题"><a href="# 使用中遇到的问题" class="headerlink" title="使用中遇到的问题"></a>使用中遇到的问题 </h1><p> 本文是针对不充会员的免费用户群体的，在 Windows 平台安装，在 Chrome 浏览器中使用。</p><h2 id="下载速度太慢，慢到反人类"><a href="# 下载速度太慢，慢到反人类" class="headerlink" title="下载速度太慢，慢到反人类"></a>下载速度太慢，慢到反人类 </h2><p> 让人诟病的问题之一是下载速度太慢了，对于免费用户基本维持在几 KB/s 到十几 KB/s 之间，也就是说如果你想下载一部 1 G 大小的电影，按照 1000 M 计算，下载速度按照 10 KB/s 算（取这样的数值方便后续计算），下载完需要 1000 个 100 秒，也就是约等于 27.78 个小时（10 万秒），所以在下载列表中经常看到下载任务还需要大于一天才能完成，这怎么让人受得了，不骂才怪呢！</p><p>但是只要充值会员，下载速度基本就暴增，可以完全利用宽带的带宽，例如 100 M 的宽带，下载速度可达 12.8 MB/s，哪怕只是 10 M 的宽带，下载速度也能到 1.28 MB/s。因此，百度网盘客户端对于免费用户限制速度限制得太严重了，不充值会员根本没法使用。而且，有时候勉强能使用的时候，经常会弹出会员试用 300 秒的提示，只要选择了，下载速度立马飞速提升，300 秒后又急速下降，经常下降到只有 3.14 KB/s，让人抓狂。</p><h2 id="网页版限制下载大文件，强迫安装百度网盘客户端"><a href="# 网页版限制下载大文件，强迫安装百度网盘客户端" class="headerlink" title="网页版限制下载大文件，强迫安装百度网盘客户端"></a>网页版限制下载大文件，强迫安装百度网盘客户端 </h2><p> 既然百度网盘客户端做了下载速度限制，那么大多数人会想到选择使用浏览器直接下载，同时又可以免去安装百度网盘客户端的麻烦，浏览器的下载速度通常在几百 KB/s，不会像百度网盘客户端那样特别地慢。但是，直接使用网页版的百度网盘下载文件，对文件大小有限制，太大的文件会被网页拦截，下载不了，而是弹出安装百度网盘客户端的提示，这样又回到了原点，因为如果用百度网盘客户端下载速度被限制了。</p><h1 id="解决问题"><a href="# 解决问题" class="headerlink" title="解决问题"></a>解决问题 </h1><h2 id="使用 -aria2- 突破线程数限制、下载速度限制"><a href="# 使用 -aria2- 突破线程数限制、下载速度限制" class="headerlink" title="使用 aria2 突破线程数限制、下载速度限制"></a> 使用 aria2 突破线程数限制、下载速度限制 </h2><h3 id="简介"><a href="# 简介" class="headerlink" title="简介"></a> 简介 </h3><p>Aria2 是一个多平台轻量级的下载工具，支持 Http、Ftp、BitTorrent、Web 资源等多种格式，使用命令行启动任务，更多具体信息查看官网说明：<a href="https://aria2.github.io" target="_blank" rel="noopener">Aria2 介绍</a>。这种工具可以最大程度利用你的网络带宽，实际上你可以自由配置，包括线程数、网络传输速度、RPC 端口、断点续传是否开启等。</p><h3 id="安装"><a href="# 安装" class="headerlink" title="安装"></a> 安装 </h3><p> 去官网下载安装包：<a href="https://github.com/aria2/aria2/releases" target="_blank" rel="noopener">Aria2 安装包 </a>，我的 Widows 系统 64 位，选择对应的安装包下载。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjctk362fj20ih0gdt90.jpg" alt="安装包下载" title="安装包下载"></p><p> 下载完成后，得到一个 zip 格式的文件，其实直接解压即可，不需要安装，解压后会得到一系列文件，为了方便管理，都放在 aria2 文件夹下面，再复制到程序对应的目录。其中，有一个 .exe 文件，就是运行任务时需要的文件。此外，为了方便起见，把 .exe 文件的路径配置到系统的环境变量中去，这样在任何目录都可以执行 aria2 命令了；如果不配置则只能在 aria2 目录中执行相关命令，否则会找不到程序。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjcyfaaw9j20in08kmxd.jpg" alt="解压" title="解压"></p><h3 id="配置"><a href="# 配置" class="headerlink" title="配置"></a>配置 </h3><p>1、如果单纯使用命令行启动下载任务，可以把参数信息直接跟在命令后面，临时生效，也就是参数只对当前下载任务有效。显然，这样做很麻烦，每次都是一长串的命令，而且当任务非常多的时候也无法管理，所以不建议使用这种方式。当然，如果只是测试折腾一下，或者也不经常使用，只是偶尔下载一个东西，还是用这种方式比较简介，不用管其它复杂的配置，不用管插件的安装。</p><p> 单命令行启动任务示例，从电影天堂下载《一出好戏》这部电影。如果下载百度网盘的文件，需要使用 <a href="https://chrome.google.com/webstore/detail/baiduexporter/jgebcefbdjhkhapijgbhkidaegoocbjj?hl=zh-CN" target="_blank" rel="noopener">baiduexporter</a> 插件生成 url，生成方式见后续步骤。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aria2c.exe -c -s32 -k32M -x16 -t1 -m0 --<span class="built_in">enable</span>-rpc=<span class="literal">true</span> 下载 url 取值 </span><br><span class="line">-t1 表示的是每隔 1 秒重试一次 </span><br><span class="line">-m0 表示的是重试设置</span><br><span class="line"> 此外，下载 url 中会包含 --header 的信息：User-Agent、Referer、Cookie、url</span><br><span class="line"> 理论上 User-Agent、Referer 应该时固定的，Cookie、url 每次会生成不一样的 </span><br><span class="line">User-Agent: netdisk;5.3.4.5;PC;PC-Windows;5.1.2600;WindowsBaiduYunGuanJia</span><br><span class="line">Referer: http://pan.baidu.com/disk/home</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjec4bt6kj20gj0ahgm8.jpg" alt="aria2 命令行参数" title="aria2 命令行参数"></p><p>2、如果是后台启动，通过其它管理插件来创建下载任务，则直接使用配置文件，文件名称为 aria2.conf，并在启动 aria2 时指定配置文件的位置。这样做的好处是使用一个配置文件就可以指定常用的参数配置，不用更改，每次下载文件前启动 aria2 即可。</p><p> 配置文件可选项如下，例如下载文件存放位置、是否开启 RPC、是否开启断点续传，具体更为详细的内容请参考文档：<a href="https://aria2.github.io/manual/en/html/index.html" target="_blank" rel="noopener">Aria2 配置信息文档 </a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## '#' 开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span></span><br><span class="line"><span class="comment">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span></span><br><span class="line"><span class="comment">## 文件保存相关 ##</span></span><br><span class="line"><span class="comment"># 文件的保存路径 (可使用绝对路径或相对路径), 默认: 当前启动位置</span></span><br><span class="line">dir=E:\\aria2download\\</span><br><span class="line"><span class="comment"># 启用磁盘缓存, 0 为禁用缓存, 需 1.16 以上版本, 默认: 16M</span></span><br><span class="line">disk-cache=32M</span><br><span class="line"><span class="comment"># 文件预分配方式, 能有效降低磁盘碎片, 默认: prealloc</span></span><br><span class="line"><span class="comment"># 预分配所需时间: none &lt; falloc &lt; trunc &lt; prealloc</span></span><br><span class="line"><span class="comment"># NTFS 建议使用 falloc</span></span><br><span class="line">file-allocation=none</span><br><span class="line"><span class="comment"># 断点续传</span></span><br><span class="line"><span class="built_in">continue</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载连接相关 ##</span></span><br><span class="line"><span class="comment"># 最大同时下载任务数, 运行时可修改, 默认: 5</span></span><br><span class="line">max-concurrent-downloads=32</span><br><span class="line"><span class="comment"># 同一服务器连接数, 添加时可指定, 默认: 1</span></span><br><span class="line">max-connection-per-server=5</span><br><span class="line"><span class="comment"># 最小文件分片大小, 添加时可指定, 取值范围 1M -1024M, 默认: 20M</span></span><br><span class="line"><span class="comment"># 假定 size=10M, 文件为 20MiB 则使用两个来源下载; 文件为 15MiB 则使用一个来源下载</span></span><br><span class="line">min-split-size=16M</span><br><span class="line"><span class="comment"># 单个任务最大线程数, 添加时可指定, 默认: 5</span></span><br><span class="line">split=32</span><br><span class="line"><span class="comment"># 整体下载速度限制, 运行时可修改, 默认: 0</span></span><br><span class="line"><span class="comment">#max-overall-download-limit=0</span></span><br><span class="line"><span class="comment"># 单个任务下载速度限制, 默认: 0</span></span><br><span class="line"><span class="comment">#max-download-limit=0</span></span><br><span class="line"><span class="comment"># 整体上传速度限制, 运行时可修改, 默认: 0</span></span><br><span class="line">max-overall-upload-limit=1M</span><br><span class="line"><span class="comment"># 单个任务上传速度限制, 默认: 0</span></span><br><span class="line"><span class="comment">#max-upload-limit=1000</span></span><br><span class="line"><span class="comment"># 禁用 IPv6, 默认: false</span></span><br><span class="line"><span class="built_in">disable</span>-ipv6=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 进度保存相关 ##</span></span><br><span class="line"><span class="comment"># 从会话文件中读取下载任务</span></span><br><span class="line">input-file=aria2.session</span><br><span class="line"><span class="comment"># 在 Aria2 退出时保存 ` 错误 / 未完成 ` 的下载任务到会话文件</span></span><br><span class="line">save-session=aria2.session</span><br><span class="line"><span class="comment"># 定时保存会话, 0 为退出时才保存, 需 1.16.1 以上版本, 默认: 0</span></span><br><span class="line"><span class="comment">#save-session-interval=60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## RPC 相关设置 ##</span></span><br><span class="line"><span class="comment"># 启用 RPC, 默认: false</span></span><br><span class="line"><span class="built_in">enable</span>-rpc=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许所有来源, 默认: false</span></span><br><span class="line">rpc-allow-origin-all=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许非外部访问, 默认: false</span></span><br><span class="line">rpc-listen-all=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span></span><br><span class="line"><span class="comment">#event-poll=select</span></span><br><span class="line"><span class="comment"># RPC 监听端口, 端口被占用时可以修改, 默认: 6800</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment"># 设置的 RPC 授权令牌, v1.18.4 新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span></span><br><span class="line"><span class="comment">#rpc-secret=mivm.cn</span></span><br><span class="line"><span class="comment"># 设置的 RPC 访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span></span><br><span class="line"><span class="comment">#rpc-user=&lt;USER&gt;</span></span><br><span class="line"><span class="comment"># 设置的 RPC 访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span></span><br><span class="line"><span class="comment">#rpc-passwd=&lt;PASSWD&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## BT/PT 下载相关 ##</span></span><br><span class="line"><span class="comment"># 当下载的是一个种子(以. torrent 结尾) 时, 自动开始 BT 任务, 默认: true</span></span><br><span class="line">follow-torrent=<span class="literal">true</span></span><br><span class="line"><span class="comment"># BT 监听端口, 当端口被屏蔽时使用, 默认: 6881-6999</span></span><br><span class="line">listen-port=51413</span><br><span class="line"><span class="comment"># 单个种子最大连接数, 默认: 55</span></span><br><span class="line"><span class="comment">#bt-max-peers=55</span></span><br><span class="line"><span class="comment"># 打开 DHT 功能, PT 需要禁用, 默认: true</span></span><br><span class="line"><span class="built_in">enable</span>-dht=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 打开 IPv6 DHT 功能, PT 需要禁用</span></span><br><span class="line"><span class="comment">#enable-dht6=false</span></span><br><span class="line"><span class="comment"># DHT 网络监听端口, 默认: 6881-6999</span></span><br><span class="line"><span class="comment">#dht-listen-port=6881-6999</span></span><br><span class="line"><span class="comment"># 本地节点查找, PT 需要禁用, 默认: false</span></span><br><span class="line"><span class="comment">#bt-enable-lpd=true</span></span><br><span class="line"><span class="comment"># 种子交换, PT 需要禁用, 默认: true</span></span><br><span class="line"><span class="built_in">enable</span>-peer-exchange=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 每个种子限速, 对少种的 PT 很有用, 默认: 50K</span></span><br><span class="line"><span class="comment">#bt-request-peer-speed-limit=50K</span></span><br><span class="line"><span class="comment"># 客户端伪装, PT 需要</span></span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"><span class="comment"># 当种子的分享率达到这个数时, 自动停止做种, 0 为一直做种, 默认: 1.0</span></span><br><span class="line">seed-ratio=0.1</span><br><span class="line"><span class="comment"># 强制保存会话, 即使任务已经完成, 默认: false</span></span><br><span class="line"><span class="comment"># 较新的版本开启后会在任务完成后依然保留. aria2 文件</span></span><br><span class="line"><span class="comment">#force-save=false</span></span><br><span class="line"><span class="comment"># BT 校验相关, 默认: true</span></span><br><span class="line"><span class="comment">#bt-hash-check-seed=true</span></span><br><span class="line"><span class="comment"># 继续之前的 BT 任务时, 无需再次校验, 默认: false</span></span><br><span class="line">bt-seed-unverified=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 保存磁力链接元数据为种子文件(.torrent 文件), 默认: false</span></span><br><span class="line"><span class="comment">#bt-save-metadata=true</span></span><br></pre></td></tr></table></figure><p> 配置完成后在启动 aria2 时指定配置文件的位置即可，例如我把 aria.conf 与 aria2c.exe 放在同一个文件夹下，则启动时直接指定 <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c.exe --conf-path=aria2.conf</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjeqk8oznj20l8096aai.jpg" alt="aria2 配置文件" title="aria2 配置文件"></p><p> 当然，这样做只是启动了 aria2，并没有开始创建下载任务，不像单个命令行那样简单，直接设置参数就起任务了。接下来还需要浏览器插件的配合，才能保证下载任务的创建与监控，虽然配置步骤麻烦一点，但是使用起来更为方便。</p><p>为了避免启动时还要输入命令行，在 Windows 平台下可以写一个 bat 脚本，每次双击脚本即可，以下脚本内容供参考：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; title Aria2</span><br><span class="line">aria2c.exe --conf-path=aria2.conf</span><br></pre></td></tr></table></figure><p></p><h3 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h3><p>1、使用命令行启动单个任务无需多做介绍，直接敲下命令行，等待文件下载就行了。如果需要连续下载多个文件，则唯一的做法就是多敲下几个命令，多等待而已。因此，这种方式不适合任务数量多的情况，那这种情况下显然是需要批量下载的，并且可以对下载任务进行管理，那就要看下面的一项了：后台起 aria2 服务。</p><p> 生成下载 url 的过程需要借助 <a href="https://chrome.google.com/webstore/detail/baiduexporter/jgebcefbdjhkhapijgbhkidaegoocbjj?hl=zh-CN" target="_blank" rel="noopener">baiduexporter</a>、<a href="https://chrome.google.com/webstore/detail/yaaw-for-chrome/dennnbdlpgjgbcjfgaohdahloollfgoc?hl=zh-CN" target="_blank" rel="noopener">YAAW for Chrome</a> 插件，直接从 Chrome 浏览器的插件商店搜索安装即可，如果无法翻墙，也可以从离线镜像库下载离线文件进行安装，离线库可以参考本站点的 <a href="https://www.playpi.org/about">关于页面 </a> 给出的工具链接。</p><p> 接下来描述使用方式，登录百度网盘账号，把需要下载的文件保存在自己的网盘中，选择需要下载的文件，然后可以看到本来的下载按钮旁边又多了导出下载按钮，包含几个选项：ARIA2 RPC、文本导出、设置。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjftqq3ugj210w0ejjs0.jpg" alt="Aria2 导出下载" title="Aria2 导出下载"></p><p>选择文本导出就会弹出当前下载文件的下载 url，复制粘贴到命令后即可直接下载该资源。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjfx3u157j21200ifmy2.jpg" alt="Aria2 文本导出" title="Aria2 文本导出"><br>导出的内容格式如下，当然实际使用的时候里面的参数也是可以更改的，但是下载 url 一定不不能变的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;path=%2F%E9%80%86%E5%90%91%E8%B5%84%E6%96%99%2FIDA%20Pro%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.pdf</span><br></pre></td></tr></table></figure><p>2、根据前面的描述，后台起了 aria2 服务，但是还没真正用起来，想要用起来，必须配合两个插件：<a href="https://chrome.google.com/webstore/detail/baiduexporter/jgebcefbdjhkhapijgbhkidaegoocbjj?hl=zh-CN" target="_blank" rel="noopener">baiduexporter</a>、<a href="https://chrome.google.com/webstore/detail/yaaw-for-chrome/dennnbdlpgjgbcjfgaohdahloollfgoc?hl=zh-CN" target="_blank" rel="noopener">YAAW for Chrome</a>。这 2 个插件中前者的作用是获取百度网盘的文件 url，这个 url 当然不是分享文件产生的 url，而是下载文件产生的 url；后者插件的作用是配合前者自动创建下载任务，实际下载利用的是已经启动的 aria2 后台，并时时监控任务状态，提供任务管理界面。</p><p>插件的安装不再赘述，接下来直接描述使用流程，要确保以上两个安装的插件都已经启用。根据上一步骤已经知道导出下载这个按钮，里面包含着一个 ARIA2 RPC 选项，这个选项就是直接使用 后台 aria2 服务创建下载任务，然后 YAAW for Chrome 插件监控着所有下载任务。</p><p>还有一个前提，就是启动 aria2 服务时要开启 RPC 模式。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 RPC, 默认: false</span></span><br><span class="line"><span class="built_in">enable</span>-rpc=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>这样做了之后，aria2 后台服务会开启一个端口，一般默认 6800（如果 aria2 更改了端口，YAAW for Chrome 也要做相应的配置），这个端口用来给 YAAW for Chrome 汇报下载任务的情况，并提供管理下载任务的接口，这样的话，直接通过 YAAW for Chrome 就可以通过可视化的方式创建、暂停、查看任务。</p><p>后台启动 aria2，开启 RPC 模式。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjg7ftepxj20gj0ahmxk.jpg" alt="后台启动 aria2" title="后台启动 aria2"></p><p>打开 YAAW for Chrome 插件查看端口配置信息。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjga6q57mj20y30kyaav.jpg" alt="YAAW 配置" title="YAAW 配置"></p><p>通过 baiduexporter 插件，直接选择 PRC 下载，再去 YAAW 界面刷新查看下载任务。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjgepy1l1j21400dcaao.jpg" alt="RPC 下载" title="RPC 下载"></p><p>可以看到，aria2 参数还没优化（线程数、分块大小设置），下载速度已经有将近 400 Kb/s 了。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjgfb0g00j21000cnq3b.jpg" alt="YAAW 查看任务" title="YAAW 查看任务"></p><h2 id="使用油猴插件绕过浏览器下载大文件的限制"><a href="# 使用油猴插件绕过浏览器下载大文件的限制" class="headerlink" title="使用油猴插件绕过浏览器下载大文件的限制"></a>使用油猴插件绕过浏览器下载大文件的限制 </h2><h3 id="现象"><a href="# 现象" class="headerlink" title="现象"></a> 现象 </h3><p> 还是刚才那个文件，文件大小只有 149 M，不想通过百度网盘客户端下载，只想通过网页版下载，那就直接点击下载按钮，发现被限制了，必须让你安装百度网盘客户端。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjglvadsdj212c0hzwff.jpg" alt="网页限制大文件" title="网页限制大文件"></p><p>本来还在想通过网页版直接下载，速度也不会很慢，但是被限制了，这个时候我们的万能插件要出场了：<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="noopener">Tampermonkey</a>，又称油猴、暴力猴。</p><h3 id="解决方式"><a href="# 解决方式" class="headerlink" title="解决方式"></a>解决方式 </h3><p> 使用万能的插件，屏蔽百度网盘网页版原来的网页内容，从而导致百度网盘的限制失效，这个插件就是 Tampermonkey：<a href="https://tampermonkey.net" target="_blank" rel="noopener">官网 </a>、<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="noopener">Chrome 浏览器插件商店</a>。</p><p> 这个插件的作用其实就是帮你管理各种自定义脚本，并运用在网页解析渲染中，从而实现对网页内容的改变，例如：去除网页的广告、去除百度搜索内容的广告条目、更改新浪微博展示界面。其中，也包括让百度网盘的下载文件大小限制失效，从而可以自由下载。</p><p>1、好，现在需要在插件的基础上安装一个脚本：百度网盘直接下载助手。要安装这个脚本，则首先需要找到它，选择获取新脚本，会引导我们进入脚本仓库。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjhpp1dbsj20ep0adt94.jpg" alt="获取新脚本" title="获取新脚本"></p><p>2、各种脚本仓库，我们选择 <a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">GreasyFork</a>。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjhs41z1sj20zd0q2dhg.jpg" alt="脚本仓库列表" title="脚本仓库列表"></p><p>3、在搜索框中搜索：百度网盘直接下载助手，选择其中一个。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjhuwpvohj20s70q2n18.jpg" alt="选择脚本" title="选择脚本"></p><p>4、安装选择的脚本。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjhwddpjgj20ro0q240i.jpg" alt="安装脚本" title="安装脚本"></p><p>5、可以看到脚本内容，点击安装。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjhyame9cj20xg0q2dht.jpg" alt="脚本内容" title="脚本内容"></p><p>6、安装完成后，选择管理面板可以查看已经安装的脚本以及是否启用，也可以删除或者二次编辑。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxji95kjl0j21hc0693yu.jpg" alt="管理面板" title="管理面板"></p><p>7、回到百度网盘，选择文件，可以看到多了一个下载助手选项，选择 API 下载，下载，即可使用浏览器直接下载，不会因为文件太大有网页的限制。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjidt1sdoj214a0q2ab1.jpg" alt="下载助手" title="下载助手"></p><p>8、当然，如果自己会写脚本，或者从别处直接复制的源脚本代码，在插件中选择添加新脚本，自己编辑即可。<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjhte0bjfj20i009yt96.jpg" alt="添加新脚本" title="添加新脚本"><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fxjigww3m8j20k00fv74q.jpg" alt="编辑脚本内容" title="编辑脚本内容"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在日常工作和生活当中，应该有不少人自愿或者被迫使用百度网盘，一是因为其它厂商基本都关停了网盘服务；二是在获取互联网资料的时候，基本都是先获取到百度网盘链接，然后自己再去下载；三是有时候想备份一些文件，也只能想起来有百度网盘可以使用。这样的话，慢慢地总是会碰到需要百度网盘的时候，我们暂且不考虑这家企业的口碑怎么样，百度网盘这个产品本身还是不错的：有免费的大量空间，使用人群多，分享获取资料方便。但是，产品让人诟病的地方也有几个，而且由此造成的用户体验非常差，大家骂声一片。本文就详细讲述百度网盘这个产品让人诟病的地方以及可以使用技术方式绕过它，从而提升自己的体验。当然，如果你的钱到位的话，直接充值会员吧，可以消除一切不好的使用体验，同时也免去了阅读本文的时间。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Aria2" scheme="https://www.playpi.org/tags/Aria2/"/>
    
      <category term="百度网盘" scheme="https://www.playpi.org/tags/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>WPS 关闭广告推送与自动升级</title>
    <link href="https://www.playpi.org/2018110301.html"/>
    <id>https://www.playpi.org/2018110301.html</id>
    <published>2018-11-03T14:13:55.000Z</published>
    <updated>2018-12-12T14:13:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --><p>在工作和生活中，很多人使用金山的 WPS 套件，类似于微软的 Office 套件，而且是免费的。但是很多人会遇到 <strong>广告推送 </strong>或者 <strong>WPS 热点推送 </strong>，每隔几天就会出现，有时候可以点击七天内不再出现，便可以清静几天，而且碍于是免费版本，不想购买会员，于是也就忍了。其实，WPS 自身是有设置可以关闭 <strong>广告推送 </strong>的，当然也可以关闭 <strong>WPS 热点推送 </strong>。</p><a id="more"></a><h1 id="WPS- 的弹框"><a href="#WPS- 的弹框" class="headerlink" title="WPS 的弹框"></a>WPS 的弹框 </h1><p> 以下现象描述与截图均出自版本：WPS 2019，v11.1.0.8013 - Release 正式版。操作系统为：Windows 2007 专业版。</p><p>在使用 WPS 的过程中，经常遇到广告推送与 WPS 热点推送，觉得很受打扰，但是碍于使用的是免费软件，又只能忍受。我一直在想以前是有设置可以关闭的，后来升级了就找不到是在哪里设置的了，后来又查阅了资料，发现果然是有地方可以设置的，只不过隐藏的太深了，不好寻找而已。接下来就一步一步说明具体设置步骤。</p><h1 id="设置关闭"><a href="# 设置关闭" class="headerlink" title="设置关闭"></a>设置关闭 </h1><p> 如果你在互联网上搜索 WPS 广告推送相关话题，可以看到大量的帖子（或者说是方法教程）已经整理出了各种方案，可以帮你解决这个问题，例如：直接更改 WPS 安装目录中的某些文件、利用杀毒软件屏蔽广告推送、直接设置 WPS 等等。显然，前 2 种方案是在走弯路，而最后一种方案才是最简单直接的。</p><p>1、打开 WPS 主页，在右上角找到 <strong>设置 </strong>按钮；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4crah9c4j217w0n60u6.jpg" alt="WPS 的设置" title="WPS 的设置"></p><p>2、点击 <strong>设置 </strong>，选择 <strong>配置和修复工具 </strong>；</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4csqhjngj21ag0md760.jpg" alt="WPS 的配置和修复工具" title="WPS 的配置和修复工具"></p><p>3、在弹出的对话框中选择 <strong>高级 </strong>；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4cuavhshj20jt0d80u2.jpg" alt="WPS 的高级配置" title="WPS 的高级配置"></p><p>4、选择对话框的 <strong>其它选项 </strong>标签页，取消截图中的 3 项勾选，即同时关闭 <strong>升级完成后推荐精选软件 </strong>、<strong> 订阅 WPS 热点 </strong>、<strong> 接受广告推送 </strong>；<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4cw03l87j20lc0l10tw.jpg" alt="WPS 关闭广告推送" title="WPS 关闭广告推送"></p><p>此外，进入步骤 3 也可以直接通过系统的安装程序列表（开始 –&gt; 所有程序 –&gt;WPS Office–&gt;WPS Office 工具 –&gt; 配置工具），步骤如下图：<br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4d3nem66j20e70qegos.jpg" alt="系统的所有程序" title="系统的所有程序"><br><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4d2sadeoj20ec0qjtck.jpg" alt="找到 WPS 的配置工具" title="找到 WPS 的配置工具"></p><p>按照以上步骤设置， WPS 就不再会弹出广告推送和 WPS 热点推送了，亲测有效。</p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a>注意事项 </h1><p>1、说实话，我是没想到这个设置会隐藏的这么深，但至少暴露出来了；</p><p>2、要注意版本区别，可能每个版本的设置步骤有所不同，而且也不排除以后更新的版本会取消这些设置选项，或者隐藏的更深。当然，如果 WPS 找到了其它盈利方式，也可能会取消这些广告推送；</p><p>3、WPS 每次更新后，上述设置会还原，也就是又回到默认开启的状态，此时需要重新设置一次。当然，为了以后不会莫名其妙又弹出广告推送，可以直接关闭自动升级（和前面关闭广告的步骤一致，但是选择的是 <strong> 升级设置 </strong>标签页），以后想升级的时候再手动升级。</p><p><img src="https://ws1.sinaimg.cn/large/b7f2e3a3gy1fy4cflpmajj20lc0l10u0.jpg" alt="关闭自动升级" title="关闭自动升级"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 26 2018 01:51:39 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在工作和生活中，很多人使用金山的 WPS 套件，类似于微软的 Office 套件，而且是免费的。但是很多人会遇到 &lt;strong&gt;广告推送 &lt;/strong&gt;或者 &lt;strong&gt;WPS 热点推送 &lt;/strong&gt;，每隔几天就会出现，有时候可以点击七天内不再出现，便可以清静几天，而且碍于是免费版本，不想购买会员，于是也就忍了。其实，WPS 自身是有设置可以关闭 &lt;strong&gt;广告推送 &lt;/strong&gt;的，当然也可以关闭 &lt;strong&gt;WPS 热点推送 &lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="WPS" scheme="https://www.playpi.org/tags/WPS/"/>
    
      <category term="关闭广告推送" scheme="https://www.playpi.org/tags/%E5%85%B3%E9%97%AD%E5%B9%BF%E5%91%8A%E6%8E%A8%E9%80%81/"/>
    
      <category term="关闭自动升级" scheme="https://www.playpi.org/tags/%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
</feed>
