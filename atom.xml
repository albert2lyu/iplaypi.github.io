<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>虾丸派</title>
  
  <subtitle>烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.playpi.org/"/>
  <updated>2020-01-21T17:58:33.000Z</updated>
  <id>https://www.playpi.org/</id>
  
  <author>
    <name>虾丸派</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark 警告：Not enough space to cache rdd in memory</title>
    <link href="https://www.playpi.org/2020012201.html"/>
    <id>https://www.playpi.org/2020012201.html</id>
    <published>2020-01-21T17:58:33.000Z</published>
    <updated>2020-01-21T17:58:33.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在常规的 <code>Spark</code> 任务中，出现警告：<code>Not enough space to cache rdd_0_255 in memory! (computed 8.3 MB so far)</code>，接着任务就卡住，等了很久最终 <code>Spark</code> 任务失败。排查到原因是 <code>RDD</code> 缓存的时候内存不够，无法继续处理数据，等待资源释放，最终导致假死现象。本文中的开发环境基于 <code>Spark v1.6.2</code>。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 在服务器上面执行一个简单的 <code>Spark</code> 任务，代码逻辑里面有 <code>rdd.cache ()</code> 操作，结果在日志中出现类似如下的警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">01:35:42.207 [Executor task launch worker-4] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_28 as it would require dropping another block from the same RDD</span><br><span class="line">01:35:42.211 [Executor task launch worker-4] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_28 in memory! (computed 340.2 MB so far)</span><br><span class="line">01:35:42.213 [Executor task launch worker-4] INFO  org.apache.spark.storage.MemoryStore - Memory use = 8.3 KB (blocks) + 4.9 GB (scratch space shared across 106 tasks (s)) = 4.9 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:35:49.104 [Executor task launch worker-0] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_15 as it would require dropping another block from the same RDD</span><br><span class="line">01:35:49.105 [Executor task launch worker-0] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_15 in memory! (computed 341.4 MB so far)</span><br><span class="line">01:35:49.105 [Executor task launch worker-0] INFO  org.apache.spark.storage.MemoryStore - Memory use = 8.3 KB (blocks) + 4.9 GB (scratch space shared across 106 tasks (s)) = 4.9 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:35:51.375 [Executor task launch worker-11] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_33 as it would require dropping another block from the same RDD</span><br><span class="line">01:35:51.375 [Executor task launch worker-11] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_33 in memory! (computed 341.4 MB so far)</span><br><span class="line">01:35:51.376 [Executor task launch worker-11] INFO  org.apache.spark.storage.MemoryStore - Memory use = 8.3 KB (blocks) + 4.9 GB (scratch space shared across 106 tasks (s)) = 4.9 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:35:52.188 [Executor task launch worker-12] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_48 as it would require dropping another block from the same RDD</span><br><span class="line">01:35:52.188 [Executor task launch worker-12] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_48 in memory! (computed 341.4 MB so far)</span><br><span class="line">01:35:52.189 [Executor task launch worker-12] INFO  org.apache.spark.storage.MemoryStore - Memory use = 8.3 KB (blocks) + 4.9 GB (scratch space shared across 106 tasks (s)) = 4.9 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:35:52.213 [Executor task launch worker-6] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_58 as it would require dropping another block from the same RDD</span><br><span class="line">01:35:52.213 [Executor task launch worker-6] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_58 in memory! (computed 342.6 MB so far)</span><br><span class="line">01:35:52.214 [Executor task launch worker-6] INFO  org.apache.spark.storage.MemoryStore - Memory use = 8.3 KB (blocks) + 4.9 GB (scratch space shared across 106 tasks (s)) = 4.9 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:35:56.619 [Executor task launch worker-2] INFO  org.apache.spark.storage.MemoryStore - Block rdd_0_41 stored as values in memory (estimated size 378.7 MB, free 378.7 MB)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2020/20200122021258.png" alt="Storage 内存不足警告" title="Storage 内存不足警告"></p><p>看起来这只是一个警告，显示 <code>Storage</code> 内存不足，无法进行 <code>rdd.cache ()</code>，等待一段时间之后，<code>Spark</code> 任务的部分 <code>Task</code> 可以接着运行。</p><p>但是后续还是会发生同样的事情：内存不足，导致 <code>Task</code> 一直在等待，最后假死【或者说 <code>Spark</code> 任务基本卡住不动】。</p><p>里面有一个明显的提示：<code>Storage limit = 5.0 GB.</code>，也就是 <code>Storage</code> 的上限是 <code>5GB</code>。</p><h1 id="问题分析解决"><a href="# 问题分析解决" class="headerlink" title="问题分析解决"></a>问题分析解决 </h1><p> 查看业务代码，里面有一个：<code>rdd.cache ();</code> 操作，显然会占用大量的内存。</p><p>查看官方文档的配置：<a href="https://spark.apache.org/docs/1.6.2/configuration.html" target="_blank" rel="noopener">1.6.2-configuration</a> ，里面有一个重要的参数：<code>spark.storage.memoryFraction</code>，它是一个系数，决定着缓存上限的大小。</p><blockquote><p>(deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of Java heap to use for Spark’s memory cache. This should not be larger than the “old” generation of objects in the JVM, which by default is given 0.6 of the heap, but you can increase it if you configure your own old generation size.</p></blockquote><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2020/20200122023358.png" alt="memoryFraction 参数" title="memoryFraction 参数"></p><p>另外还有 2 个相关的参数，读者也可以了解一下。</p><p>读者可以注意到，官方是不建议使用这个参数的，也就是不建议变更。当然如果你非要使用也是可以的，可以提高系数的值，这样的话缓存的空间就会变多。显然这样做不合理。</p><p>那有没有别的方法了呢？有！当然有。</p><p>主要是从缓存的方式入手，不要直接使用 <code>rdd.cache ()</code>，而是通过序列化 <code>RDD</code> 数据：<code>rdd.persist (StorageLevel.MEMORY_ONLY_SER)</code>，减少空间的占用，或者直接缓存一部分数据到磁盘：<code>rdd.persist (StorageLevel.MEMORY_AND_DISK)</code>，避免内存不足。</p><p>我下面演示使用后者，即直接缓存一部分数据到磁盘，当然，使用这种方式，<code>Spark</code> 任务执行速度肯定是慢了不少。</p><p>我这里测试后，得到的结果：耗时是以前的 3 倍【可以接受】。</p><p>再接着执行 <code>Spark</code> 任务，日志中还是会出现上述警告：<code>Not enough space to cache rdd in memory!</code>，但是接着会提示数据被缓存到磁盘了：<code>Persisting partition rdd_0_342 to disk instead.</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">01:55:24.414 [Executor task launch worker-3] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_342 as it would require dropping another block from the same RDD</span><br><span class="line">01:55:24.414 [Executor task launch worker-3] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_342 in memory! (computed 96.8 MB so far)</span><br><span class="line">01:55:24.414 [Executor task launch worker-3] INFO  org.apache.spark.storage.MemoryStore - Memory use = 3.0 GB (blocks) + 2.0 GB (scratch space shared across 339 tasks (s)) = 5.0 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:55:24.414 [Executor task launch worker-3] WARN  org.apache.spark.CacheManager - Persisting partition rdd_0_342 to disk instead.</span><br><span class="line">01:55:33.262 [Executor task launch worker-12] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_229 as it would require dropping another block from the same RDD</span><br><span class="line">01:55:33.262 [Executor task launch worker-12] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_229 in memory! (computed 342.6 MB so far)</span><br><span class="line">01:55:33.262 [Executor task launch worker-12] INFO  org.apache.spark.storage.MemoryStore - Memory use = 3.0 GB (blocks) + 2.0 GB (scratch space shared across 339 tasks (s)) = 5.0 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:55:33.262 [Executor task launch worker-12] WARN  org.apache.spark.CacheManager - Persisting partition rdd_0_229 to disk instead.</span><br><span class="line">01:55:40.247 [Executor task launch worker-13] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_254 as it would require dropping another block from the same RDD</span><br><span class="line">01:55:40.248 [Executor task launch worker-13] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_254 in memory! (computed 18.0 MB so far)</span><br><span class="line">01:55:40.248 [Executor task launch worker-13] INFO  org.apache.spark.storage.MemoryStore - Memory use = 3.0 GB (blocks) + 2.0 GB (scratch space shared across 339 tasks (s)) = 5.0 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:55:40.248 [Executor task launch worker-13] WARN  org.apache.spark.CacheManager - Persisting partition rdd_0_254 to disk instead.</span><br><span class="line">01:56:28.062 [dispatcher-event-loop-9] INFO  o.a.spark.storage.BlockManagerInfo - Added rdd_0_255 on disk on localhost:55066 (size: 146.4 MB)</span><br><span class="line">01:56:28.194 [Executor task launch worker-1] INFO  org.apache.spark.storage.MemoryStore - Will not store rdd_0_255 as it would require dropping another block from the same RDD</span><br><span class="line">01:56:28.194 [Executor task launch worker-1] WARN  org.apache.spark.storage.MemoryStore - Not enough space to cache rdd_0_255 in memory! (computed 8.3 MB so far)</span><br><span class="line">01:56:28.194 [Executor task launch worker-1] INFO  org.apache.spark.storage.MemoryStore - Memory use = 3.0 GB (blocks) + 2.0 GB (scratch space shared across 339 tasks (s)) = 5.0 GB. Storage limit = 5.0 GB.</span><br><span class="line">01:56:28.194 [Executor task launch worker-1] INFO  o.apache.spark.storage.BlockManager - Found block rdd_0_255 locally</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2020/20200122024437.png" alt="一部分数据被缓存到磁盘" title="一部分数据被缓存到磁盘"></p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注 </h1><p> 综上所述，有三种方式可以解决这个问题：</p><ul><li>提高缓存空间系数：<code>spark.storage.memoryFraction</code>【不建议】</li><li>使用序列化 <code>RDD</code> 数据的方式：<code>rdd.persist (StorageLevel.MEMORY_ONLY_SER)</code></li><li>使用磁盘缓存的方式：<code>rdd.persist (StorageLevel.MEMORY_AND_DISK)</code></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在常规的 &lt;code&gt;Spark&lt;/code&gt; 任务中，出现警告：&lt;code&gt;Not enough space to cache rdd_0_255 in memory! (computed 8.3 MB so far)&lt;/code&gt;，接着任务就卡住，等了很久最终 &lt;code&gt;Spark&lt;/code&gt; 任务失败。排查到原因是 &lt;code&gt;RDD&lt;/code&gt; 缓存的时候内存不够，无法继续处理数据，等待资源释放，最终导致假死现象。本文中的开发环境基于 &lt;code&gt;Spark v1.6.2&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="cache" scheme="https://www.playpi.org/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>写入 Elasticsearch 异常：413 Request Entity Too Large</title>
    <link href="https://www.playpi.org/2019122901.html"/>
    <id>https://www.playpi.org/2019122901.html</id>
    <published>2019-12-29T15:53:41.000Z</published>
    <updated>2019-12-29T15:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在一个非常简单的业务场景中，偶尔出现异常：<code>413 Request Entity Too Large</code>，业务场景是写入数据到 <code>Elasticsearch</code> 中，异常日志中还有 <code>Nginx</code> 字样。</p><p>本文记录排查过程，本文环境基于 <code>Elasticsearch v5.6.8</code>，使用的写入客户端是 <code>elasticsearch-rest-high-level-client-5.6.8.jar</code>。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 在后台日志中，发现异常信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">19/12/29 23:06:41 ERROR ESBulkProcessor: bulk [2307 : 1577632001467] 1000 request - 0 response - Unable to parse response body</span><br><span class="line">ElasticsearchStatusException [Unable to parse response body]; nested: ResponseException [POST http://your_ip_address:9200/_bulk?timeout=1m: HTTP/1.1 413 Request Entity Too Large</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;413 Request Entity Too Large&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;413 Request Entity Too Large&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.16.1&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">];</span><br><span class="line">at org.elasticsearch.client.RestHighLevelClient.parseResponseException (RestHighLevelClient.java:506)</span><br><span class="line">at org.elasticsearch.client.RestHighLevelClient$1.onFailure (RestHighLevelClient.java:477)</span><br><span class="line">at org.elasticsearch.client.RestClient$FailureTrackingResponseListener.onDefinitiveFailure (RestClient.java:605)</span><br><span class="line">at org.elasticsearch.client.RestClient$1.completed (RestClient.java:362)</span><br><span class="line">at org.elasticsearch.client.RestClient$1.completed (RestClient.java:343)</span><br><span class="line">at org.apache.http.concurrent.BasicFuture.completed (BasicFuture.java:115)</span><br><span class="line">at org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl.responseCompleted (DefaultClientExchangeHandlerImpl.java:173)</span><br><span class="line">at org.apache.http.nio.protocol.HttpAsyncRequestExecutor.processResponse (HttpAsyncRequestExecutor.java:355)</span><br><span class="line">at org.apache.http.nio.protocol.HttpAsyncRequestExecutor.inputReady (HttpAsyncRequestExecutor.java:242)</span><br><span class="line">at org.apache.http.impl.nio.client.LoggingAsyncRequestExecutor.inputReady (LoggingAsyncRequestExecutor.java:87)</span><br><span class="line">at org.apache.http.impl.nio.DefaultNHttpClientConnection.consumeInput (DefaultNHttpClientConnection.java:264)</span><br><span class="line">at org.apache.http.impl.nio.client.InternalIODispatch.onInputReady (InternalIODispatch.java:73)</span><br><span class="line">at org.apache.http.impl.nio.client.InternalIODispatch.onInputReady (InternalIODispatch.java:37)</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractIODispatch.inputReady (AbstractIODispatch.java:113)</span><br><span class="line">at org.apache.http.impl.nio.reactor.BaseIOReactor.readable (BaseIOReactor.java:159)</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent (AbstractIOReactor.java:338)</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents (AbstractIOReactor.java:316)</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractIOReactor.execute (AbstractIOReactor.java:277)</span><br><span class="line">at org.apache.http.impl.nio.reactor.BaseIOReactor.execute (BaseIOReactor.java:105)</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run (AbstractMultiworkerIOReactor.java:584)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">Suppressed: java.lang.IllegalStateException: Unsupported Content-Type: text/html</span><br><span class="line">at org.elasticsearch.client.RestHighLevelClient.parseEntity (RestHighLevelClient.java:523)</span><br><span class="line">at org.elasticsearch.client.RestHighLevelClient.parseResponseException (RestHighLevelClient.java:502)</span><br><span class="line">... 20 more</span><br><span class="line">Caused by: org.elasticsearch.client.ResponseException: POST http://your_ip_address:9200/_bulk?timeout=1m: HTTP/1.1 413 Request Entity Too Large</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;413 Request Entity Too Large&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;413 Request Entity Too Large&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.16.1&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">at org.elasticsearch.client.RestClient$1.completed (RestClient.java:354)</span><br><span class="line">... 17 more</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191230002704.jpg" alt="异常信息" title="异常信息"></p><p>留意重点内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;413 Request Entity Too Large&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;413 Request Entity Too Large&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.16.1&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>看起来是发送的 <code>HTTP</code> 请求的请求体【<code>body</code>】过大，超过了服务端 <code>Nginx</code> 的配置，导致返回异常。</p><p>这个请求体过大，本质上还是将要写入 <code>Elasticsearch</code> 的文档过大，可见是某个字段的取值过大【这种情况一般都是异常数据导致的，例如采集系统把整个网页的内容全部抓回来作为正文，或者把网站反扒的干扰长文本全部抓回来作为正文】。</p><p>但是我又不禁想，这个配置参数名是什么呢？限制的最大字节数是多少呢？</p><h1 id="问题排查解决"><a href="# 问题排查解决" class="headerlink" title="问题排查解决"></a>问题排查解决 </h1><p> 在 <code>Elasticsearch</code> 官网查看相关配置项，发现有一个参数：<code>http.max_content_length</code>，表示一个 <code>HTTP</code> 请求的内容大小上限，默认为 <code>100MB</code>【对于 <code>v5.6</code> 来说】。</p><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-http.html" target="_blank" rel="noopener">elasticsearch 关于 HTTP 的配置 </a> ，以下为参数说明：</p><blockquote><p>The max content of an HTTP request. Defaults to 100mb. If set to greater than Integer.MAX_VALUE, it will be reset to 100mb.</p></blockquote><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191230005435.jpg" alt="HTTP 相关配置" title="HTTP 相关配置"></p><p> 这个参数是配置在 <code>elasticsearch.yml</code> 配置文件中的，我查看了我使用的 <code>Elasticsearch</code> 集群中对应的配置，没有发现参数的设置，说明使用了默认配置。</p><p>其实，<code>100MB</code> 对于文本来说很大了，一般正常的文本也不过只有几 <code>KB</code> 大小，对于长一点的文本来说，例如几万个字符，也就是几百 <code>KB</code>。由于写入 <code>Elasticsearch</code> 是批量的，1000 条数据一批，如果一批里面包含的全部是长文本，还是有可能超过 <code>100MB</code> 的，可见调整 <code>HTTP</code> 请求大小的上限是有必要的，或者是降低批次的数据量【会影响写入性能】。</p><p>此外，关于 <code>HTTP</code> 的另外两个参数也值得关注：<code>http.max_initial_line_length</code>、<code>http.max_header_size</code>。</p><p>前者表示 <code>HTTP</code> 请求链接的长度，默认为 <code>4KB</code>：</p><blockquote><p>The max length of an HTTP URL. Defaults to 4kB</p></blockquote><p>后者表示 <code>HTTP</code> 请求头的大小上限，默认为 <code>8KB</code>：</p><blockquote><p>The max size of allowed headers. Defaults to 8kB</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在一个非常简单的业务场景中，偶尔出现异常：&lt;code&gt;413 Request Entity Too Large&lt;/code&gt;，业务场景是写入数据到 &lt;code&gt;Elasticsearch&lt;/code&gt; 中，异常日志中还有 &lt;code&gt;Nginx&lt;/code&gt; 字样。&lt;/p&gt;&lt;p&gt;本文记录排查过程，本文环境基于 &lt;code&gt;Elasticsearch v5.6.8&lt;/code&gt;，使用的写入客户端是 &lt;code&gt;elasticsearch-rest-high-level-client-5.6.8.jar&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="Elasticsearch" scheme="https://www.playpi.org/tags/Elasticsearch/"/>
    
      <category term="HTTP" scheme="https://www.playpi.org/tags/HTTP/"/>
    
      <category term="RestHighLevelClient" scheme="https://www.playpi.org/tags/RestHighLevelClient/"/>
    
  </entry>
  
  <entry>
    <title>Spark 项目依赖冲突问题总结</title>
    <link href="https://www.playpi.org/2019112901.html"/>
    <id>https://www.playpi.org/2019112901.html</id>
    <published>2019-11-29T12:05:46.000Z</published>
    <updated>2019-11-29T12:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>今天遇到一个常见的依赖冲突问题，在一个 <code>Spark</code> 项目中，引用了多个其它项目的公共包【例如公共 <code>elt</code> 模块、算法模块】，在提交运行 <code>Spark</code> 任务时，由于依赖冲突而失败，高低版本无法兼容。</p><p>本文记录问题解决过程以及经验总结，重要开发环境说明：<code>Spark v1.6</code>、<code>es-hadoop v5.6.8</code>、<code>kafka v0.9.x</code> 。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 在一个 <code>SparkStreaming</code> 项目中，由于业务需要而新增加了算法模块的依赖【公司开放的公共 <code>jar</code> 包】，结果无法正常运行，根本原因在于依赖包冲突，版本无法完全匹配。</p><p>下面简单描述一下各种现象，这当然是为了给读者参考才这么做的，在实际开发过程中如果也这么尝试是很浪费时间的【当然对于初学者还是很有必要的，实际踩坑才知道痛苦】。</p><p>在一开始，添加算法模块的依赖后，使用本地 <code>local</code> 模式试运行程序正常，相关算法接口可用，但是当提交任务到 <code>Spark</code> 集群后【<code>standalone</code> 模式】，提交任务失败，出现 <code>kryo</code> 序列化异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2019-11-26_18:00:32 [task-result-getter-0] WARN scheduler.TaskSetManager:70: Lost task 0.0 in stage 0.0 (TID 0, dev4): java.io.EOFException</span><br><span class="line">at org.apache.spark.serializer.KryoDeserializationStream.readObject (KryoSerializer.scala:232)</span><br><span class="line">at org.apache.spark.broadcast.TorrentBroadcast$.unBlockifyObject (TorrentBroadcast.scala:217)</span><br><span class="line">at org.apache.spark.broadcast.TorrentBroadcast$$anonfun$readBroadcastBlock$1.apply (TorrentBroadcast.scala:178)</span><br><span class="line">at org.apache.spark.util.Utils$.tryOrIOException (Utils.scala:1205)</span><br><span class="line">at org.apache.spark.broadcast.TorrentBroadcast.readBroadcastBlock (TorrentBroadcast.scala:165)</span><br><span class="line">at org.apache.spark.broadcast.TorrentBroadcast._value$lzycompute (TorrentBroadcast.scala:64)</span><br><span class="line">at org.apache.spark.broadcast.TorrentBroadcast._value (TorrentBroadcast.scala:64)</span><br><span class="line">at org.apache.spark.broadcast.TorrentBroadcast.getValue (TorrentBroadcast.scala:88)</span><br><span class="line">at org.apache.spark.broadcast.Broadcast.value (Broadcast.scala:70)</span><br><span class="line">at org.apache.spark.scheduler.ResultTask.runTask (ResultTask.scala:62)</span><br><span class="line">at org.apache.spark.scheduler.Task.run (Task.scala:89)</span><br><span class="line">at org.apache.spark.executor.Executor$TaskRunner.run (Executor.scala:227)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2018/20191201000221.png" alt="启动 Spark 任务失败" title="启动 Spark 任务失败"></p><p>经过简单排查，上述错误的原因在于 <code>Spark</code> 需要依赖 <code>kryo v2.21</code>，而算法模块里面依赖了 <code>kryo v4.0.1</code>，在多版本同时存在的情况下，<code>Java</code> 类加载器加载到了高版本的 <code>kryo</code>【当然先加载到哪个类不确定，但是由前面的现象可以判定先加载了高版本的 <code>jar</code> 包】，导致 <code>Spark</code> 不兼容。</p><p>进一步想到可以将算法模块中的高版本 <code>kryo</code> 排除【当然此时没有考虑这样做对算法接口的影响】，我还就这么做了，又试了一次，结果出现以下异常【敏感包名使用 <code>xxx.yyy</code> 替换】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at org.apache.dubbo.common.bytecode.Wrapper0.invokeMethod (Wrapper0.java)</span><br><span class="line">at com.xxx.yyy.consumer.proxy.JavassistProxyFactory$1.doInvoke (JavassistProxyFactory.java:28)</span><br><span class="line">at com.xxx.yyy.consumer.proxy.AbstractProxyInvoker.doInvoke (AbstractProxyInvoker.java:57)</span><br><span class="line">at com.xxx.yyy.consumer.metric.ThanosConsumerMetric.makeMetric (ThanosConsumerMetric.java:90)</span><br><span class="line">at com.xxx.yyy.consumer.proxy.AbstractProxyInvoker.invoke (AbstractProxyInvoker.java:53)</span><br><span class="line">at com.xxx.yyy.consumer.proxy.InvokerInvocationHandler.invoke (InvokerInvocationHandler.java:36)</span><br><span class="line">at org.apache.dubbo.common.bytecode.proxy1.classify (proxy1.java)</span><br><span class="line">at com.xxx.zzz.analyz.rpc.ThanosRpcAlgorithmAnalyzer.classify (ThanosRpcAlgorithmAnalyzer.java:50)</span><br><span class="line">at com.xxx.zzz.analyz.rpc.ThanosRpcAlgorithmAnalyzer.classify (ThanosRpcAlgorithmAnalyzer.java:55)</span><br><span class="line">at com.xxx.zzz.analyz.rpc.ThanosRpcAlgorithmAnalyzer.main (ThanosRpcAlgorithmAnalyzer.java:70)</span><br><span class="line">Caused by: org.apache.dubbo.rpc.RpcException: Failed to invoke the method classify in the service com.xxx.yyy.service.Classifier. Tried 3 times of the providers [172.18.5.66:31142, 172.18.5.145:31142] (2/2) from the registry dev3:2181 on the consumer 172.18.7.203 using the dubbo version 2.7.3. Last error is: Failed to invoke remote method: classify, provider: dubbo://172.18.5.145:31142/com.xxx.yyy.service.Classifier?application=xxx-rpc-consumer&amp;check=false&amp;cluster=backpressure&amp;deprecated=false&amp;dubbo=2.0.2&amp;interface=com.xxx.yyy.service.Classifier&amp;lazy=false&amp;loadbalance=leastactive&amp;pid=10388&amp;qos.enable=false&amp;reference.filter=requestid,activelimit&amp;register.ip=172.18.7.203&amp;release=2.7.3&amp;remote.application=xxx-rpc-provider&amp;retries=2&amp;revision=0.1-20191122.093730-4&amp;serialization=kryo&amp;side=consumer&amp;sticky=false&amp;timeout=2147483647&amp;timestamp=1574327320883&amp;weight=16, cause: org.apache.dubbo.remoting.RemotingException: io.netty.handler.codec.EncoderException: java.lang.NoClassDefFoundError: com/esotericsoftware/kryo/pool/KryoFactory</span><br><span class="line">io.netty.handler.codec.EncoderException: java.lang.NoClassDefFoundError: com/esotericsoftware/kryo/pool/KryoFactory</span><br><span class="line">at io.netty.handler.codec.MessageToByteEncoder.write (MessageToByteEncoder.java:125)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:658)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:716)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:651)</span><br><span class="line">at io.netty.handler.timeout.IdleStateHandler.write (IdleStateHandler.java:266)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:658)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:716)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:651)</span><br><span class="line">at io.netty.channel.ChannelDuplexHandler.write (ChannelDuplexHandler.java:106)</span><br><span class="line">at org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.write (NettyClientHandler.java:87)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:658)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.access$2000 (AbstractChannelHandlerContext.java:32)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.write (AbstractChannelHandlerContext.java:939)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write (AbstractChannelHandlerContext.java:991)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run (AbstractChannelHandlerContext.java:924)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks (SingleThreadEventExecutor.java:380)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.run (NioEventLoop.java:357)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$2.run (SingleThreadEventExecutor.java:116)</span><br><span class="line">at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run (DefaultThreadFactory.java:137)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">Caused by: java.lang.NoClassDefFoundError: com/esotericsoftware/kryo/pool/KryoFactory</span><br><span class="line">at java.lang.ClassLoader.defineClass1 (Native Method)</span><br><span class="line">at java.lang.ClassLoader.defineClass (ClassLoader.java:763)</span><br><span class="line">at java.security.SecureClassLoader.defineClass (SecureClassLoader.java:142)</span><br><span class="line">at java.net.URLClassLoader.defineClass (URLClassLoader.java:467)</span><br><span class="line">at java.net.URLClassLoader.access$100 (URLClassLoader.java:73)</span><br><span class="line">at java.net.URLClassLoader$1.run (URLClassLoader.java:368)</span><br><span class="line">at java.net.URLClassLoader$1.run (URLClassLoader.java:362)</span><br><span class="line">at java.security.AccessController.doPrivileged (Native Method)</span><br><span class="line">at java.net.URLClassLoader.findClass (URLClassLoader.java:361)</span><br><span class="line">at java.lang.ClassLoader.loadClass (ClassLoader.java:424)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass (Launcher.java:349)</span><br><span class="line">at java.lang.ClassLoader.loadClass (ClassLoader.java:357)</span><br><span class="line">at org.apache.dubbo.common.serialize.kryo.KryoObjectOutput.&lt;init&gt;(KryoObjectOutput.java:39)</span><br><span class="line">at org.apache.dubbo.common.serialize.kryo.KryoSerialization.serialize (KryoSerialization.java:51)</span><br><span class="line">at org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest (ExchangeCodec.java:234)</span><br><span class="line">at org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encode (ExchangeCodec.java:69)</span><br><span class="line">at org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode (DubboCountCodec.java:40)</span><br><span class="line">at org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder.encode (NettyCodecAdapter.java:70)</span><br><span class="line">at io.netty.handler.codec.MessageToByteEncoder.write (MessageToByteEncoder.java:107)</span><br><span class="line">... 19 more</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2018/20191201001332.png" alt="算法接口抛异常" title="算法接口抛异常"></p><p>这里可以明确得出的是，由于擅自排除了算法模块需要的高版本 <code>kryo</code>，现在算法接口无法提供服务了，缺失 <code>KryoFactory</code> 类。</p><p>没办法，只好对算法模块中的 <code>kryo</code> 做了影子复制，把包名 <code>com.esotericsoftware.kryo</code> 变更了一下，这样既不会影响到算法接口的使用，也不会影响到 <code>Spark</code> 任务提交。</p><p>好，<code>kryo</code> 的冲突问题解决了，但是紧接着又出现了 <code>netty</code> 冲突问题，现象类似，异常信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">2019-11-29_18:23:32 [appclient-register-master-threadpool-0] INFO client.AppClient$ClientEndpoint:58: Connecting to master spark://dev4:7077...</span><br><span class="line">2019-11-29_18:23:32 [shuffle-client-0] ERROR client.TransportClient:235: Failed to send RPC 8750922883607188033 to dev4/172.18.5.204:7077: java.lang.AbstractMethodError: org.apache.spark.network.protocol.MessageWithHeader.touch (Ljava/l</span><br><span class="line">ang/Object;) Lio/netty/util/ReferenceCounted;</span><br><span class="line">java.lang.AbstractMethodError: org.apache.spark.network.protocol.MessageWithHeader.touch (Ljava/lang/Object;) Lio/netty/util/ReferenceCounted;</span><br><span class="line">at io.netty.util.ReferenceCountUtil.touch (ReferenceCountUtil.java:77)</span><br><span class="line">at io.netty.channel.DefaultChannelPipeline.touch (DefaultChannelPipeline.java:116)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:785)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:701)</span><br><span class="line">at io.netty.handler.codec.MessageToMessageEncoder.write (MessageToMessageEncoder.java:112)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0 (AbstractChannelHandlerContext.java:716)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:708)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:791)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:701)</span><br><span class="line">at io.netty.handler.timeout.IdleStateHandler.write (IdleStateHandler.java:303)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0 (AbstractChannelHandlerContext.java:716)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:708)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.access$1700 (AbstractChannelHandlerContext.java:56)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.write (AbstractChannelHandlerContext.java:1102)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write (AbstractChannelHandlerContext.java:1149)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run (AbstractChannelHandlerContext.java:1073)</span><br><span class="line">at io.netty.util.concurrent.AbstractEventExecutor.safeExecute (AbstractEventExecutor.java:163)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks (SingleThreadEventExecutor.java:510)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.run (NioEventLoop.java:518)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$6.run (SingleThreadEventExecutor.java:1044)</span><br><span class="line">at io.netty.util.internal.ThreadExecutorMap$2.run (ThreadExecutorMap.java:74)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-11-29_18:23:32 [appclient-register-master-threadpool-0] WARN client.AppClient$ClientEndpoint:91: Failed to connect to master dev4:7077</span><br><span class="line">java.io.IOException: Failed to send RPC 8750922883607188033 to dev4/172.18.5.204:7077: java.lang.AbstractMethodError: org.apache.spark.network.protocol.MessageWithHeader.touch (Ljava/lang/Object;) Lio/netty/util/ReferenceCounted;</span><br><span class="line">at org.apache.spark.network.client.TransportClient$3.operationComplete (TransportClient.java:239)</span><br><span class="line">at org.apache.spark.network.client.TransportClient$3.operationComplete (TransportClient.java:226)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListener0 (DefaultPromise.java:577)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListenersNow (DefaultPromise.java:551)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListeners (DefaultPromise.java:490)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.setValue0 (DefaultPromise.java:615)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.setFailure0 (DefaultPromise.java:608)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.tryFailure (DefaultPromise.java:117)</span><br><span class="line">at io.netty.util.internal.PromiseNotificationUtil.tryFailure (PromiseNotificationUtil.java:64)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.notifyOutboundHandlerException (AbstractChannelHandlerContext.java:818)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0 (AbstractChannelHandlerContext.java:718)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:708)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:791)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.write (AbstractChannelHandlerContext.java:701)</span><br><span class="line">at io.netty.handler.timeout.IdleStateHandler.write (IdleStateHandler.java:303)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0 (AbstractChannelHandlerContext.java:716)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.invokeWrite (AbstractChannelHandlerContext.java:708)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext.access$1700 (AbstractChannelHandlerContext.java:56)</span><br><span class="line">at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.write (AbstractChannelHandlerContext.java:1102)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2018/20191201001713.png" alt="netty 异常" title="netty 异常"></p><p>这个问题我见过很多次，通过简单排查发现 <code>Spark</code> 需要的是 <code>netty-all v4.0.29</code>，而算法模块需要的是 <code>v4.1.25</code>，我在本地看到实际加载的是 <code>v4.0.29</code>，这里 <code>Spark</code> 任务为什么提交失败我有疑惑【我只能怀疑服务器加载类的顺序和我本机的不一致，导致服务器上面实际加载的并不是 <code>Spark</code> 需要的版本】。</p><p>接着按照我的怀疑把高版本 <code>netty-all</code> 排除了，恢复正常【这里不需要复制影子，因为版本差别不大，算法模块可以兼容低版本 <code>netty-all</code> 依赖】。</p><p>但是，接着又出现 <code>org.apache.curator:curator-recipes</code> 依赖的问题，这是 <code>Spark</code> 任务读取 <code>kafka</code> 需要的依赖，而在算法模块中也需要。</p><p>异常信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: org.apache.curator.framework.api.CreateBuilder.creatingParentsIfNeeded () Lorg/apache/curator/framework/api/ProtectACLCreateModePathAndBytesable;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2018/20191201001855.png" alt="curator 异常" title="curator 异常"></p><p>其中，在 <code>Spark</code> 中需要的版本是 <code>v2.4.0</code>，而在算法模块中需要的是 <code>v4.0.1</code>，我看到实际加载的是 <code>v4.0.1</code>，所以 <code>Spark</code> 任务又失败了。</p><p>再按照这个节奏进行下去，读者是不是要疯掉了！好，我们到此为止，准备使用万能优雅的 <code>maven-shade-plugin</code> 插件解决这类让人抓狂的问题【只需要找到冲突的 <code>jar</code> 包替换包名，不需要排除】。</p><h1 id="问题分析解决"><a href="# 问题分析解决" class="headerlink" title="问题分析解决"></a>问题分析解决 </h1><h2 id="简单分析解决"><a href="# 简单分析解决" class="headerlink" title="简单分析解决"></a> 简单分析解决 </h2><p> 在上面的流程中，我会想到变更 <code>jar</code> 包依赖版本，或者移除多余的依赖，尝试让合适的版本出现，从而兼容代码中所有的调用。但是，遇到稍微复杂的情况这种做法显然是徒劳的。</p><p>诚然，这种方式针对单线程或者本地 <code>local</code> 模式运行的程序是可以生效的，但是对于集群模式的【<code>standalone</code>、<code>yarn</code> 等】<code>Spark</code> 任务，就无能为力了，很难恰好找到匹配的版本，毕竟公共包本身使用的依赖不是你能控制的，也不会为了你而做兼容【公共包面向大众发布，一般都会使用最新版本的依赖】。</p><p>接着详细来解释一下我这个典型场景，<code>Spark</code> 使用了一个低版本的 <code>kryo</code>，而算法模块使用了另外高版本的 <code>kyro</code>，但是诡异的是它们的依赖坐标不一致【算法模块是 <code>com.esotericsoftware:kryo</code>、<code>Spark</code> 是 <code>com.esotericsoftware.kryo:kryo</code>】，而实际类的包名却是一致的【都是 <code>com.esotericsoftware.kryo</code>】，这就导致类冲突无法兼容【在人们的经验中，<code>jar</code> 包坐标不同，类的包名也应该不同才对】。当然，<code>kryo</code> 高低版本之间的类不同也是无法兼容的原因之一。</p><p>如果选择移除算法模块的 <code>kryo</code>，调用算法接口时会报找不到类异常，如果移除 <code>Spark</code> 的 <code>kryo</code>，提交 <code>Spark</code> 任务时会报无法反序列化异常。</p><p>而且，比较让人崩溃的是，真的无法找到兼容两者的版本，那就只能利用 <code>maven-shade-plugin</code> 插件了。</p><p>我这里的项目本身使用的 <code>maven-shade-plugin</code> 插件是为了把所有的依赖都打包在一起，形成 <code>uber jar</code>，需要启动 <code>Spark</code> 任务时一起提交到集群。这样做主要是因为 <code>Spark</code> 集群的 <code>libs</code> 中没有存放任何公共依赖包，比较纯净，所以需要提交任务的客户端自己打包携带，这样也可以避免很多业务方共同使用同一个 <code>Spark</code> 集群产生依赖冲突问题。</p><p>无奈，最终只好决定使用 <code>maven-shade-plugin</code> 插件的高级功能：影子别名，直接变更类名，就不怕再冲突了。</p><p>使用 <code>maven-shade-plugin</code> 插件制作影子的相关类配置【把类的包名替换掉，避免冲突，根据项目的实际冲突情况而配置，这里仅供参考】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;relocations&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;pattern&gt;com.google&lt;/pattern&gt;</span><br><span class="line">            &lt;shadedPattern&gt;iplaypi.com.google&lt;/shadedPattern&gt;</span><br><span class="line">        &lt;/relocation&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;pattern&gt;io.netty&lt;/pattern&gt;</span><br><span class="line">            &lt;shadedPattern&gt;iplaypi.io.netty&lt;/shadedPattern&gt;</span><br><span class="line">        &lt;/relocation&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;pattern&gt;org.apache.curator&lt;/pattern&gt;</span><br><span class="line">            &lt;shadedPattern&gt;iplaypi.org.apache.curator&lt;/shadedPattern&gt;</span><br><span class="line">        &lt;/relocation&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;pattern&gt;com.esotericsoftware&lt;/pattern&gt;</span><br><span class="line">            &lt;shadedPattern&gt;iplaypi.com.esotericsoftware&lt;/shadedPattern&gt;</span><br><span class="line">        &lt;/relocation&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;pattern&gt;de.javakaffee&lt;/pattern&gt;</span><br><span class="line">            &lt;shadedPattern&gt;iplaypi.de.javakaffee&lt;/shadedPattern&gt;</span><br><span class="line">        &lt;/relocation&gt;</span><br><span class="line">    &lt;/relocations&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>我这里把 <code>guava</code>、<code>netty</code>、<code>curator</code>、<code>kryo</code> 全部制作影子了，仅供参考。</p><h2 id="抽象简化问题"><a href="# 抽象简化问题" class="headerlink" title="抽象简化问题"></a>抽象简化问题 </h2><p> 下面就用模型简化一下我遇到的这类场景，使用 <code>guava</code> 包冲突做示例。</p><p><code>Maven</code> 项目中有 <code>a</code>、<code>b</code>、<code>c</code> 三个模块【分散为三个模块读者更容易理解，解决问题思路也更清晰】，<code>a</code> 同时依赖了 <code>b</code>、<code>c</code>。其中，<code>b</code> 依赖了低版本 <code>guava</code> 并调用了一个低版本独有的方法，<code>c</code> 依赖了高版本 <code>guava</code> 并调用了高版本独有的方法【当然引用特有的类也行】。</p><p>它们之间的关系如下图：</p><p>图。。</p><p>在这个 <code>Maven</code> 项目中，发生 <code>jar</code> 包冲突很明显是因为，项目中依赖了同一个 <code>jar</code> 包的多个版本，而且分别调用了高低版本特有的方法，或者引用了高低版本特有的类。面对此类问题，一般的解决思路是只保留一个版本，排除掉不需要的版本，但是上面这种情况太特殊了，排除 <code>jar</code> 包不能解决问题。</p><p>可以试想一下，排除掉低版本 <code>guava</code> 的话 <code>b</code> 会报错，排掉高版本 <code>guava</code> 的话 <code>c</code> 会报错，所以希望在项目中同时使用低版本 <code>guava</code> 和高版本 <code>guava</code>。</p><p>那就只能使用 <code>maven-shade-plugin</code> 插件来构建影子 <code>jar</code> 包，替换类路径，制作影子的效果如下图【思路就是构建 <code>c</code> 时替换掉 <code>guava</code> 的包名】：</p><p>图。。</p><p>这样就可以非常优雅地解决问题，但是会导致打包的 <code>jar</code> 比以前大一点。如果 <code>Maven</code> 项目本身没有那么多模块，只有一个大模块，建议拆分，至少把有冲突的部分单独拆出来构建影子模块。</p><p>这个方案的详细说明以及代码演示读者可以参考我的另外一篇博文：<a href="https://www.playpi.org/2019120101.html">解决 jar 包冲突的神器：maven-shade-plugin</a> 。</p><h1 id="问题总结"><a href="# 问题总结" class="headerlink" title="问题总结"></a>问题总结 </h1><p> 在制作影子时，<code>Maven</code> 的子模块是必不可少的帮手，否则还需要下载源码自己重新打包，麻烦而且做法不合适。</p><p><code>Java</code> 项目拆分为子模块的好处之一，遇到依赖冲突时，可以很方便地使用 <code>maven-shade-plugin</code> 插件，分分钟就可以制作影子。例如上面的抽象简化例子，如果 <code>a</code>、<code>b</code>、<code>c</code> 没有拆分，一直是一个模块，遇到这种依赖冲突就没办法解决，怎么排除都是不行的，只能单独构建一个子模块用来制作影子。</p><p>当然，如果上面的 <code>c</code> 本身就依赖了很多 <code>jar</code> 包，它们之间在 <code>c</code> 模块中就有冲突，也不好制作影子，还是单独新建一个纯净的子模块比较好【例如把类似 <code>guava</code> 冲突的 <code>jar</code> 包以及代码抽出来，单独创建 <code>c-sub-shade</code> 模块，在里面制作影子，这个模块给 <code>c</code> 引用】。</p><p>如图。。</p><p>注意，上图和我本文中遇到的例子有一点不同，我的 <code>jar</code> 包在 <code>c</code> 模块中并没有冲突，所以可以直接利用 <code>c</code> 制作影子模块 <code>c-shade</code>，当然不怕麻烦也可以制作 <code>c-sub-shade</code>。</p><p>此外，我在一年前也遇到过一种简单的场景：<a href="https://www.playpi.org/2018100801.html">Spark Kryo 异常</a>，当时直接通过排除依赖就解决问题了，但是这次的场景太复杂，只能启用 <code>maven-shade-plugin</code> 插件了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天遇到一个常见的依赖冲突问题，在一个 &lt;code&gt;Spark&lt;/code&gt; 项目中，引用了多个其它项目的公共包【例如公共 &lt;code&gt;elt&lt;/code&gt; 模块、算法模块】，在提交运行 &lt;code&gt;Spark&lt;/code&gt; 任务时，由于依赖冲突而失败，高低版本无法兼容。&lt;/p&gt;&lt;p&gt;本文记录问题解决过程以及经验总结，重要开发环境说明：&lt;code&gt;Spark v1.6&lt;/code&gt;、&lt;code&gt;es-hadoop v5.6.8&lt;/code&gt;、&lt;code&gt;kafka v0.9.x&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="踩坑系列" scheme="https://www.playpi.org/categories/series-of-fixbug/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="Maven" scheme="https://www.playpi.org/tags/Maven/"/>
    
      <category term="shade" scheme="https://www.playpi.org/tags/shade/"/>
    
  </entry>
  
  <entry>
    <title>使用海龟绘图绘制一些植物</title>
    <link href="https://www.playpi.org/2019110201.html"/>
    <id>https://www.playpi.org/2019110201.html</id>
    <published>2019-11-02T13:58:18.000Z</published>
    <updated>2019-11-02T13:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在 2019 年 10 月 1 日的时候，我尝试使用海龟绘图绘制了一面五星红旗，参考我的另外一篇博文：<a href="https://www.playpi.org/2019100101.html">使用海龟绘图绘制一面五星红旗 </a> ，我觉得挺好玩的，还想进一步了解一下相关知识。后来，我又探索了一些绘图内容，发现可以绘制一些植物，例如树木、花草，核心就是要定义好绘制曲线。本文记录几个常见的植物：樱花树、火树银花、玫瑰花。</p><a id="more"></a><p> 提前声明，下文中涉及的 <code>Python</code> 脚本已经被我上传至 <code>GitHub</code>，读者可以提前下载查看：<a href="https://github.com/iplaypi/iplaypipython/tree/master/iplaypipython/20191102" target="_blank" rel="noopener">绘制植物脚本 </a> ，脚本命名使用英文单词作为前缀。</p><h1 id="樱花树"><a href="# 樱花树" class="headerlink" title="樱花树"></a> 樱花树 </h1><p> 画樱花树的整体思路就是先绘制樱花树，再绘制地上的落叶。</p><p>其中，绘制樱花树使用了递归的方式，从主干开始绘制，绘制主干完成后分为左右两侧的枝干，不停递归绘制，对于长度比较长的枝干，仍旧按照主干的方式绘制，直到长度比较短的枝干，作为树枝末端存在，会有不同的颜色、粗细。</p><p>代码示例如下，里面包含了注释，很容易就能看懂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># coding=utf-8</span><br><span class="line"># 画一棵樱花树（模拟）</span><br><span class="line"># 导入 turtle 模块 </span><br><span class="line">import turtle</span><br><span class="line"># 导入 random 模块，每次绘制的樱花树形状随机 </span><br><span class="line">import random</span><br><span class="line">from turtle import *</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"># 画樱花的躯干，传入躯干长度、画布 </span><br><span class="line"># 这里面会有递归调用 </span><br><span class="line"># 先画主干，然后递归画树枝，树枝越来越短，颜色会随机生成 </span><br><span class="line">def draw_tree (branchLen, t):</span><br><span class="line">    sleep (0.0005)</span><br><span class="line">    if branchLen &gt; 3:</span><br><span class="line">        # 末端的树枝 </span><br><span class="line">        if 8 &lt;= branchLen &lt;= 12:</span><br><span class="line">            # 随机生成画笔的颜色，用来画末端的树枝 </span><br><span class="line">            if random.randint (0,2) == 0:</span><br><span class="line">                # 白色 </span><br><span class="line">                t.color (&apos;snow&apos;)</span><br><span class="line">            else:</span><br><span class="line">                # 淡珊瑚色 </span><br><span class="line">                t.color (&apos;lightcoral&apos;)</span><br><span class="line">            # 画笔的线条粗细 </span><br><span class="line">            t.pensize (branchLen / 3)</span><br><span class="line">        elif branchLen &lt; 8:</span><br><span class="line">            if random.randint (0,1) == 0:</span><br><span class="line">                t.color (&apos;snow&apos;)</span><br><span class="line">            else:</span><br><span class="line">                t.color (&apos;lightcoral&apos;) # 淡珊瑚色 </span><br><span class="line">            t.pensize (branchLen / 2)</span><br><span class="line">        else:</span><br><span class="line">            # 树干的颜色赭 (zhě) 色、粗细 6</span><br><span class="line">            t.color (&apos;sienna&apos;)</span><br><span class="line">            t.pensize (branchLen / 10)</span><br><span class="line">        # 向前移动 branchLen 个像素 </span><br><span class="line">        t.forward (branchLen)</span><br><span class="line">        # 随机生成右转的角度 </span><br><span class="line">        a = 1.5 * random.random ()</span><br><span class="line">        t.right (20 * a)</span><br><span class="line">        # 递归画樱花树 </span><br><span class="line">        b = 1.5 * random.random ()</span><br><span class="line">        draw_tree (branchLen - 10 * b, t)</span><br><span class="line">        # 左转，递归画樱花树 </span><br><span class="line">        t.left (40 * a)</span><br><span class="line">        draw_tree (branchLen - 10 * b, t)</span><br><span class="line">        # 画笔回正方向，向前移动 </span><br><span class="line">        t.right (20 * a)</span><br><span class="line">        t.up ()</span><br><span class="line">        t.backward (branchLen)</span><br><span class="line">        t.down ()</span><br><span class="line"> </span><br><span class="line"># 掉落的花瓣，传入个数、画布 </span><br><span class="line">def draw_petal (m, t):</span><br><span class="line">    # 循环绘制 m 个花瓣 </span><br><span class="line">    for i in range (m):</span><br><span class="line">        # 生成随机的移动像素个数，a 用来控制左右的移动，b 用来控制上下的移动 </span><br><span class="line">        # a 大一点，b 小一点，总体可以让花瓣看起来有透视立体感 </span><br><span class="line">        a = 200 - 400 * random.random ()</span><br><span class="line">        b = 10 - 20 * random.random ()</span><br><span class="line">        # 以下就是到达花瓣位置 </span><br><span class="line">        # 提起画笔 </span><br><span class="line">        t.up ()</span><br><span class="line">        # 向前移动 b 个像素 </span><br><span class="line">        t.forward (b)</span><br><span class="line">        # 左转 90 度角度 </span><br><span class="line">        t.left (90)</span><br><span class="line">        # 向前移动 a 个像素 </span><br><span class="line">        t.forward (a)</span><br><span class="line">        # 放下画笔 </span><br><span class="line">        t.down ()</span><br><span class="line">        # 淡珊瑚色，花瓣的颜色 </span><br><span class="line">        t.color (&apos;lightcoral&apos;)</span><br><span class="line">        # 以下是绘制一个花瓣 </span><br><span class="line">        # 绘制一个圆 </span><br><span class="line">        t.circle (1)</span><br><span class="line">        # 以下就是回到中心点 </span><br><span class="line">        # 提起画笔 </span><br><span class="line">        t.up ()</span><br><span class="line">        # 向后移动 a 个像素 </span><br><span class="line">        t.backward (a)</span><br><span class="line">        # 右转 90 度角度 </span><br><span class="line">        t.right (90)</span><br><span class="line">        # 向后移动 b 个像素 </span><br><span class="line">        t.backward (b)</span><br><span class="line"></span><br><span class="line">def draw_cherry ():</span><br><span class="line">    # 海龟绘图区域 </span><br><span class="line">    t = turtle.Turtle ()</span><br><span class="line">    # 画布 </span><br><span class="line">    w = turtle.Screen ()</span><br><span class="line">    # 设置大小，4 个参数：宽度、高度、起始值 x 轴、起始值 y 轴 </span><br><span class="line">    w.setup (1000, 600, 200, 100)</span><br><span class="line">    # 设置背景为小麦颜色 </span><br><span class="line">    w.bgcolor (&apos;wheat&apos;)</span><br><span class="line">    # 隐藏画笔 </span><br><span class="line">    t.hideturtle ()</span><br><span class="line">    # 获取屏幕，并追踪 </span><br><span class="line">    t.getscreen ().tracer (5, 0)</span><br><span class="line">    t.left (90)</span><br><span class="line">    t.up ()</span><br><span class="line">    t.backward (200)</span><br><span class="line">    t.down ()</span><br><span class="line">    # 1、画樱花的躯干 </span><br><span class="line">    draw_tree (60, t)</span><br><span class="line">    # 2、画掉落的花瓣 </span><br><span class="line">    draw_petal (200, t)</span><br><span class="line">    # 3、点击退出 </span><br><span class="line">    w.exitonclick ()</span><br><span class="line"></span><br><span class="line"># 程序入口 </span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    print (&apos; 开始绘制樱花树 & apos;)</span><br><span class="line">    draw_cherry ()</span><br><span class="line">    print (&apos; 结束绘制樱花树 & apos;)</span><br><span class="line">    # input (&apos; 暂停，等待输入（输入任意内容按回车键可退出）：&apos;)</span><br></pre></td></tr></table></figure><p>运行结果如下，由于角度是随机生成的，所以每次运行结果都会不一样：</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191105000726.png" alt="运行结果 1" title="运行结果 1"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191105000732.png" alt="运行结果 2" title="运行结果 2"></p><h1 id="火树银花"><a href="# 火树银花" class="headerlink" title="火树银花"></a>火树银花 </h1><p> 绘制火树银花的思路和上面的樱花树一致，只不过火树银花这个名字比较酷，树枝没有区分粗细，只区分长度、颜色，整个画面采用黑色背景，看起来非常闪耀。</p><p>需要注意的是，运行一次耗时比较长，大概需要 4-5 分钟。</p><p>代码内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"># !/usr/bin/python3</span><br><span class="line"># -*-coding:UTF-8-*-</span><br><span class="line"># 火树银花 </span><br><span class="line"></span><br><span class="line"># 导入海龟作图模块 </span><br><span class="line">import turtle</span><br><span class="line"># 导入随机数模块 </span><br><span class="line">import random as rm</span><br><span class="line"></span><br><span class="line"># 角度 </span><br><span class="line">angle = [15, 5, 10, 20, 25, 30]</span><br><span class="line"># 颜色数组，多种颜色供绘制时随机选择，青、红、粉、蓝、绿、黄 </span><br><span class="line">color = [&apos;yellow&apos;, &apos;green&apos;, &apos;blue&apos;, &apos;red&apos;, &apos;pink&apos;, &apos;cyan&apos;]</span><br><span class="line"></span><br><span class="line"># 绘制树干，传入长度、画布对象 </span><br><span class="line"># 绘制思路：根据长度的不同，生成的角度不同，树干会分为 2 个树枝，然后树枝再递归分叉 </span><br><span class="line"># 直到树枝的长度过小，变为树枝末梢，不再分叉 </span><br><span class="line">def draw_tree (branch_len, t, cr):</span><br><span class="line">    # 树干颜色 </span><br><span class="line">    t.color (cr)</span><br><span class="line">    # 设置画笔的粗细 </span><br><span class="line">    t.pensize (1)</span><br><span class="line">    # 随机选择颜色，不等于树干颜色，用于分叉树枝 </span><br><span class="line">    new_color = color [:]</span><br><span class="line">    new_color.remove (cr)</span><br><span class="line">    new_cr = rm.choice (new_color)</span><br><span class="line">    # 随机转动角度，用于分叉树枝 </span><br><span class="line">    ag1 = rm.choice (angle)</span><br><span class="line">    ag2 = rm.choice (angle)</span><br><span class="line">    # 分叉树枝的长度，默认等于树干的长度 </span><br><span class="line">    new_branch_len = branch_len</span><br><span class="line">    # 分叉树枝的长度重新计算，越来越短 </span><br><span class="line">    if branch_len &gt; 120:</span><br><span class="line">        new_branch_len = branch_len - 20</span><br><span class="line">    elif branch_len &gt;= 60:</span><br><span class="line">        new_branch_len = branch_len - 15</span><br><span class="line">    elif branch_len &gt;= 20:</span><br><span class="line">        new_branch_len = branch_len - 10</span><br><span class="line">    else:</span><br><span class="line">        new_branch_len = branch_len - 5</span><br><span class="line">    # 开始绘制 </span><br><span class="line">    if 10 &gt;= branch_len:</span><br><span class="line">        # 树枝太短，无需绘制，递归结束 </span><br><span class="line">        pass</span><br><span class="line">    else:</span><br><span class="line">        # 向前移动，绘制树干 </span><br><span class="line">        t.forward (branch_len)</span><br><span class="line">        # 右转指定角度 1，分叉 </span><br><span class="line">        t.right (ag1)</span><br><span class="line">        # 递归画树干，可以理解成子树 </span><br><span class="line">        draw_tree (new_branch_len, t, new_cr)</span><br><span class="line">        # 左转指定角度 2，分叉 </span><br><span class="line">        t.left (ag1 + ag2)</span><br><span class="line">        draw_tree (new_branch_len, t, new_cr)</span><br><span class="line">        # 角度回正，右转指定角度 2</span><br><span class="line">        t.right (ag2)</span><br><span class="line">        # 恢复颜色并后退 </span><br><span class="line">        t.color (cr)</span><br><span class="line">        t.backward (branch_len)</span><br><span class="line"></span><br><span class="line"># 开始绘制整棵树 </span><br><span class="line">def draw_fire_cilver ():</span><br><span class="line">    t = turtle.Turtle ()</span><br><span class="line">    w = turtle.Screen ()</span><br><span class="line">    # 设置背景为黑色 </span><br><span class="line">    w.bgcolor (&apos;black&apos;)</span><br><span class="line">    # 设置弹框大小，4 个参数：宽度、高度、起始值 x 轴、起始值 y 轴 </span><br><span class="line">    w.setup (1200, 800, 200, 50)</span><br><span class="line">    # 加快速度 </span><br><span class="line">    t.speed (10)</span><br><span class="line">    # 调整画笔的位置，开始的位置在中间偏下方 </span><br><span class="line">    t.left (90)</span><br><span class="line">    t.up ()</span><br><span class="line">    t.backward (400)</span><br><span class="line">    t.down ()</span><br><span class="line">    # 跟踪画笔，可以看到整个绘制轨迹 </span><br><span class="line">    turtle.tracer (5)</span><br><span class="line">    # 垂直位置绘制 1 棵，左右边再各绘制 3 棵，共 7 棵 </span><br><span class="line">    t.left (15)</span><br><span class="line">    for i in range (0,7):</span><br><span class="line">        # 绘制 1 棵，右转 5 度 </span><br><span class="line">        print (&apos;==== 绘制第 [&apos; + str (i + 1) + &apos;] 棵树 & apos;)</span><br><span class="line">        draw_tree (150, t, &apos;cyan&apos;)</span><br><span class="line">        t.right (5)</span><br><span class="line">    # 单机退出 </span><br><span class="line">    w.exitonclick ()</span><br><span class="line"></span><br><span class="line"># 主程序入口 </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print (&apos; 开始绘制火树银花 & apos;)</span><br><span class="line">    draw_fire_cilver ()</span><br><span class="line">    print (&apos; 结束绘制火树银花 & apos;)</span><br><span class="line">    # input (&apos; 暂停，等待输入（输入任意内容按回车键可退出）：&apos;)</span><br></pre></td></tr></table></figure><p>运行结果如下图，由于角度、颜色也是随机生成的，所以每次运行结果是不一致的。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191105001116.png" alt="运行结果" title="运行结果"></p><p>在网络上找到的示例，看起来更好看一些。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191105001233.png" alt="网络上找到的示例" title="网络上找到的示例"></p><h1 id="玫瑰花"><a href="# 玫瑰花" class="headerlink" title="玫瑰花"></a>玫瑰花 </h1><p> 玫瑰花比较有意思，会涉及到非规则图形，花瓣的形状怎么绘制、绿叶的形状怎么绘制等。</p><p>简单思路：</p><ul><li>先绘制花瓣的边框，包括填充颜色 </li><li> 再绘制花瓣中的线条，凸显出花瓣的层次 </li><li> 绘制花枝主干 </li><li> 绘制两片绿叶，包括绿叶的枝条 </li></ul><p> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"># 导入海龟绘图模块 </span><br><span class="line">import turtle as t</span><br><span class="line"></span><br><span class="line"># 定义一个曲线绘制函数 </span><br><span class="line"># 思路就是画多个小圆弧，构成曲线 </span><br><span class="line"># n 表示画多少次圆弧，n 越大画的曲线越长 </span><br><span class="line"># r 表示圆弧半径，r 越大则曲线越平滑 </span><br><span class="line"># d=1 则是左弯的圆弧，d=-1 则是右弯的圆弧（由于屏幕的分辨率不同，有时候看不出来明显的弯度）</span><br><span class="line">def degree_curve (n, r, d=1):</span><br><span class="line">    for i in range (n):</span><br><span class="line">        t.left (d)</span><br><span class="line">        # r 是半径，abs (d) 是夹角 </span><br><span class="line">        t.circle (r, abs (d))</span><br><span class="line"></span><br><span class="line"># 绘制玫瑰花 </span><br><span class="line">def draw_rose (s):</span><br><span class="line">    # 设置画笔速度 </span><br><span class="line">    t.speed (100)</span><br><span class="line">    # 提起画笔，移动到指定位置 </span><br><span class="line">    t.penup ()</span><br><span class="line">    t.goto (0, 900 * s)</span><br><span class="line">    # 放下画笔 </span><br><span class="line">    t.pendown ()</span><br><span class="line"></span><br><span class="line">    # 开始填充，并绘制花朵形状 </span><br><span class="line">    t.begin_fill ()</span><br><span class="line">    # 起步花蕊的曲线，30 度圆弧，一层椭圆下侧 </span><br><span class="line">    t.circle (200 * s, 30)</span><br><span class="line">    # 左弯曲线，60 次半径为 10 的圆弧，一层椭圆右侧 </span><br><span class="line">    degree_curve (60, 50 * s)</span><br><span class="line">    # 和起步花蕊的曲线对称，30 度圆弧 </span><br><span class="line">    t.circle (200 * s, 30)</span><br><span class="line">    # 左弯曲线，4 次半径为 20 的圆弧，为了调整角度 </span><br><span class="line">    degree_curve (4, 100 * s)</span><br><span class="line">    # 50 度圆弧，一层椭圆上侧 </span><br><span class="line">    t.circle (200 * s, 50)</span><br><span class="line">    # 左弯曲线，50 次半径为 10 的圆弧，一层椭圆左侧下侧 </span><br><span class="line">    degree_curve (50, 50 * s)</span><br><span class="line">    # 65 度圆弧，一层椭圆下侧 </span><br><span class="line">    t.circle (350 * s, 65)</span><br><span class="line">    # 左弯曲线，40 次半径为 14 的圆弧，二层椭圆右侧 </span><br><span class="line">    degree_curve (40, 70 * s)</span><br><span class="line">    # 50 度圆弧，二层椭圆右侧上侧 </span><br><span class="line">    t.circle (150 * s, 50)</span><br><span class="line">    # 右弯曲线，20 次半径为 10 的圆弧，二层椭圆上侧 </span><br><span class="line">    degree_curve (20, 50 * s, -1)</span><br><span class="line">    # 60 度圆弧，二层椭圆上侧 </span><br><span class="line">    t.circle (400 * s, 60)</span><br><span class="line">    # 右弯曲线，18 次半径为 10 的圆弧，二层椭圆左侧 </span><br><span class="line">    degree_curve (18, 50 * s)</span><br><span class="line">    # 前进 125，直线，二层椭圆左侧连接处 </span><br><span class="line">    t.fd (250 * s)</span><br><span class="line">    # 右转 150 度 </span><br><span class="line">    t.right (150)</span><br><span class="line">    # 12 度圆弧，顺时针画圆，右弯曲线 </span><br><span class="line">    t.circle (-500 * s, 12)</span><br><span class="line">    # 左转 140 度 </span><br><span class="line">    t.left (140)</span><br><span class="line">    # 110 度圆弧，左侧花瓣边缘 </span><br><span class="line">    t.circle (550 * s, 110)</span><br><span class="line">    # 左转 27 度 </span><br><span class="line">    t.left (27)</span><br><span class="line">    # 100 度圆弧，右侧花瓣边缘 </span><br><span class="line">    t.circle (650 * s, 100)</span><br><span class="line">    # 左转 130 度 </span><br><span class="line">    t.left (130)</span><br><span class="line">    # 20 度圆弧，顺时针画圆 </span><br><span class="line">    t.circle (-300 * s, 20)</span><br><span class="line">    # 右转 123 度 </span><br><span class="line">    t.right (123)</span><br><span class="line">    # 57 度圆弧，连接到二层椭圆右侧 </span><br><span class="line">    t.circle (220 * s, 57)</span><br><span class="line">    # 至此图形封闭，颜色填充完成 </span><br><span class="line">    t.end_fill ()</span><br><span class="line"></span><br><span class="line">    # 绘制花枝形状，包括勾勒花瓣中间的线条 </span><br><span class="line">    # 左转 120 度 </span><br><span class="line">    t.left (120)</span><br><span class="line">    # 前进 140</span><br><span class="line">    t.fd (280 * s)</span><br><span class="line">    # 左转 115 度 </span><br><span class="line">    t.left (115)</span><br><span class="line">    # 33 度圆弧，连接到右侧花瓣边缘 </span><br><span class="line">    t.circle (300 * s, 33)</span><br><span class="line">    # 左转 180 度 </span><br><span class="line">    t.left (180)</span><br><span class="line">    # 33 度圆弧，顺时针，为了回到上一步画圆弧之前的位置 </span><br><span class="line">    t.circle (-300 * s, 33)</span><br><span class="line">    # 右弯曲线，70 次半径为 113 的圆弧，右侧花瓣线条 </span><br><span class="line">    degree_curve (70, 225 * s, -1)</span><br><span class="line">    # 104 度圆弧，右侧花瓣线条 </span><br><span class="line">    t.circle (350 * s, 104)</span><br><span class="line">    # 左转 90 度 </span><br><span class="line">    t.left (90)</span><br><span class="line">    # 105 度圆弧，左侧花瓣线条 </span><br><span class="line">    t.circle (200 * s, 105)</span><br><span class="line">    # 63 度弧度，顺时针，左侧花瓣线条，至此花瓣线条完成 </span><br><span class="line">    t.circle (-500 * s, 63)</span><br><span class="line">    # 提起画笔，移动到指定位置，花瓣与花枝连接处 </span><br><span class="line">    t.penup ()</span><br><span class="line">    t.goto (170 * s, -30 * s)</span><br><span class="line">    # 放下画笔 </span><br><span class="line">    t.pendown ()</span><br><span class="line">    # 左转 160 度，朝向调整为朝下 </span><br><span class="line">    t.left (160)</span><br><span class="line">    # 左弯曲线，20 次半径为 1250 的圆弧，花枝 </span><br><span class="line">    degree_curve (20, 2500 * s)</span><br><span class="line">    # 右弯曲线，220 次半径为 125 的圆弧，花枝 </span><br><span class="line">    degree_curve (220, 250 * s, -1)</span><br><span class="line"></span><br><span class="line">    # 下面开始绘制 2 片绿叶 </span><br><span class="line">    # 绘制一个绿色叶子，上方的 </span><br><span class="line">    t.fillcolor (&apos;green&apos;)</span><br><span class="line">    # 提起画笔移动到指定位置，叶尖 </span><br><span class="line">    t.penup ()</span><br><span class="line">    t.goto (670 * s, -180 * s)</span><br><span class="line">    t.pendown ()</span><br><span class="line">    # 右转 140 度，调整角度 </span><br><span class="line">    t.right (140)</span><br><span class="line">    # 开始填充 </span><br><span class="line">    t.begin_fill ()</span><br><span class="line">    # 120 度弧度，绿叶上侧 </span><br><span class="line">    t.circle (300 * s, 120)</span><br><span class="line">    # 左转 60 度 </span><br><span class="line">    t.left (60)</span><br><span class="line">    # 120 度弧度，绿叶下侧 </span><br><span class="line">    t.circle (300 * s, 120)</span><br><span class="line">    # 完成填充 </span><br><span class="line">    t.end_fill ()</span><br><span class="line">    t.penup ()</span><br><span class="line">    # 移动到绿叶枝条起始处 </span><br><span class="line">    t.goto (180 * s, -550 * s)</span><br><span class="line">    t.pendown ()</span><br><span class="line">    # 右转 85 度 </span><br><span class="line">    t.right (85)</span><br><span class="line">    # 40 度圆弧，绿叶枝条 </span><br><span class="line">    t.circle (600 * s, 40)</span><br><span class="line">    </span><br><span class="line">    # 绘制另一个绿色叶子，下方的 </span><br><span class="line">    # 提笔，移动到叶尖 </span><br><span class="line">    t.penup ()</span><br><span class="line">    t.goto (-150 * s, -1000 * s)</span><br><span class="line">    t.pendown ()</span><br><span class="line">    t.begin_fill ()</span><br><span class="line">    # 右转 120 度，调整角度 </span><br><span class="line">    t.rt (120)</span><br><span class="line">    # 115 度圆弧，叶子下侧 </span><br><span class="line">    t.circle (300 * s, 115)</span><br><span class="line">    # 左转 75 度 </span><br><span class="line">    t.left (75)</span><br><span class="line">    # 100 度弧度，叶子上侧 </span><br><span class="line">    t.circle (300 * s, 100)</span><br><span class="line">    t.end_fill ()</span><br><span class="line">    t.penup ()</span><br><span class="line">    # 移动到绿叶枝条起始处 </span><br><span class="line">    t.goto (430 * s, -1070 * s)</span><br><span class="line">    t.pendown ()</span><br><span class="line">    # 右转 30 度，调整角度 </span><br><span class="line">    t.right (30)</span><br><span class="line">    # 35 度圆弧，右弯，叶子枝条 </span><br><span class="line">    t.circle (-600 * s, 35)</span><br><span class="line">    # 等待退出 </span><br><span class="line">    t.exitonclick ()</span><br><span class="line"></span><br><span class="line"># 程序入口 </span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    print (&apos; 开始绘制玫瑰花 & apos;)</span><br><span class="line">    # 比例设定 </span><br><span class="line">    s = 0.2</span><br><span class="line">    # 设置弹窗大小 </span><br><span class="line">    t.setup (500 * 5 * s, 750 * 5 * s)</span><br><span class="line">    # 背景颜色，小麦色 </span><br><span class="line">    t.bgcolor (&apos;wheat&apos;)</span><br><span class="line">    # 设置画笔颜色，黑色 </span><br><span class="line">    t.pencolor (&quot;black&quot;)</span><br><span class="line">    # 设置填充颜色为红色，绘制花朵 </span><br><span class="line">    t.fillcolor (&quot;red&quot;)</span><br><span class="line">    draw_rose (s)</span><br><span class="line">    print (&apos; 结束绘制玫瑰花 & apos;)</span><br><span class="line">    # input (&apos; 暂停，等待输入（输入任意内容按回车键可退出）：&apos;)</span><br></pre></td></tr></table></figure><p>这里面的重点就是 <code>degree_curve (n, r, d=1)</code> 方法，它是为了绘制不规则图形而定义的。此外用的次数比较多的就是海龟绘图内置的 <code>circle</code> 方法，用来绘制标准的圆弧。</p><p>运行结果如下图，包含花瓣、绿叶。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191117003518.png" alt="玫瑰花运行结果" title="玫瑰花运行结果"></p><h1 id="参考"><a href="# 参考" class="headerlink" title="参考"></a>参考</h1><p><code>Python</code> 官方文档：<a href="https://docs.python.org/zh-cn/3/library/turtle.html" target="_blank" rel="noopener">Python3 文档说明</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在 2019 年 10 月 1 日的时候，我尝试使用海龟绘图绘制了一面五星红旗，参考我的另外一篇博文：&lt;a href=&quot;https://www.playpi.org/2019100101.html&quot;&gt;使用海龟绘图绘制一面五星红旗&lt;/a&gt; ，我觉得挺好玩的，还想进一步了解一下相关知识。后来，我又探索了一些绘图内容，发现可以绘制一些植物，例如树木、花草，核心就是要定义好绘制曲线。本文记录几个常见的植物：樱花树、火树银花、玫瑰花。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Python" scheme="https://www.playpi.org/tags/Python/"/>
    
      <category term="Turtle" scheme="https://www.playpi.org/tags/Turtle/"/>
    
      <category term="cherry" scheme="https://www.playpi.org/tags/cherry/"/>
    
      <category term="tree" scheme="https://www.playpi.org/tags/tree/"/>
    
      <category term="rose" scheme="https://www.playpi.org/tags/rose/"/>
    
  </entry>
  
  <entry>
    <title>HBase 错误：The node hbase is not in ZooKeeper</title>
    <link href="https://www.playpi.org/2019101901.html"/>
    <id>https://www.playpi.org/2019101901.html</id>
    <published>2019-10-19T12:15:11.000Z</published>
    <updated>2019-10-19T12:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>使用 <code>phoenix</code> 向 <code>HBase</code> 中导入数据，使用的是 <code>phoenix</code> 自带的脚本 <code>psql.py</code>，结果报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19/10/18 11:47:29 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &apos;zookeeper.znode.parent&apos;. There could be a mismatch with the one configured in the master.</span><br></pre></td></tr></table></figure><p>看起来是 <code>ZooKeeper</code> 环境有问题，本文记录解决过程。</p><p>本文开发环境基于 <code>HBase v1.1.2</code>、<code>phoenix v4.2.0</code> 。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 使用 <code>phoenix</code> 自带的导数脚本 <code>psql.py</code>，执行导入操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql.py -t YOUR_TABLE dev4:2181 ./content.csv</span><br></pre></td></tr></table></figure><p>其中，<code>dev4:2191</code> 是 <code>Zookeeper</code> 集群节点，<code>./content.csv</code> 是数据文件，结果出现异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">19/10/18 11:47:29 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &apos;zookeeper.znode.parent&apos;. There could be a mismatch with the one configured in the master.</span><br><span class="line">19/10/18 11:47:29 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &apos;zookeeper.znode.parent&apos;. There could be a mismatch with the one configured in the master.</span><br><span class="line">19/10/18 11:47:29 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &apos;zookeeper.znode.parent&apos;. There could be a mismatch with the one configured in the master.</span><br><span class="line">19/10/18 11:47:30 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &apos;zookeeper.znode.parent&apos;. There could be a mismatch with the one configured in the master.</span><br><span class="line">19/10/18 11:47:31 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &apos;zookeeper.znode.parent&apos;. There could be a mismatch with the one configured in the master.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191019204203.png" alt="导入数据异常" title="导入数据异常"></p><p>看起来是 <code>Zookeeper</code> 中缺失 <code>/hbase</code> 节点目录。</p><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 从 <code>stackoverflow</code> 上面查到一条类似的问题，见备注链接。</p><p>表面原因的确是 <code>Zookeeper</code> 中缺失 <code>/hbase</code> 节点目录，因为 <code>phoenix</code> 需要从这个节点获取 <code>HBase</code> 集群的信息，例如表结构，节点目录缺失则无法获取。</p><p>查看 <code>conf/hbase-site.xml</code> 文件，找到配置项：<code>zookeeper.znode.parent</code>，它就是表示 <code>HBase</code> 在 <code>ZooKeeper</code> 中的管理目录，里面存储着关于 <code>HBase</code> 集群的各项重要信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;zookeeper.znode.parent&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/hbase-unsecure&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>再去查看 <code>conf/hbase-env.sh</code> 里面的配置信息：<code>HBASE_MANAGES_ZK</code>，这个参数是告诉 <code>HBase</code> 是否使用自带的 <code>ZooKeeper</code> 管理 <code>HBase</code> 集群。如果为 <code>true</code>，则使用自带的 <code>ZooKeeper</code>；如果为 <code>false</code>，则使用外部的 <code>ZooKeeper</code>。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191019204433.png" alt="查看 hbase-env.sh 文件" title="查看 hbase-env.sh 文件"></p><p>可以看到我这里的参数设置的是 <code>false</code>，也就是使用外部的 <code>ZooKeeper</code> 集群。</p><p>在这里多说一下这个参数的不同值的使用场景：</p><ul><li>默认值为 <code>true</code>，但是，自带的 <code>ZooKeeper</code> 只能为单机或伪分布模式下的 <code>HBase</code> 提供服务，一般用于学习场景或者测试环境，比较方便管理 </li><li> 如果设置为 <code>false</code>，则使用外部的 <code>ZooKeeper</code> 管理 <code>HBase</code>，此时 <code>HBase</code> 既可以是单机模式、伪分布式模式，也可以是分布式模式，重点只有一个，需要自己搭建一套 <code>ZooKeeper</code> 集群 </li><li> 如果设置为 <code>true</code>，并且 <code>HBase</code> 使用伪分布式模式，则在启动 <code>HBase</code> 时，<code>HBase</code> 将 <code>Zookeeper</code> 作为自身的一部分运行，进程变为 <code>HQuorumPeer</code></li><li>一般建议使用 <code>false</code>，然后自己再单独搭建一套 <code>ZooKeeper</code>，这才是真生的分布式环境；当然，如果觉得复杂，只是自己学习、测试的时候使用，可以设置为 <code>true</code></li></ul><p>言归正传，既然使用的是外部的 <code>ZooKeeper</code>，也就是我这里指定的 <code>dev4:2181</code>，可见 <code>HBase</code> 集群已经设置了自己在 <code>Zookeeper</code> 中的元信息管理目录，而 <code>phoenix</code> 为什么要去另外一个目录 <code>/hbase</code> 获取呢。这里可能是 <code>phoenix</code> 的配置有问题。</p><p>不妨先去里面看一下是否存在 <code>/hbase</code> 节点即可，经过查看，没有这个节点。如果没有的话，也不妨先重新创建一个，使用：<code>create /hbase&quot;&quot;</code> 创建一个空内容节点，确保节点存在。</p><p>注意，这里只是创建了一个空节点，里面并没有任何信息，所以 <code>phoenix</code> 从里面是无法获取关于 <code>HBase</code> 集群的信息的。</p><p>测试了一下，果然，还是无法导入数据，抛出超时异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">19/10/19 20:47:12 WARN impl.MetricsConfig: Cannot locate configuration: tried hadoop-metrics2-phoenix.properties,hadoop-metrics2.properties</span><br><span class="line">org.apache.phoenix.exception.PhoenixIOException: callTimeout=600000, callDuration=1024368: </span><br><span class="line">at org.apache.phoenix.util.ServerUtil.parseServerException (ServerUtil.java:108)</span><br><span class="line">at org.apache.phoenix.query.ConnectionQueryServicesImpl.ensureTableCreated (ConnectionQueryServicesImpl.java:840)</span><br><span class="line">at org.apache.phoenix.query.ConnectionQueryServicesImpl.createTable (ConnectionQueryServicesImpl.java:1134)</span><br><span class="line">at org.apache.phoenix.query.DelegateConnectionQueryServices.createTable (DelegateConnectionQueryServices.java:110)</span><br><span class="line">at org.apache.phoenix.schema.MetaDataClient.createTableInternal (MetaDataClient.java:1591)</span><br><span class="line">at org.apache.phoenix.schema.MetaDataClient.createTable (MetaDataClient.java:569)</span><br><span class="line">at org.apache.phoenix.compile.CreateTableCompiler$2.execute (CreateTableCompiler.java:175)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixStatement$2.call (PhoenixStatement.java:271)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixStatement$2.call (PhoenixStatement.java:263)</span><br><span class="line">at org.apache.phoenix.call.CallRunner.run (CallRunner.java:53)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixStatement.executeMutation (PhoenixStatement.java:261)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixStatement.executeUpdate (PhoenixStatement.java:1043)</span><br><span class="line">at org.apache.phoenix.query.ConnectionQueryServicesImpl$9.call (ConnectionQueryServicesImpl.java:1561)</span><br><span class="line">at org.apache.phoenix.query.ConnectionQueryServicesImpl$9.call (ConnectionQueryServicesImpl.java:1530)</span><br><span class="line">at org.apache.phoenix.util.PhoenixContextExecutor.call (PhoenixContextExecutor.java:77)</span><br><span class="line">at org.apache.phoenix.query.ConnectionQueryServicesImpl.init (ConnectionQueryServicesImpl.java:1530)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixDriver.getConnectionQueryServices (PhoenixDriver.java:162)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixEmbeddedDriver.connect (PhoenixEmbeddedDriver.java:126)</span><br><span class="line">at org.apache.phoenix.jdbc.PhoenixDriver.connect (PhoenixDriver.java:133)</span><br><span class="line">at java.sql.DriverManager.getConnection (DriverManager.java:664)</span><br><span class="line">at java.sql.DriverManager.getConnection (DriverManager.java:208)</span><br><span class="line">at org.apache.phoenix.util.PhoenixRuntime.main (PhoenixRuntime.java:182)</span><br><span class="line">Caused by: java.net.SocketTimeoutException: callTimeout=600000, callDuration=1024368: </span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithRetries (RpcRetryingCaller.java:156)</span><br><span class="line">at org.apache.hadoop.hbase.client.HBaseAdmin.executeCallable (HBaseAdmin.java:3390)</span><br><span class="line">at org.apache.hadoop.hbase.client.HBaseAdmin.getTableDescriptor (HBaseAdmin.java:408)</span><br><span class="line">at org.apache.hadoop.hbase.client.HBaseAdmin.getTableDescriptor (HBaseAdmin.java:429)</span><br><span class="line">at org.apache.phoenix.query.ConnectionQueryServicesImpl.ensureTableCreated (ConnectionQueryServicesImpl.java:772)</span><br><span class="line">... 20 more</span><br><span class="line">Caused by: org.apache.hadoop.hbase.MasterNotRunningException: java.io.IOException: Can&apos;t get master address from ZooKeeper; znode data == null</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation$StubMaker.makeStub (ConnectionManager.java:1671)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation$MasterServiceStubMaker.makeStub (ConnectionManager.java:1697)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.getKeepAliveMasterService (ConnectionManager.java:1914)</span><br><span class="line">at org.apache.hadoop.hbase.client.HBaseAdmin$MasterCallable.prepare (HBaseAdmin.java:3363)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithRetries (RpcRetryingCaller.java:125)</span><br><span class="line">... 24 more</span><br><span class="line">Caused by: java.io.IOException: Can&apos;t get master address from ZooKeeper; znode data == null</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MasterAddressTracker.getMasterAddress (MasterAddressTracker.java:114)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation$StubMaker.makeStubNoRetries (ConnectionManager.java:1597)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation$StubMaker.makeStub (ConnectionManager.java:1643)</span><br><span class="line">... 28 more</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191019211617.png" alt="导入数据再次出现异常" title="导入数据再次出现异常"></p><p>可以看到，里面有 <code>Can&#39;t get master address from ZooKeeper</code> 字样，也就是无法从 <code>Zookeeper</code> 指定的目录中获取关于 <code>HBase</code> 的主节点信息，可见，单纯在 <code>Zookeeper</code> 中创建一个 <code>/hbase</code> 目录是没用的。因此，源头应该在于 <code>phoenix</code> 为什么不去 <code>/hbase-unsecure</code> 目录中获取 <code>HBase</code> 集群信息【这才是 <code>HBase</code> 集群的信息所在地】，是哪里的配置出了问题。</p><p>经过排查，<code>phoenix</code> 脚本在加载 <code>hbase_conf_dir</code> 参数的时候，目录错误，因此没有获取到 <code>HBase</code> 相的配置文件，最终导致没有去 <code>Zookeeper</code> 的 <code>/hbase-unsecure</code> 目录读取数据。这里排查的是 <code>psql.py</code>、<code>phoenix_utils.py</code> 这两个文件，里面有关于加载 <code>HBase</code>、<code>Hadoop</code> 集群的配置目录的参数，如果赋值错误就会导致上述现象。</p><p>把 <code>hbase_conf_dir</code> 参数的加载过程梳理清楚，确保可以加载到 <code>HBASE_HOME/conf</code> 目录，接着就可以顺利导入数据了。</p><p>同时当然也需要 <code>HADOOP_HOME/conf</code>，但是我这里已经是正确的了，如果读者没有配置好，可能会遇到找不到 <code>hdfs</code> 的相关类，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: java.lang.ClassNotFoundException: Class org.apache.hadoop.hdfs.DistributedFileSystem not found</span><br></pre></td></tr></table></figure><p>最后一点需要注意，上传的 <code>csv</code> 文件内容列数要确保和 <code>HBase</code> 表的列数一致，并且不需要表头，否则无法成功导入【表头也会被当做内容】，日志也会报错提醒的。当然，字段也是有顺序的，<code>csv</code> 文件中字段的顺序要和 <code>HBase</code> 表中定义的一致。</p><p>顺利导入数据，导入成功，耗时 12 秒，导入 12000 条数据，从输出日志中可以看到详情。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191021215944.png" alt="数据导入成功" title="数据导入成功"></p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注</h1><p>1、参考：<a href="https://stackoverflow.com/questions/28605301/the-node-hbase-is-not-in-zookeeper" target="_blank" rel="noopener">HBase</a> ，这是个相似的问题。</p><p>2、如果数据量比较大的话，就不建议使用这种脚本导入的方式，反而可以使用 <code>xxx-client.jar</code> 包里面自带的处理类来执行，并提前把数据文件上传至 <code>hdfs</code>，然后后台会提交 <code>MapReduce</code> 任务来大批量导入数据。</p><p>3、数据导入、数据导出还可以使用 <code>pig</code> 这个工具。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;使用 &lt;code&gt;phoenix&lt;/code&gt; 向 &lt;code&gt;HBase&lt;/code&gt; 中导入数据，使用的是 &lt;code&gt;phoenix&lt;/code&gt; 自带的脚本 &lt;code&gt;psql.py&lt;/code&gt;，结果报错：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;19/10/18 11:47:29 ERROR client.ConnectionManager$HConnectionImplementation: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &amp;apos;zookeeper.znode.parent&amp;apos;. There could be a mismatch with the one configured in the master.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;看起来是 &lt;code&gt;ZooKeeper&lt;/code&gt; 环境有问题，本文记录解决过程。&lt;/p&gt;&lt;p&gt;本文开发环境基于 &lt;code&gt;HBase v1.1.2&lt;/code&gt;、&lt;code&gt;phoenix v4.2.0&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="踩坑系列" scheme="https://www.playpi.org/categories/series-of-fixbug/"/>
    
    
      <category term="HBase" scheme="https://www.playpi.org/tags/HBase/"/>
    
      <category term="Phoenix" scheme="https://www.playpi.org/tags/Phoenix/"/>
    
      <category term="Zookeeper" scheme="https://www.playpi.org/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>HBase 错误：NotServingRegionException</title>
    <link href="https://www.playpi.org/2019101201.html"/>
    <id>https://www.playpi.org/2019101201.html</id>
    <published>2019-10-12T12:19:31.000Z</published>
    <updated>2019-10-12T12:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在使用 <code>SparkStreaming</code> 程序处理数据，结果写入 <code>HBase</code> 时，遇到异常 <code>NotServingRegionException</code>，只是突然出现一次，平时正常，怀疑是和开发环境有关，本文记录查找问题的过程。本文中涉及的开发环境为 <code>HBase v1.1.2</code>。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p><code>SparkStreaming</code> 程序处理数据，结果写入 <code>HBase</code>，出现异常，并且一直持续：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">2019-10-13_16:40:31 [JobGenerator] INFO consumer.SimpleConsumer:68: Reconnect due to socket error: java.nio.channels.ClosedChannelException</span><br><span class="line">2019-10-13_16:40:32 [JobGenerator] INFO scheduler.JobScheduler:58: Added jobs for time 1570869630000 ms</span><br><span class="line">2019-10-13_16:40:33 [Executor task launch worker-0] INFO client.AsyncProcess:1656: #3, waiting for some tasks to finish. Expected max=0, tasksInProgress=29</span><br><span class="line">2019-10-13_16:40:34 [htable-pool3-t1] INFO client.AsyncProcess:1174: #3, table=YOUR_TABLE, attempt=29/35 failed=64ops, last exception: org.apache.hadoop.hbase.NotServingRegionException: org.apache.hadoop.hbase.NotServingRegionException: Region YOUR_TABLE,f,1565318245911.a70001dfe6d9320600286510318bfeb6. is not online on dev6,16020,1570795214262</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.HRegionServer.getRegionByEncodedName (HRegionServer.java:2898)</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.RSRpcServices.getRegion (RSRpcServices.java:947)</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.RSRpcServices.multi (RSRpcServices.java:1994)</span><br><span class="line">at org.apache.hadoop.hbase.protobuf.generated.ClientProtos$ClientService$2.callBlockingMethod (ClientProtos.java:32213)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.RpcServer.call (RpcServer.java:2114)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.CallRunner.run (CallRunner.java:101)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.RpcExecutor.consumerLoop (RpcExecutor.java:130)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.RpcExecutor$1.run (RpcExecutor.java:107)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line"> on dev6,16020,1569724523487, tracking started null, retrying after=20058ms, replay=64ops</span><br><span class="line">2019-10-13_16:40:46 [scheduled-rate-update] INFO streaming.ScheduledRateController:136: MinRateCondition, rateLimit = -1, minRate = 400</span><br><span class="line">2019-10-13_16:40:46 [stream-rate-update] INFO streaming.ScheduledRateController:155: MinRateCondition&apos;s execute, numOfBatches = 38 vs 80</span><br><span class="line">2019-10-13_16:40:54 [Executor task launch worker-0] INFO client.AsyncProcess:1656: #3, waiting for some tasks to finish. Expected max=0, tasksInProgress=30</span><br><span class="line">2019-10-13_16:40:54 [htable-pool3-t1] INFO client.AsyncProcess:1174: #3, table=YOUR_TABLE, attempt=30/35 failed=64ops, last exception: org.apache.hadoop.hbase.NotServingRegionException: org.apache.hadoop.hbase.NotServingRegionException: Region YOUR_TABLE,f,1565318245911.a70001dfe6d9320600286510318bfeb6. is not online on dev6,16020,1570795214262</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.HRegionServer.getRegionByEncodedName (HRegionServer.java:2898)</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.RSRpcServices.getRegion (RSRpcServices.java:947)</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.RSRpcServices.multi (RSRpcServices.java:1994)</span><br><span class="line">at org.apache.hadoop.hbase.protobuf.generated.ClientProtos$ClientService$2.callBlockingMethod (ClientProtos.java:32213)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.RpcServer.call (RpcServer.java:2114)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.CallRunner.run (CallRunner.java:101)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.RpcExecutor.consumerLoop (RpcExecutor.java:130)</span><br><span class="line">at org.apache.hadoop.hbase.ipc.RpcExecutor$1.run (RpcExecutor.java:107)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line"> on dev6,16020,1569724523487, tracking started null, retrying after=20050ms, replay=64ops</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191012204453.png" alt="HBase 错误日志" title="HBase 错误日志"></p><p> 留意重点信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NotServingRegionException</span><br><span class="line">is not online on dev6,16020,1570795214262</span><br></pre></td></tr></table></figure><p>通过初步排查，发现只有一个数据表有此问题，更换其它表数据就可以正常写入，看来是和环境有关。</p><p>通过 <code>phoenix</code> 进行查询，发现也无法查询出数据，报错超时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: org.apache.phoenix.exception.PhoenixIOException: org.apache.phoenix.exception.PhoenixIOException: Failed after attempts=36, exceptions:</span><br><span class="line">Sat Oct 12 16:30:48 CST 2019, null, java.net.SocketTimeoutException: callTimeout=60000, callDuration=70197: row &apos;0&apos; on table &apos;YOUR_TABLE&apos; at region=YOUR_TABLE,0,1565318245911.157723c2d47bbae2226f6286a56f0256., hostname=dev6,15020,1569724523487, seqNum=1627</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191012204535.png" alt="phoenix 查询超时" title="phoenix 查询超时"></p><p>但是从这个超时异常中看不到有效的线索。</p><p>接着通过 <code>RegionServer</code> 查看 <code>Region</code> 的分布，尝试搜索日志中出现的 <code>Region YOUR_TABLE,f,1565318245911.a70001dfe6d9320600286510318bfeb6</code>，发现不存在，看来这个表的 <code>Region</code> 信息有异常。</p><p>通过搜索问题关键词，在 <code>stackoverflow</code> 上面找到一个例子，出现这种现象是因为这个表的 <code>Region</code> 损坏了，导致无法找到指定的 <code>Region</code>，但是可以手动修复。</p><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 找问题原因，并且进一步得到了建议的解决方案，准备实施。</p><p>首先使用 <code>hbase hbck&quot;YOUR_TABLE&quot;</code> 检测数据表的状态，等待几十秒，会陆续打印出集群的状态以及表的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">2019-10-13 17:44:20,160 INFO  [main-SendThread (dev5:2181)] zookeeper.ClientCnxn: Opening socket connection to server dev5/172.18.5.205:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">2019-10-13 17:44:20,247 INFO  [main-SendThread (dev5:2181)] zookeeper.ClientCnxn: Socket connection established to dev5/172.18.5.205:2181, initiating session</span><br><span class="line">2019-10-13 17:44:20,359 INFO  [main-SendThread (dev5:2181)] zookeeper.ClientCnxn: Session establishment complete on server dev5/172.18.5.205:2181, sessionid = 0x26d539786987a13, negotiated timeout = 40000</span><br><span class="line">Version: 1.1.2.2.4.2.0-258</span><br><span class="line">Number of live region servers: 3</span><br><span class="line">Number of dead region servers: 0</span><br><span class="line">Master: dev6,16000,1563773138374</span><br><span class="line">Number of backup masters: 1</span><br><span class="line">Average load: 382.6666666666667</span><br><span class="line">Number of requests: 0</span><br><span class="line">Number of regions: 1148</span><br><span class="line">Number of regions in transition: 30</span><br><span class="line">2019-10-13 17:44:24,693 INFO  [main] util.HBaseFsck: Loading regionsinfo from the hbase:meta table</span><br><span class="line"></span><br><span class="line">Number of empty REGIONINFO_QUALIFIER rows in hbase:meta: 0</span><br><span class="line">2019-10-13 17:44:24,954 INFO  [main] util.HBaseFsck: getHTableDescriptors == tableNames =&gt; [YOUR_TABLE]</span><br><span class="line">...</span><br><span class="line">2019-10-13 17:44:26,621 INFO  [main] util.HBaseFsck: Checking and fixing region consistency</span><br><span class="line">ERROR: Region &#123; meta =&gt; YOUR_TABLE,6,1565318245911.60686e402d3b0e25edc210190f8290c6., hdfs =&gt; hdfs://dev-hdfs/apps/hbase/data/data/default/YOUR_TABLE/60686e402d3b0e25edc210190f8290c6, deployed =&gt; , replicaId =&gt; 0 &#125; not deployed on any region server.</span><br><span class="line">ERROR: Region &#123; meta =&gt; YOUR_TABLE,9,1565318245911.3dab1e5fc8211112c46041544c8cf6a1., hdfs =&gt; hdfs://dev-hdfs/apps/hbase/data/data/default/YOUR_TABLE/3dab1e5fc8211112c46041544c8cf6a1, deployed =&gt; , replicaId =&gt; 0 &#125; not deployed on any region server.</span><br><span class="line">ERROR: Region &#123; meta =&gt; YOUR_TABLE,0,1565318245911.157723c2d47bbae2226f6286a56f0256., hdfs =&gt; hdfs://dev-hdfs/apps/hbase/data/data/default/YOUR_TABLE/157723c2d47bbae2226f6286a56f0256, deployed =&gt; , replicaId =&gt; 0 &#125; not deployed on any region server.</span><br><span class="line">ERROR: Region &#123; meta =&gt; YOUR_TABLE,3,1565318245911.8e6507c0aa0ba2f7864fb6adbab58cd4., hdfs =&gt; hdfs://dev-hdfs/apps/hbase/data/data/default/YOUR_TABLE/8e6507c0aa0ba2f7864fb6adbab58cd4, deployed =&gt; , replicaId =&gt; 0 &#125; not deployed on any region server.</span><br><span class="line">ERROR: Region &#123; meta =&gt; YOUR_TABLE,f,1565318245911.a70001dfe6d9320600286510318bfeb6., hdfs =&gt; hdfs://dev-hdfs/apps/hbase/data/data/default/YOUR_TABLE/a70001dfe6d9320600286510318bfeb6, deployed =&gt; , replicaId =&gt; 0 &#125; not deployed on any region server.</span><br><span class="line">ERROR: Region &#123; meta =&gt; YOUR_TABLE,c,1565318245911.e247e3f852573308fd554e07452fbe93., hdfs =&gt; hdfs://dev-hdfs/apps/hbase/data/data/default/YOUR_TABLE/e247e3f852573308fd554e07452fbe93, deployed =&gt; , replicaId =&gt; 0 &#125; not deployed on any region server.</span><br><span class="line">2019-10-13 17:44:26,732 INFO  [main] util.HBaseFsck: Handling overlap merges in parallel. set hbasefsck.overlap.merge.parallel to false to run serially.</span><br><span class="line">ERROR: There is a hole in the region chain between 0 and 1.  You need to create a new .regioninfo and region dir in hdfs to plug the hole.</span><br><span class="line">ERROR: There is a hole in the region chain between 3 and 4.  You need to create a new .regioninfo and region dir in hdfs to plug the hole.</span><br><span class="line">ERROR: There is a hole in the region chain between 6 and 7.  You need to create a new .regioninfo and region dir in hdfs to plug the hole.</span><br><span class="line">ERROR: There is a hole in the region chain between 9 and a.  You need to create a new .regioninfo and region dir in hdfs to plug the hole.</span><br><span class="line">ERROR: There is a hole in the region chain between c and d.  You need to create a new .regioninfo and region dir in hdfs to plug the hole.</span><br><span class="line">ERROR: Last region should end with an empty key. You need to create a new region and regioninfo in HDFS to plug the hole.</span><br><span class="line">ERROR: Found inconsistency in table YOUR_TABLE</span><br><span class="line">2019-10-13 17:44:26,747 INFO  [main] util.HBaseFsck: Computing mapping of all store files</span><br><span class="line">...</span><br><span class="line">2019-10-13 17:44:30,038 INFO  [main] util.HBaseFsck: Finishing hbck</span><br><span class="line">Summary:</span><br><span class="line">Table YOUR_TABLE is inconsistent.</span><br><span class="line">    Number of regions: 11</span><br><span class="line">    Deployed on:  dev4,16020,1570795191487 dev5,16020,1570795198827</span><br><span class="line">Table hbase:meta is okay.</span><br><span class="line">    Number of regions: 1</span><br><span class="line">    Deployed on:  dev5,16020,1570795198827</span><br><span class="line">12 inconsistencies detected.</span><br><span class="line">Status: INCONSISTENT</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191012204717.png" alt="hbase hbck 查看输出日志 - 1" title="hbase hbck 查看输出日志 - 1"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191012204734.png" alt="hbase hbck 查看输出日志 - 2" title="hbase hbck 查看输出日志 - 2"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191012204747.png" alt="hbase hbck 查看输出日志 - 3" title="hbase hbck 查看输出日志 - 3"></p><p>首先注意到前面那个不存在的 <code>Region</code> <code>a70001dfe6d9320600286510318bfeb6</code> 处于未部署状态，<code>RegionServer</code> 当然无法找到了。</p><p>可以看到最终的结论：<code>INCONSISTENT</code>，就是数据不一致。并且在输出日志里面还有说明出现了 <code>Region</code> 空洞【<code>Region hole</code>】。</p><p>那怎么解决呢，可以先尝试使用 <code>hbase hbck -fix&quot;YOUR_TABLE&quot;</code> 解决。</p><p>这里如果遇到操作 <code>HDFS</code> 无权限，记得切换用户 <code>export HADOOP_USER_NAME=hbase</code>，当然最好还是直接使用管理员权限操作：<br><code>sudo -u hbase hbase hbck -fix&quot;YOUR_TABLE&quot;</code>。</p><p>在修复过程中，仍旧会不断输出日志，如果看到：<br><code>util.HBaseFsck: Sleeping 10000ms before re-checking after fix...</code><br>则说明修复完成，为了验证修复结果，<code>HBase</code> 还会自动检测一次。</p><p>再次检测后，如果看到如下信息，说明修复成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Summary:</span><br><span class="line">Table YOUR_TABLE is okay.</span><br><span class="line">    Number of regions: 17</span><br><span class="line">2019-10-13 18:20:02,145 INFO  [main-EventThread] zookeeper.ClientCnxn: EventThread shut down</span><br><span class="line">    Deployed on:  dev4,16020,1570795191487 dev5,16020,1570795198827</span><br><span class="line">Table hbase:meta is okay.</span><br><span class="line">    Number of regions: 1</span><br><span class="line">    Deployed on:  dev5,16020,1570795198827</span><br><span class="line">0 inconsistencies detected.</span><br><span class="line">Status: OK</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191012204942.png" alt="hbase hbck fix 修复完成" title="hbase hbck fix 修复完成"></p><p>接着就可以继续正常写入数据了。</p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注 </h1><p> 参考 <code>stackoverflow</code> 上面的例子：<a href="https://stackoverflow.com/questions/37507878/hbase-fails-with-org-apache-hadoop-hbase-notservingregionexception-region-is-not" target="_blank" rel="noopener">notservingregionexception</a> 。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在使用 &lt;code&gt;SparkStreaming&lt;/code&gt; 程序处理数据，结果写入 &lt;code&gt;HBase&lt;/code&gt; 时，遇到异常 &lt;code&gt;NotServingRegionException&lt;/code&gt;，只是突然出现一次，平时正常，怀疑是和开发环境有关，本文记录查找问题的过程。本文中涉及的开发环境为 &lt;code&gt;HBase v1.1.2&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="HBase" scheme="https://www.playpi.org/tags/HBase/"/>
    
      <category term="SparkStreaming" scheme="https://www.playpi.org/tags/SparkStreaming/"/>
    
  </entry>
  
  <entry>
    <title>Git 异常之 Unlink of file</title>
    <link href="https://www.playpi.org/2019100801.html"/>
    <id>https://www.playpi.org/2019100801.html</id>
    <published>2019-10-08T12:48:39.000Z</published>
    <updated>2019-10-08T12:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:11 GMT+0800 (China Standard Time) --><p>在使用 <code>Git</code> 的时候，出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unlink of file &apos;.git/objects/pack/pack-xx.idx&apos; failed. Should I try again? (y/n)</span><br></pre></td></tr></table></figure><p>连续出现几十次，看起来像是 <code>Git</code> 在操作索引文件时被拒绝了，可能是文件权限问题，或者文件被占用。</p><p>本文内容中涉及的 <code>Git</code> 版本为：<code>2.18.0.windows.1</code>，操作系统为：<code>Windows 7x64</code>。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 在对一个普通的 <code>Git</code> 项目进行 <code>git pull</code> 操作的时候，出现错误，显示如下的交互询问内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; failed. Should I try again? (y/n) </span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-670222495fa872c140e7e231e36cb2701d76c86b.idx&apos; failed. Should I try again? (y/n) </span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6acdf7d3bbb7394f39b68e0e40b47ca0116fbfa2.idx&apos; failed. Should I try again? (y/n) </span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6ffde68d8af2eafb0803063b895291418ed5f465.idx&apos; failed. Should I try again? (y/n)</span><br></pre></td></tr></table></figure><p>尝试手动输入 <code>y</code> 或者 <code>n</code>，并没有什么效果，输入 <code>y</code> 后同样的错误会继续出现，输入 <code>n</code> 会接着提示下一个类似的文件错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; iled. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-61113bb66bb6a4dcc0893ee5e0b36bf30cf917e6.idx&apos; failed. Should I try again? (y/n) n</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-670222495fa872c140e7e231e36cb2701d76c86b.idx&apos; failed. Should I try again? (y/n) n</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6acdf7d3bbb7394f39b68e0e40b47ca0116fbfa2.idx&apos; failed. Should I try again? (y/n) n</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6ffde68d8af2eafb0803063b895291418ed5f465.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6ffde68d8af2eafb0803063b895291418ed5f465.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6ffde68d8af2eafb0803063b895291418ed5f465.idx&apos; failed. Should I try again? (y/n) y</span><br><span class="line">Unlink of file &apos;.git/objects/pack/pack-6ffde68d8af2eafb0803063b895291418ed5f465.idx&apos; failed. Should I try again? (y/n) y</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191008210804.png" alt="Git 文件被占用" title="Git 文件被占用"></p><p>可见是要把所有同类型的文件全部询问一次，看起来问题没那么简单。</p><p>如果有耐心的话，连续输入几十次 <code>n</code>，可能会把所有的文件都忽略掉，提示也就结束了，或者直接使用 <code>ctrl + c</code> 结束操作，强制退出，但是这样操作并没有从根本上解决这个问题。</p><h1 id="分析解决"><a href="# 分析解决" class="headerlink" title="分析解决"></a>分析解决 </h1><p> 经过查询分析，这个问题的根本原因是 <code>Git</code> 项目的文件被其它程序占用，导致 <code>Git</code> 没有权限变更这些文件。这些文件是 <code>Git</code> 产生的临时文件，需要从 <code>Git</code> 的工作区移除。</p><p>上面提及的其它程序极有可能是 <code>IDEA</code>、<code>Eclipse</code>、<code>Visual Studio</code> 等常用的开发工具。</p><p>参考：<a href="https://stackoverflow.com/questions/4389833/unlink-of-file-failed-should-i-try-again" target="_blank" rel="noopener">stackoverflow.com</a> 。</p><p>解决方案也很简单，把占用文件的程序关闭就行。但是有时候找不到是哪个程序占用了文件，怎么办，可以利用微软的 <code>Process Explorer</code> 工具，具体介绍参考备注内容。</p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注 </h1><p>1、<code>Process Explorer</code> 是一个任务管理器，目前由微软开发，仅用于 <code>Windows</code> 操作系统平台，可以查看系统的进程信息、资源占用信息、文件占用信息，官网地址：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer" target="_blank" rel="noopener">Process Explorer</a> 。</p><p> 同时，这个工具目前在 <code>GitHub</code> 上已经开源，并重新命名为：<code>sysinternals</code>，<code>GitHub</code> 的地址：<a href="https://github.com/MicrosoftDocs/sysinternals/tree/live" target="_blank" rel="noopener">sysinternals</a> 。</p><p>使用时无需安装，解压后直接可以运行，在主界面依次选择 <code>Find</code> -&gt; <code>Find Handle or DLL</code>，在搜索框中输入程序的名字、文件的名字，点击搜索，就可以看到搜索结果了，例如正在运行的进程、文件的使用情况等。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191008210836.png" alt="使用 Process Explorer 查看文件占用情况" title="使用 Process Explorer 查看文件占用情况"></p><p>2、我留意到在上述的 <code>stackoverflow</code> 链接中，也有人建议先使用 <code>git gc</code> 来手动执行一下垃圾清理，把临时文件给清理掉，然才进行 <code>git pull</code> 操作。我没有测试过，但感觉也有道理，读者可以试试。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:11 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在使用 &lt;code&gt;Git&lt;/code&gt; 的时候，出现错误：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Unlink of file &amp;apos;.git/objects/pack/pack-xx.idx&amp;apos; failed. Should I try again? (y/n)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;连续出现几十次，看起来像是 &lt;code&gt;Git&lt;/code&gt; 在操作索引文件时被拒绝了，可能是文件权限问题，或者文件被占用。&lt;/p&gt;&lt;p&gt;本文内容中涉及的 &lt;code&gt;Git&lt;/code&gt; 版本为：&lt;code&gt;2.18.0.windows.1&lt;/code&gt;，操作系统为：&lt;code&gt;Windows 7x64&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Git" scheme="https://www.playpi.org/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用海龟绘图绘制一面五星红旗</title>
    <link href="https://www.playpi.org/2019100101.html"/>
    <id>https://www.playpi.org/2019100101.html</id>
    <published>2019-10-01T14:57:58.000Z</published>
    <updated>2019-10-23T14:57:58.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:11 GMT+0800 (China Standard Time) --><p>今天是国庆节，中国正在举行建国七十周年大阅兵，很多人都在观看，我在家里也看了直播片段。在刷微博的过程中，无意中看到有人在介绍 <strong>海龟绘图 </strong>这个 <code>Python</code> 库，可以非常方便地绘制各种图形，其中有人提到可以绘制出一面五星红旗。</p><p>后来我查了一下，的确是可以，难度不大，只要理解基本的绘制流程即可，于是我尝试了一下，并成功绘制出一面五星红旗。本文记录过程，开发环境基于 <code>Python v3.8</code>、<code>Windows 10 x64</code>。</p><a id="more"></a><h1 id="绘制思路"><a href="# 绘制思路" class="headerlink" title="绘制思路"></a>绘制思路 </h1><p> 绘制思路很简单，不过在这里需要先理解坐标轴、画笔的颜色、背景色、角度等基础概念。</p><p>1、先设置弹框大小，也就是五星红旗的长、宽，单位是像素。</p><p>2、设置背景颜色为红色，设置五角星的线条、填充颜色都为黄色。</p><p>3、绘制中心的 1 个大五角星。</p><p>4、绘制边上的 4 个小五角星。</p><h1 id="绘制代码"><a href="# 绘制代码" class="headerlink" title="绘制代码"></a>绘制代码 </h1><p> 需要注意除了 <code>Python</code> 环境，还需要安装海龟绘图库，我使用的 <code>Python v3.8</code> 已经自带了这个库，如果读者有使用这个版本的 <code>Python</code> 则不需要再单独安装。如果是其它版本的 <code>Python</code>，可能缺失这个库，可以使用 <code>pip</code> 工具安装，参考安装命令：<code>pip install turtle</code>。</p><p>当然，可能还会有其它依赖缺失问题，不属于本文讨论的范围，请读者自行解决。</p><p>提醒读者，这里涉及到的代码已经被我上传至 <code>Github</code>，命名为：<code>__main__.py</code>，读者可以提前下载查看：<a href="https://github.com/iplaypi/iplaypipython/blob/master/iplaypipython/20191001/__main__.py" target="_blank" rel="noopener">main.py</a> 。</p><p>下面给出代码清单，包含注释，读者很容易看懂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># 从海龟绘图模块中导入全部函数 </span><br><span class="line"># 在 Python v3.8 中已经内置此模块，如果其它 Python 版本没有内置，需要使用 pip 安装 </span><br><span class="line">from turtle import *</span><br><span class="line"></span><br><span class="line"># 开始绘制五星红旗 </span><br><span class="line">def daw_flag ():</span><br><span class="line">    # 设置大小，4 个参数：宽度、高度、起始值 x 轴、起始值 y 轴 </span><br><span class="line">    setup (600, 400, 0, 0)</span><br><span class="line">    # 设置背景为红色 </span><br><span class="line">    bgcolor (&apos;red&apos;)</span><br><span class="line">    # 线条、填充颜色设置为黄色 </span><br><span class="line">    fillcolor (&apos;yellow&apos;)</span><br><span class="line">    color (&apos;yellow&apos;)</span><br><span class="line">    # 画笔运行速度 </span><br><span class="line">    speed (10)</span><br><span class="line"></span><br><span class="line">    # 大五角星绘制 </span><br><span class="line">    draw_star (-280, 100, 0, 150, 144, 0)</span><br><span class="line"></span><br><span class="line">    # 4 个小五角星绘制 </span><br><span class="line">    draw_star (-100, 180, 305, 50, 0, 144)</span><br><span class="line">    draw_star (-50, 110, 30, 50, 144, 0)</span><br><span class="line">    draw_star (-40, 50, 5, 50, 144, 0)</span><br><span class="line">    draw_star (-100, 10, 300, 50, 0, 144)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># 绘制五角星的方法，根据实际情况传入参数 </span><br><span class="line">def draw_star (gotox_val, gotoy_val, heading_val=0, fd_val=50, rt_val=0, lt_val=0):</span><br><span class="line">    # 开始填充 </span><br><span class="line">    begin_fill ()</span><br><span class="line">    # 提起画笔，此时可以任意移动画笔位置 </span><br><span class="line">    up ()</span><br><span class="line">    # 移动至指定坐标 </span><br><span class="line">    goto (gotox_val, gotoy_val)</span><br><span class="line">    # 设置朝向角度 </span><br><span class="line">    if (0 != heading):</span><br><span class="line">        setheading (heading_val)</span><br><span class="line">    # 放下画笔，此时再移动就开始绘制 </span><br><span class="line">    down ()</span><br><span class="line">    # for 循环，绘制 5 条边 </span><br><span class="line">    for i in range (5):</span><br><span class="line">        # forward，向前移动画笔指定单位，像素 </span><br><span class="line">        fd (fd_val)</span><br><span class="line">        if (0 != rt_val):</span><br><span class="line">            # right，向右旋转指定单位，度数 </span><br><span class="line">            rt (rt_val)</span><br><span class="line">        if (0 != lt_val):</span><br><span class="line">            # left，向左旋转指定单位，度数 </span><br><span class="line">            lt (lt_val)</span><br><span class="line">    # 结束填充 </span><br><span class="line">    end_fill ()</span><br><span class="line"></span><br><span class="line"># 程序入口 </span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    print (&apos; 开始绘制五星红旗 & apos;)</span><br><span class="line">    daw_flag ()</span><br><span class="line">    print (&apos; 结束绘制五星红旗 & apos;)</span><br><span class="line">    exitonclick ()</span><br><span class="line">    # input (&apos; 暂停，等待输入（输入任意内容按回车键可退出）：&apos;)</span><br></pre></td></tr></table></figure><p>可以看到，代码中有 3 个函数：主函数 <code>__main__</code>、绘制五星红旗函数 <code>draw_flag</code>、绘制五角星函数 <code>draw_star</code>，这 3 个函数存在调用关系，共同绘制出一面五星红旗。</p><p>我这里故意把绘制速度设置小一点，读者在运行过程中可以清楚地看到绘制的过程，点的移动、线的绘制可以看得很清楚。</p><p>运行结果。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191031005634.png" alt="运行结果" title="运行结果"></p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注</h1><p>1、<code>Python</code> 官方网站参考：<a href="https://www.python.org" target="_blank" rel="noopener">Python</a> 。</p><p>2、在 <code>Windows</code> 平台安装 <code>Python</code> 需要注意版本的选择，是 32 位还是 64 位要搞清楚，不然后续会引发一系列麻烦，哪怕卸载重装也会有麻烦。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:11 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天是国庆节，中国正在举行建国七十周年大阅兵，很多人都在观看，我在家里也看了直播片段。在刷微博的过程中，无意中看到有人在介绍 &lt;strong&gt;海龟绘图 &lt;/strong&gt;这个 &lt;code&gt;Python&lt;/code&gt; 库，可以非常方便地绘制各种图形，其中有人提到可以绘制出一面五星红旗。&lt;/p&gt;&lt;p&gt;后来我查了一下，的确是可以，难度不大，只要理解基本的绘制流程即可，于是我尝试了一下，并成功绘制出一面五星红旗。本文记录过程，开发环境基于 &lt;code&gt;Python v3.8&lt;/code&gt;、&lt;code&gt;Windows 10 x64&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Python" scheme="https://www.playpi.org/tags/Python/"/>
    
      <category term="Turtle" scheme="https://www.playpi.org/tags/Turtle/"/>
    
      <category term="national" scheme="https://www.playpi.org/tags/national/"/>
    
  </entry>
  
  <entry>
    <title>HBase 错误之 NoClassDefFoundError：ProtobufUtil</title>
    <link href="https://www.playpi.org/2019093001.html"/>
    <id>https://www.playpi.org/2019093001.html</id>
    <published>2019-09-30T12:34:04.000Z</published>
    <updated>2019-10-01T12:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>背景说明：通过 <code>dubbo</code> 部署一个服务，服务中的业务逻辑会查询 <code>HBase</code> 表的数据，但是 <code>dubbo</code> 服务在初始化注册时，<code>HBase</code> 初始化的过程中会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.hbase.protobuf.ProtobufUtil</span><br></pre></td></tr></table></figure><p>本文涉及的开发环境，基于 <code>HBase v1.1.2</code>、<code>Zookeeper v3.4.6</code>、<code>dubbo v2.8.4</code>、<code>Hadoop v2.7.1</code>。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 通过 <code>k8s</code> 多节点发布服务，但是只有在某一台机器上面出现错误【其它节点日志显示正常，也可以提供正常的服务】，发布后 <code>dubbo</code> 服务注册初始化时出现的错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">2019-09-19_18:03:49 [http-nio-28956-exec-2-SendThread (192.168.20.101:2181)] INFO zookeeper.ClientCnxn:852: Socket connection established to 192.168.20.101/192.168.20.101:2181, initiating session</span><br><span class="line">2019-09-19_18:03:49 [http-nio-28956-exec-2-SendThread (192.168.20.101:2181)] INFO zookeeper.ClientCnxn:1235: Session establishment complete on server 192.168.20.101/192.168.20.101:2181, sessionid = 0x36af032f505e830, negotiated timeout = 90000</span><br><span class="line">2019-09-19_18:03:50 [http-nio-28956-exec-2] WARN hdfs.DFSUtil:689: Namenode for hdfs-cluster remains unresolved for ID nn1.  Check your hdfs-site.xml file to ensure namenodes are configured properly.</span><br><span class="line">2019-09-19_18:03:50 [http-nio-28956-exec-9] ERROR filter.ExceptionFilter:87:  [DUBBO] Got unchecked and undeclared exception which called by 10.200.0.2. service: com.yyy.zzz.service.es.weibo.IXxxService, method: search, exception: java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.hbase.protobuf.ProtobufUtil, dubbo version: 2.8.4, current host: 127.0.0.1</span><br><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.hbase.protobuf.ProtobufUtil</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.getMetaRegionState (MetaTableLocator.java:482)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.getMetaRegionLocation (MetaTableLocator.java:167)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:598)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:579)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:558)</span><br><span class="line">at org.apache.hadoop.hbase.client.ZooKeeperRegistry.getMetaRegionLocation (ZooKeeperRegistry.java:61)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateMeta (ConnectionManager.java:1192)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1159)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.relocateRegion (ConnectionManager.java:1133)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegionInMeta (ConnectionManager.java:1338)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1162)</span><br><span class="line">at org.apache.hadoop.hbase.client.AsyncProcess$AsyncRequestFutureImpl.findAllLocationsOrFail (AsyncProcess.java:940)</span><br><span class="line">at org.apache.hadoop.hbase.client.AsyncProcess$AsyncRequestFutureImpl.groupAndSendMultiAction (AsyncProcess.java:857)</span><br><span class="line">at org.apache.hadoop.hbase.client.AsyncProcess$AsyncRequestFutureImpl.access$100 (AsyncProcess.java:575)</span><br><span class="line">at org.apache.hadoop.hbase.client.AsyncProcess.submitAll (AsyncProcess.java:557)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.batch (HTable.java:933)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.batch (HTable.java:950)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:911)</span><br><span class="line">at com.yyy.zzz.commons.search.reader.hbase.BaseHBaseReader.batchGet (BaseHBaseReader.java:94)</span><br><span class="line">at com.yyy.zzz.commons.search.reader.hbase.weibo.WeiboContentHbaseReader.batchGet (WeiboContentHbaseReader.java:98)</span><br><span class="line">at com.yyy.zzz.commons.search.searcher.AbstractBaseSearcher.getContent (AbstractBaseSearcher.java:269)</span><br><span class="line">at com.yyy.zzz.commons.search.searcher.AbstractBaseSearcher.getInfo (AbstractBaseSearcher.java:188)</span><br><span class="line">at com.yyy.zzz.runner.search.BaseSearchRunner.search (BaseSearchRunner.java:89)</span><br><span class="line">at com.yyy.zzz.api.weibo.WeiboContentServiceImpl.search (WeiboContentServiceImpl.java:33)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.Wrapper3.invokeMethod (Wrapper3.java)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke (JavassistProxyFactory.java:46)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke (AbstractProxyInvoker.java:72)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke (InvokerWrapper.java:53)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke (ExceptionFilter.java:64)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke (MonitorFilter.java:75)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke (TimeoutFilter.java:42)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke (TraceFilter.java:78)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke (ContextFilter.java:70)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke (GenericFilter.java:132)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke (ClassLoaderFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke (EchoFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke (InvokerInvocationHandler.java:52)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.proxy1.search (proxy1.java)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke (Method.java:498)</span><br><span class="line">at org.jboss.resteasy.core.MethodInjectorImpl.invoke (MethodInjectorImpl.java:137)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget (ResourceMethodInvoker.java:288)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:242)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:229)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:356)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:179)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service (ServletContainerDispatcher.java:220)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:56)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:51)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle (DubboHttpServer.java:86)</span><br><span class="line">at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service (DispatcherServlet.java:64)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter (ApplicationFilterChain.java:291)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter (ApplicationFilterChain.java:206)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke (StandardWrapperValve.java:219)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke (StandardContextValve.java:106)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke (AuthenticatorBase.java:504)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke (StandardHostValve.java:142)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke (ErrorReportValve.java:79)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke (StandardEngineValve.java:88)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service (CoyoteAdapter.java:534)</span><br><span class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process (AbstractHttp11Processor.java:1081)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process (AbstractProtocol.java:658)</span><br><span class="line">at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process (Http11NioProtocol.java:222)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun (NioEndpoint.java:1566)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run (NioEndpoint.java:1523)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run (TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br></pre></td></tr></table></figure><p>注意查看重点的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-09-19_18:03:50 [http-nio-28956-exec-2] WARN hdfs.DFSUtil:689: Namenode for hdfs-cluster remains unresolved for ID nn1.  Check your hdfs-site.xml file to ensure namenodes are configured properly.</span><br><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.hbase.protobuf.ProtobufUtil</span><br></pre></td></tr></table></figure><p>第一行是 <code>hdfs</code> 无法解析 <code>HA</code> 的域名，应该是系统环境问题；第二行是 <code>HBase</code> 初始化环境失败，看起来像是缺失依赖包或者依赖包冲突导致的 <code>NoClassDefFoundError</code>。</p><p>同时还出现了未知主机名异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">com.yyy.zzz.exception.es.EsConnException: java.net.UnknownHostException: host40: Temporary failure in name resolution</span><br><span class="line">at com.yyy.zzz.commons.infrastructure.client.EsClient.&lt;init&gt;(EsClient.java:46)</span><br><span class="line">at com.yyy.zzz.commons.infrastructure.client.EsClient.getInstance (EsClient.java:57)</span><br><span class="line">at com.yyy.zzz.commons.search.searcher.AbstractBaseSearcher.&lt;init&gt;(AbstractBaseSearcher.java:69)</span><br><span class="line">at com.yyy.zzz.commons.search.searcher.weibo.WeiboContentSearcher.&lt;init&gt;(WeiboContentSearcher.java:14)</span><br><span class="line">at com.yyy.zzz.commons.search.searcher.weibo.WeiboContentSearcher.getInstance (WeiboContentSearcher.java:22)</span><br><span class="line">at com.yyy.zzz.runner.search.weibo.WeiboContentSearchRunner.&lt;init&gt;(WeiboContentSearchRunner.java:26)</span><br><span class="line">at com.yyy.zzz.runner.search.weibo.WeiboContentSearchRunner.&lt;init&gt;(WeiboContentSearchRunner.java:20)</span><br><span class="line">at com.yyy.zzz.api.weibo.WeiboContentServiceImpl.search (WeiboContentServiceImpl.java:32)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.Wrapper3.invokeMethod (Wrapper3.java)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke (JavassistProxyFactory.java:46)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke (AbstractProxyInvoker.java:72)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke (InvokerWrapper.java:53)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke (ExceptionFilter.java:64)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke (MonitorFilter.java:75)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke (TimeoutFilter.java:42)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke (TraceFilter.java:78)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke (ContextFilter.java:70)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke (GenericFilter.java:132)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke (ClassLoaderFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke (EchoFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke (InvokerInvocationHandler.java:52)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.proxy1.search (proxy1.java)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke (Method.java:498)</span><br><span class="line">at org.jboss.resteasy.core.MethodInjectorImpl.invoke (MethodInjectorImpl.java:137)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget (ResourceMethodInvoker.java:288)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:242)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:229)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:356)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:179)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service (ServletContainerDispatcher.java:220)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:56)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:51)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle (DubboHttpServer.java:86)</span><br><span class="line">at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service (DispatcherServlet.java:64)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter (ApplicationFilterChain.java:291)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter (ApplicationFilterChain.java:206)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke (StandardWrapperValve.java:219)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke (StandardContextValve.java:106)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke (AuthenticatorBase.java:504)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke (StandardHostValve.java:142)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke (ErrorReportValve.java:79)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke (StandardEngineValve.java:88)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service (CoyoteAdapter.java:534)</span><br><span class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process (AbstractHttp11Processor.java:1081)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process (AbstractProtocol.java:658)</span><br><span class="line">at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process (Http11NioProtocol.java:222)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun (NioEndpoint.java:1566)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run (NioEndpoint.java:1523)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run (TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">Caused by: java.net.UnknownHostException: host40: Temporary failure in name resolution</span><br><span class="line">at java.net.Inet6AddressImpl.lookupAllHostAddr (Native Method)</span><br><span class="line">at java.net.InetAddress$2.lookupAllHostAddr (InetAddress.java:928)</span><br><span class="line">at java.net.InetAddress.getAddressesFromNameService (InetAddress.java:1323)</span><br><span class="line">at java.net.InetAddress.getAllByName0 (InetAddress.java:1276)</span><br><span class="line">at java.net.InetAddress.getAllByName (InetAddress.java:1192)</span><br><span class="line">at java.net.InetAddress.getAllByName (InetAddress.java:1126)</span><br><span class="line">at java.net.InetAddress.getByName (InetAddress.java:1076)</span><br><span class="line">at com.yyy.zzz.commons.infrastructure.client.EsClient.&lt;init&gt;(EsClient.java:43)</span><br><span class="line">... 64 more</span><br></pre></td></tr></table></figure><p>同时，在之后的请求中，只要是转发到这个服务节点的请求，就会出现如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.yyy.zzz.exception.hbase.HBaseException: java.lang.reflect.InvocationTargetException</span><br><span class="line">Caused by: java.io.IOException: java.lang.reflect.InvocationTargetException</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionFactory.createConnection (ConnectionFactory.java:240)</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionManager.createConnection (ConnectionManager.java:433)</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionManager.createConnection (ConnectionManager.java:426)</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionManager.getConnectionInternal (ConnectionManager.java:304)</span><br><span class="line">    at org.apache.hadoop.hbase.client.HTable.&lt;init&gt;(HTable.java:185)</span><br><span class="line">    at org.apache.hadoop.hbase.client.HTableFactory.createHTableInterface (HTableFactory.java:41)</span><br><span class="line">    ... 18 more</span><br></pre></td></tr></table></figure><p>通过排查代码，这个异常是在业务逻辑代码连接 <code>HBase</code> 表取数时出现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hTableInterface.get (List&lt;Get&gt;)</span><br></pre></td></tr></table></figure><p>每一次连接 <code>HBase</code> 取数，都会有这个异常出现。</p><h1 id="问题排查"><a href="# 问题排查" class="headerlink" title="问题排查"></a>问题排查 </h1><p> 首先怀疑的是 <code>protobuf</code> 版本冲突问题，但是通过对比，发现只有一个确定版本的 <code>jar</code> 包，而且对比其它节点，并没有这个问题出现，最终否定了这个猜测。</p><p>接着尝试发送多次请求，查看日志，以下错误不再出现【也很合理，这些异常是在服务注册初始化时只出现一次】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.hbase.protobuf.ProtobufUtil</span><br><span class="line">com.yyy.zzz.exception.es.EsConnException: java.net.UnknownHostException: host40: Temporary failure in name resolution</span><br></pre></td></tr></table></figure><p>反而出现的全部是 <code>HBase</code> 取数异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.yyy.zzz.exception.hbase.HBaseException: java.lang.reflect.InvocationTargetException</span><br><span class="line">Caused by: java.io.IOException: java.lang.reflect.InvocationTargetException</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionFactory.createConnection (ConnectionFactory.java:240)</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionManager.createConnection (ConnectionManager.java:433)</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionManager.createConnection (ConnectionManager.java:426)</span><br><span class="line">    at org.apache.hadoop.hbase.client.ConnectionManager.getConnectionInternal (ConnectionManager.java:304)</span><br><span class="line">    at org.apache.hadoop.hbase.client.HTable.&lt;init&gt;(HTable.java:185)</span><br><span class="line">    at org.apache.hadoop.hbase.client.HTableFactory.createHTableInterface (HTableFactory.java:41)</span><br><span class="line">    ... 18 more</span><br></pre></td></tr></table></figure><p>更神奇的是，只在一台节点上面有问题，其它相同功能的节点没问题。</p><p>最终，通过运维排查，从 <code>NoClassDefFoundError</code> 以及 <code>UnknownHostException</code> 发现了异常原因：在某个时间点发布服务时，恰好此时机器负载过高，导致 <code>DNS</code> 解析异常，于是 <code>dubbo</code> 服务在注册时无法获取 <code>hdfs</code> 信息。而 <code>HBase</code> 在初始化时需要依赖 <code>hdfs</code> 上面的某个 <code>hbase.version</code> 文件【用来确定 <code>HBase</code> 的版本】，导致 <code>HBase</code> 在初始化时无法找到这个文件，也就无法确定版本，最终没有加载 <code>ProtobufUtil</code> 类文件。</p><p><code>hdfs-site.xml</code> 配置文件中的重要内容如下，<code>nn1</code> 节点无法被识别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.ha.namenodes.hdfs-cluster&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p><code>hbase-site.xml</code> 配置文件中的重要内容如下，对于 <code>HBase</code> 来说，这个 <code>hdfs</code> 路径里面存放着重要的信息，如果无法读取它也就无法成功初始化 <code>HBase</code> 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://hdfs-cluster/apps/hbase/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>所以此后所有的请求需要连接 <code>HBase</code> 取数时，都会出现 <code>java.lang.reflect.InvocationTargetException</code> 异常。</p><p>这里会进一步引发一个严重的问题，由于 <code>dubbo</code> 服务在注册时出现问题没有退出，仍旧提供服务，但是这个服务是有问题的，每次需要连接 <code>HBase</code> 取数时都会出现异常，由于没有处理好异常，导致大量的 <code>Zookeeper</code> 连接没有关闭。</p><p>进一步导致当前机器的 <code>Zookeeper</code> 连接数接近 1000 个，严重影响了其它业务连接 <code>Zookeeper</code>，一律是等待、超时重试。</p><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 找到问题原因，就很容易解决了，重启对应的服务，观察初始化日志，一切正常。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;背景说明：通过 &lt;code&gt;dubbo&lt;/code&gt; 部署一个服务，服务中的业务逻辑会查询 &lt;code&gt;HBase&lt;/code&gt; 表的数据，但是 &lt;code&gt;dubbo&lt;/code&gt; 服务在初始化注册时，&lt;code&gt;HBase&lt;/code&gt; 初始化的过程中会报错：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.hbase.protobuf.ProtobufUtil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;本文涉及的开发环境，基于 &lt;code&gt;HBase v1.1.2&lt;/code&gt;、&lt;code&gt;Zookeeper v3.4.6&lt;/code&gt;、&lt;code&gt;dubbo v2.8.4&lt;/code&gt;、&lt;code&gt;Hadoop v2.7.1&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="Hadoop" scheme="https://www.playpi.org/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://www.playpi.org/tags/HBase/"/>
    
      <category term="Zookeeper" scheme="https://www.playpi.org/tags/Zookeeper/"/>
    
      <category term="dubbo" scheme="https://www.playpi.org/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>HBase 错误之 ConnectionLoss for hbase-unsecure</title>
    <link href="https://www.playpi.org/2019092901.html"/>
    <id>https://www.playpi.org/2019092901.html</id>
    <published>2019-09-29T13:11:53.000Z</published>
    <updated>2019-09-30T13:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在当前的业务中，需要连接 <code>HBase</code> 获取数据，但是最近在某一台节点上面的进程总是出现连接异常，类似下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-09-20_18:54:44 [http-nio-28956-exec-5] WARN zookeeper.ZKUtil:629: hconnection-0x8a9f6680x0, quorum=host1:2181,host10:2181,host11:2181,host61:2181,host62:2181, baseZNode=/hbase-unsecure Unable to get data of znode /hbase-unsecure/meta-region-server</span><br><span class="line">org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hbase-unsecure/meta-region-server</span><br><span class="line">at org.apache.zookeeper.KeeperException.create (KeeperException.java:99)</span><br></pre></td></tr></table></figure><p>看起来是连接超时，然后重试，日志中持续了多次。本文开发环境基于 <code>HBase v1.1.2</code>、<code>Zookeeper v3.4.6</code>、<code>Hadoop v2.7.1</code>。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 一个正常的连接 <code>HBase</code> 取数的服务，在某个节点上出现大量的异常日志，无法连接到 <code>HBase</code>，一直在重试，同时观察到在其它节点上相同的服务却是正常的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">2019-09-20_18:54:44 [http-nio-28956-exec-5] ERROR zookeeper.RecoverableZooKeeper:277: ZooKeeper getData failed after 4 attempts</span><br><span class="line">2019-09-20_18:54:44 [http-nio-28956-exec-5] WARN zookeeper.ZKUtil:629: hconnection-0x8a9f6680x0, quorum=host1:2181,host10:2181,host11:2181,host61:2181,host62:2181, baseZNode=/hbase-unsecure Unable to get data of znode /hbase-unsecure/meta-region-server</span><br><span class="line">org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hbase-unsecure/meta-region-server</span><br><span class="line">at org.apache.zookeeper.KeeperException.create (KeeperException.java:99)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create (KeeperException.java:51)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.getData (ZooKeeper.java:1155)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.getData (RecoverableZooKeeper.java:359)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZKUtil.getData (ZKUtil.java:621)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.getMetaRegionState (MetaTableLocator.java:481)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.getMetaRegionLocation (MetaTableLocator.java:167)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:598)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:579)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:558)</span><br><span class="line">at org.apache.hadoop.hbase.client.ZooKeeperRegistry.getMetaRegionLocation (ZooKeeperRegistry.java:61)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateMeta (ConnectionManager.java:1192)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1159)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCallerWithReadReplicas.getRegionLocations (RpcRetryingCallerWithReadReplicas.java:300)</span><br><span class="line">at org.apache.hadoop.hbase.client.ScannerCallableWithReplicas.call (ScannerCallableWithReplicas.java:152)</span><br><span class="line">at org.apache.hadoop.hbase.client.ScannerCallableWithReplicas.call (ScannerCallableWithReplicas.java:60)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithoutRetries (RpcRetryingCaller.java:200)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientSmallReversedScanner.loadCache (ClientSmallReversedScanner.java:211)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientSmallReversedScanner.next (ClientSmallReversedScanner.java:185)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegionInMeta (ConnectionManager.java:1256)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1162)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1146)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1103)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.getRegionLocation (ConnectionManager.java:938)</span><br><span class="line">at org.apache.hadoop.hbase.client.HRegionLocator.getRegionLocation (HRegionLocator.java:83)</span><br><span class="line">at org.apache.hadoop.hbase.client.RegionServerCallable.prepare (RegionServerCallable.java:79)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithRetries (RpcRetryingCaller.java:124)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:889)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:855)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:908)</span><br><span class="line">at com.xxx.yyy.commons.search.reader.hbase.BaseHBaseReader.batchGet (BaseHBaseReader.java:94)</span><br><span class="line">at com.xxx.yyy.commons.search.searcher.AbstractBaseSearcher.getContent (AbstractBaseSearcher.java:269)</span><br><span class="line">at com.xxx.yyy.commons.search.searcher.AbstractBaseSearcher.getInfo (AbstractBaseSearcher.java:194)</span><br><span class="line">at com.xxx.yyy.runner.search.BaseSearchRunner.combinaSearch (BaseSearchRunner.java:139)</span><br><span class="line">at com.xxx.yyy.api.newsforum.NewsForumPostServiceImpl.combinaSearch (NewsForumPostServiceImpl.java:53)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.Wrapper9.invokeMethod (Wrapper9.java)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke (JavassistProxyFactory.java:46)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke (AbstractProxyInvoker.java:72)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke (InvokerWrapper.java:53)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke (ExceptionFilter.java:64)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke (MonitorFilter.java:75)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke (TimeoutFilter.java:42)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke (TraceFilter.java:78)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke (ContextFilter.java:70)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke (GenericFilter.java:132)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke (ClassLoaderFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke (EchoFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke (InvokerInvocationHandler.java:52)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.proxy4.combinaSearch (proxy4.java)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor87.invoke (Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke (Method.java:498)</span><br><span class="line">at org.jboss.resteasy.core.MethodInjectorImpl.invoke (MethodInjectorImpl.java:137)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget (ResourceMethodInvoker.java:288)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:242)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:229)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:356)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:179)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service (ServletContainerDispatcher.java:220)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:56)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:51)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle (DubboHttpServer.java:86)</span><br><span class="line">at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service (DispatcherServlet.java:64)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter (ApplicationFilterChain.java:291)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter (ApplicationFilterChain.java:206)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke (StandardWrapperValve.java:219)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke (StandardContextValve.java:106)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke (AuthenticatorBase.java:504)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke (StandardHostValve.java:142)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke (ErrorReportValve.java:79)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke (StandardEngineValve.java:88)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service (CoyoteAdapter.java:534)</span><br><span class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process (AbstractHttp11Processor.java:1081)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process (AbstractProtocol.java:658)</span><br><span class="line">at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process (Http11NioProtocol.java:222)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun (NioEndpoint.java:1566)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run (NioEndpoint.java:1523)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run (TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-09-20_18:54:45 [http-nio-28956-exec-5] ERROR zookeeper.ZooKeeperWatcher:655: hconnection-0x8a9f6680x0, quorum=host1:2181,host10:2181,host11:2181,host61:2181,host62:2181, baseZNode=/hbase-unsecure Received unexpected KeeperException, re-throwing exception</span><br><span class="line">org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hbase-unsecure/meta-region-server</span><br><span class="line">at org.apache.zookeeper.KeeperException.create (KeeperException.java:99)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create (KeeperException.java:51)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.getData (ZooKeeper.java:1155)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.getData (RecoverableZooKeeper.java:359)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZKUtil.getData (ZKUtil.java:621)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.getMetaRegionState (MetaTableLocator.java:481)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.getMetaRegionLocation (MetaTableLocator.java:167)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:598)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:579)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.MetaTableLocator.blockUntilAvailable (MetaTableLocator.java:558)</span><br><span class="line">at org.apache.hadoop.hbase.client.ZooKeeperRegistry.getMetaRegionLocation (ZooKeeperRegistry.java:61)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateMeta (ConnectionManager.java:1192)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1159)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCallerWithReadReplicas.getRegionLocations (RpcRetryingCallerWithReadReplicas.java:300)</span><br><span class="line">at org.apache.hadoop.hbase.client.ScannerCallableWithReplicas.call (ScannerCallableWithReplicas.java:152)</span><br><span class="line">at org.apache.hadoop.hbase.client.ScannerCallableWithReplicas.call (ScannerCallableWithReplicas.java:60)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithoutRetries (RpcRetryingCaller.java:200)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientSmallReversedScanner.loadCache (ClientSmallReversedScanner.java:211)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientSmallReversedScanner.next (ClientSmallReversedScanner.java:185)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegionInMeta (ConnectionManager.java:1256)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1162)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1146)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.locateRegion (ConnectionManager.java:1103)</span><br><span class="line">at org.apache.hadoop.hbase.client.ConnectionManager$HConnectionImplementation.getRegionLocation (ConnectionManager.java:938)</span><br><span class="line">at org.apache.hadoop.hbase.client.HRegionLocator.getRegionLocation (HRegionLocator.java:83)</span><br><span class="line">at org.apache.hadoop.hbase.client.RegionServerCallable.prepare (RegionServerCallable.java:79)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithRetries (RpcRetryingCaller.java:124)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:889)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:855)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.get (HTable.java:908)</span><br><span class="line">at com.xxx.yyy.commons.search.reader.hbase.BaseHBaseReader.batchGet (BaseHBaseReader.java:94)</span><br><span class="line">at com.xxx.yyy.commons.search.searcher.AbstractBaseSearcher.getContent (AbstractBaseSearcher.java:269)</span><br><span class="line">at com.xxx.yyy.commons.search.searcher.AbstractBaseSearcher.getInfo (AbstractBaseSearcher.java:194)</span><br><span class="line">at com.xxx.yyy.runner.search.BaseSearchRunner.combinaSearch (BaseSearchRunner.java:139)</span><br><span class="line">at com.xxx.yyy.api.newsforum.NewsForumPostServiceImpl.combinaSearch (NewsForumPostServiceImpl.java:53)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.Wrapper9.invokeMethod (Wrapper9.java)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke (JavassistProxyFactory.java:46)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke (AbstractProxyInvoker.java:72)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke (InvokerWrapper.java:53)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke (ExceptionFilter.java:64)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke (MonitorFilter.java:75)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke (TimeoutFilter.java:42)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke (TraceFilter.java:78)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke (ContextFilter.java:70)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke (GenericFilter.java:132)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke (ClassLoaderFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke (EchoFilter.java:38)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke (ProtocolFilterWrapper.java:91)</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke (InvokerInvocationHandler.java:52)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.proxy4.combinaSearch (proxy4.java)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor87.invoke (Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke (Method.java:498)</span><br><span class="line">at org.jboss.resteasy.core.MethodInjectorImpl.invoke (MethodInjectorImpl.java:137)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget (ResourceMethodInvoker.java:288)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:242)</span><br><span class="line">at org.jboss.resteasy.core.ResourceMethodInvoker.invoke (ResourceMethodInvoker.java:229)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:356)</span><br><span class="line">at org.jboss.resteasy.core.SynchronousDispatcher.invoke (SynchronousDispatcher.java:179)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service (ServletContainerDispatcher.java:220)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:56)</span><br><span class="line">at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service (HttpServletDispatcher.java:51)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle (DubboHttpServer.java:86)</span><br><span class="line">at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service (DispatcherServlet.java:64)</span><br><span class="line">at javax.servlet.http.HttpServlet.service (HttpServlet.java:790)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter (ApplicationFilterChain.java:291)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter (ApplicationFilterChain.java:206)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke (StandardWrapperValve.java:219)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke (StandardContextValve.java:106)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke (AuthenticatorBase.java:504)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke (StandardHostValve.java:142)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke (ErrorReportValve.java:79)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke (StandardEngineValve.java:88)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service (CoyoteAdapter.java:534)</span><br><span class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process (AbstractHttp11Processor.java:1081)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process (AbstractProtocol.java:658)</span><br><span class="line">at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process (Http11NioProtocol.java:222)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun (NioEndpoint.java:1566)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run (NioEndpoint.java:1523)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run (TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">2019-09-20_18:54:45 [http-nio-28956-exec-10-SendThread (host1:2181)] INFO zookeeper.ClientCnxn:975: Opening socket connection to server host1/192.168.20.101:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">2019-09-20_18:54:45 [http-nio-28956-exec-10-SendThread (host1:2181)] INFO zookeeper.ClientCnxn:852: Socket connection established to host1/192.168.20.101:2181, initiating session</span><br><span class="line">2019-09-20_18:54:45 [http-nio-28956-exec-10-SendThread (host1:2181)] WARN zookeeper.ClientCnxn:1102: Session 0x0 for server host1/192.168.20.101:2181, unexpected error, closing socket connection and attempting reconnect</span><br><span class="line">java.io.IOException: Connection reset by peer</span><br><span class="line">at sun.nio.ch.FileDispatcherImpl.read0 (Native Method)</span><br><span class="line">at sun.nio.ch.SocketDispatcher.read (SocketDispatcher.java:39)</span><br><span class="line">at sun.nio.ch.IOUtil.readIntoNativeBuffer (IOUtil.java:223)</span><br><span class="line">at sun.nio.ch.IOUtil.read (IOUtil.java:192)</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.read (SocketChannelImpl.java:380)</span><br><span class="line">at org.apache.zookeeper.ClientCnxnSocketNIO.doIO (ClientCnxnSocketNIO.java:68)</span><br><span class="line">at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport (ClientCnxnSocketNIO.java:366)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.run (ClientCnxn.java:1081)</span><br></pre></td></tr></table></figure><p>注意查看重点内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-09-20_18:54:44 [http-nio-28956-exec-5] ERROR zookeeper.RecoverableZooKeeper:277: ZooKeeper getData failed after 4 attempts</span><br><span class="line">2019-09-20_18:54:44 [http-nio-28956-exec-5] WARN zookeeper.ZKUtil:629: hconnection-0x8a9f6680x0, quorum=host1:2181,host10:2181,host11:2181,host61:2181,host62:2181, baseZNode=/hbase-unsecure Unable to get data of znode /hbase-unsecure/meta-region-server</span><br><span class="line">org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hbase-unsecure/meta-region-server</span><br><span class="line">...</span><br><span class="line">2019-09-20_18:54:45 [http-nio-28956-exec-10-SendThread (host1:2181)] WARN zookeeper.ClientCnxn:1102: Session 0x0 for server host1/192.168.20.101:2181, unexpected error, closing socket connection and attempting reconnect</span><br></pre></td></tr></table></figure><p>看起来是当前节点网络有问题，或者 <code>Zookeeper</code> 连接资源紧张。</p><p>与此同时，还有大量类似下面这种连接重试出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-8-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x16af866e055f894, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-2-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x16af866e040a3c2, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-8-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x16af866e040a720, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-6-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x46d5ce1483b88cf, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-2-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x16af866e040a349, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-6-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x16af866e03f75aa, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br><span class="line">2019-09-30_00:24:56 [http-nio-28956-exec-4-SendThread (alps61:2181)] INFO zookeeper.ClientCnxn:1098: Unable to read additional data from server sessionid 0x16af866e040a8f0, likely server has closed socket, closing socket connection and </span><br><span class="line">attempting reconnect</span><br></pre></td></tr></table></figure><p>其实就是有进程在占用过多的 <code>Zookeeper</code> 连接，导致 <code>Zookeeper</code> 的 <code>Server</code> 端拒绝响应。</p><h1 id="问题排查"><a href="# 问题排查" class="headerlink" title="问题排查"></a>问题排查 </h1><p> 由于没有 <code>root</code> 权限，只能请运维帮忙排查，通过排查，发现当前主机创建的 <code>Zookeeper</code> 连接数过多，超过了设置的最大值。</p><p>使用 <code>netstat -antp | grep 2181 | wc -l</code> 命令，注意需要 <code>root</code> 用户的权限。这个命令统计的是所有 <code>Zookeeper</code> 连接【通过使用 2181 端口过滤】，包含等待的和正在通信的，如果查看正在通信的，加上一个 <code>grep ESTABLISHED</code> 过滤即可。</p><p>局部截图如下：</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190930214400.png" alt="zk 连接进程查看" title="zk 连接进程查看"></p><p>由于直接发现了问题，所以也不用进一步查看 <code>Zookeeper</code> 的日志了。</p><p>至于为什么 <code>Zookeeper</code> 的连接数会这么多，罪魁祸首请读者参考我的另外一篇博客：<br><a href="https://www.playpi.org/2019093001.html">HBase 错误之 NoClassDefFoundError：ProtobufUtil</a> 。</p><p>由于当前节点创建的 <code>Zookeeper</code> 连接数过多，所以再创建新连接时无法顺利连接通信，一直等待重试。</p><h1 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决 </h1><p> 问题排查出来，解决就简单了，直接找到问题程序，修复资源泄漏问题，然后重启，保证合理的 <code>Zookeeper</code> 连接数量，不要因为某一个程序的失误而影响到其它业务。</p><p>另外如果有必要查看 <code>Zookeeper</code> 日志，需要特别留意 <code>Zookeeper</code> 查看日志的方法，日志文件是不能被直接打开的，需要工具转换为文本日志，然后才能查看分析。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在当前的业务中，需要连接 &lt;code&gt;HBase&lt;/code&gt; 获取数据，但是最近在某一台节点上面的进程总是出现连接异常，类似下面：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2019-09-20_18:54:44 [http-nio-28956-exec-5] WARN zookeeper.ZKUtil:629: hconnection-0x8a9f6680x0, quorum=host1:2181,host10:2181,host11:2181,host61:2181,host62:2181, baseZNode=/hbase-unsecure Unable to get data of znode /hbase-unsecure/meta-region-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /hbase-unsecure/meta-region-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.apache.zookeeper.KeeperException.create (KeeperException.java:99)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;看起来是连接超时，然后重试，日志中持续了多次。本文开发环境基于 &lt;code&gt;HBase v1.1.2&lt;/code&gt;、&lt;code&gt;Zookeeper v3.4.6&lt;/code&gt;、&lt;code&gt;Hadoop v2.7.1&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="Hadoop" scheme="https://www.playpi.org/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://www.playpi.org/tags/HBase/"/>
    
      <category term="Zookeeper" scheme="https://www.playpi.org/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>爬山徒步：竹海丛林 - 广州第二峰鸡枕山</title>
    <link href="https://www.playpi.org/2019092201.html"/>
    <id>https://www.playpi.org/2019092201.html</id>
    <published>2019-09-22T08:03:49.000Z</published>
    <updated>2019-09-22T08:03:49.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在 2019 年 9 月 21 日，我们几个小伙伴相约去广州鸡枕山登山徒步，给久坐的身体放松一下。<strong> 鸡枕山 </strong>位于广东省广州市从化区良口镇，海拔 1175 米，为广州市的第二高峰，仅次于天堂顶。另外有一点比较好的地方在于，鸡枕山虽然是广州第二高峰，但是它全程都被树木、竹林遮挡，基本不会被晒到，而且山路比较平缓，除了几处陡一点的路段，整体来说走起来非常舒适。</p><p>因此，这条线路非常适合没有登山经验的人，或者是平时缺少锻炼的人，或者体能差的人，这是一个比较好的入门路线。本文记录这次徒步的过程，给读者一个观察参考。</p><a id="more"></a><h1 id="集合"><a href="# 集合" class="headerlink" title="集合"></a>集合 </h1><p> 我们规定 07:00 在 <strong>客村 </strong>地铁站集合，签到、吃早餐、准备食物水等必需品。这时候有些人没有买够水的去买，没有买够食物的也去买，保证登山过程中能量补给。</p><h1 id="启程"><a href="# 启程" class="headerlink" title="启程"></a>启程 </h1><p>07:40，所有人到齐，准备出发，一个大巴装了 40 多人。</p><h1 id="到达"><a href="# 到达" class="headerlink" title="到达"></a> 到达 </h1><p>08:50 到达服务区，大家下车休息，还可以买水，09:00 继续出发。</p><p> 由于领队的麦克风坏掉了，所以没有进行互动，在过了服务区快要到达的时候，领队讲了一下注意事项。</p><p>在 09:50 到达山脚，做了一下热身，稍微休息几分钟，准备登山。</p><p>为了保留体力，避免运动过量，我们决定慢慢走，全程都是最后一批，其中一个领队就在我们后面。</p><h1 id="登山"><a href="# 登山" class="headerlink" title="登山"></a>登山 </h1><p>10:00 开始登山。</p><p> 在登山入口，我们的小队伍合影。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923005645.jpg" alt="山脚小合照" title="山脚小合照"></p><p>登山路过竹林，有人仰望天空，发现的心形竹林空隙。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923005740.jpg" alt="心形的竹林空隙" title="心形的竹林空隙"></p><p>走过竹林间的小路，看光影婆娑。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923005830.jpg" alt="竹林间的小路" title="竹林间的小路"></p><p>路过小水坝，领队抓拍到的如画风景，我是倒数第二个人。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923005941.jpg" alt="路过小水坝" title="路过小水坝"></p><p>这个小水坝是很小的，看看小水坝的蓄水池就知道了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923010019.jpg" alt="小水坝的蓄水池" title="小水坝的蓄水池"></p><p>总是有人善于观察，看看路边的小花，斑驳的台阶。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923010102.jpg" alt="路边的小花" title="路边的小花"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923010113.jpg" alt="斑驳的台阶" title="斑驳的台阶"></p><p>路上少有的开阔视野，可以看看风景，远处的蓝蓝天空。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923010213.jpg" alt="蓝蓝的天空" title="蓝蓝的天空"></p><h1 id="午餐休息"><a href="# 午餐休息" class="headerlink" title="午餐休息"></a>午餐休息 </h1><p>12:00 到达登顶前的平台，可以休息吃午餐，养好体力准备登顶。</p><p> 领队竟然带了一个西瓜，背上来整整一个大西瓜，切开大家分了，竟然是冰冻的，爽口解渴。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011540.jpg" alt="切西瓜" title="切西瓜"></p><p>吃瓜群众，阳光洒在我全身，像个孩子。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011556.jpg" alt="吃瓜群众" title="吃瓜群众"></p><p>我带的西红柿，都给队友吃了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011609.jpg" alt="吃西红柿" title="吃西红柿"></p><h1 id="登顶"><a href="# 登顶" class="headerlink" title="登顶"></a>登顶 </h1><p>12:40 开始登顶。</p><p> 最后有一段稍微陡峭的登顶路段，全程是暴露在阳光下的，只有灌木丛，慢慢登上去大概需要 20 分钟。</p><p>登顶大合照之一。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011649.jpg" alt="登顶大合照之一" title="登顶大合照之一"></p><p>登顶大合照之二。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011702.jpg" alt="登顶大合照之二" title="登顶大合照之二"></p><p>登顶小合照，我站在最高的石头上，眼睛被阳光照射，只能眯得很小。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011715.jpg" alt="登顶小合照" title="登顶小合照"></p><p>可以看到鸡枕山卫峰。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011731.jpg" alt="鸡枕山卫峰" title="鸡枕山卫峰"></p><p>山顶的平台被阳光直射，还是有点晒的，不过还好有风，感觉不是那么炎热，在上面遥看远方，风景如画，谈笑风生。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011904.jpg" alt="登顶远眺之一" title="登顶远眺之一"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011915.jpg" alt="登顶远眺之二" title="登顶远眺之二"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011924.jpg" alt="登顶远眺之三" title="登顶远眺之三"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923011934.jpg" alt="登顶远眺之四" title="登顶远眺之四"></p><h1 id="下山"><a href="# 下山" class="headerlink" title="下山"></a>下山 </h1><p>13:30 开始下山，一路小树林、竹林、灌木丛、缓坡。</p><p> 下山会有几段灌木丛的路，大概是下图这样，感觉像是玉米地，每次路过时双手挡脸，要防止被叶子刮伤。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923012043.jpg" alt="灌木丛" title="灌木丛"></p><p>下山遇到的竹林，不过此时已经很累，无心观赏。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923012346.jpg" alt="下山遇到的竹林" title="下山遇到的竹林"></p><p>仰望竹林。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923012433.jpg" alt="仰望竹林" title="仰望竹林"></p><p>阳光洒下，一片片翠绿金黄的竹叶；微风袭来，一阵阵扑面而来的凉爽。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923012128.jpg" alt="翠绿金黄的竹林" title="翠绿金黄的竹林"></p><p>竟然在山脚遇到了一群走地鸡，公鸡的羽毛特别漂亮。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190923012211.jpg" alt="走地鸡" title="走地鸡"></p><h1 id="集合返程"><a href="# 集合返程" class="headerlink" title="集合返程"></a>集合返程 </h1><p> 在 16:30 到达山脚。</p><p>返程到山脚，有一些人很早就到了，等了两个多小时。</p><p>大家换衣服、洗脸、去厕所，休息一会，然后喝水、吃东西，聊聊天。</p><p>一切准备就绪后，大家集合，准备返程。</p><h1 id="归来"><a href="# 归来" class="headerlink" title="归来"></a>归来 </h1><p>17:00 开始返程。</p><p> 在下山的路上，由于是曲折蜿蜒的 S 型路线，而且路比较窄，所以堵车很严重，特别在转弯处，还需要下去人去指挥，毕竟安全第一。</p><p>本来 10 分钟可以走完的路花了将近 1 小时。</p><p>最后在 20:00 到达广州。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在 2019 年 9 月 21 日，我们几个小伙伴相约去广州鸡枕山登山徒步，给久坐的身体放松一下。&lt;strong&gt; 鸡枕山 &lt;/strong&gt;位于广东省广州市从化区良口镇，海拔 1175 米，为广州市的第二高峰，仅次于天堂顶。另外有一点比较好的地方在于，鸡枕山虽然是广州第二高峰，但是它全程都被树木、竹林遮挡，基本不会被晒到，而且山路比较平缓，除了几处陡一点的路段，整体来说走起来非常舒适。&lt;/p&gt;&lt;p&gt;因此，这条线路非常适合没有登山经验的人，或者是平时缺少锻炼的人，或者体能差的人，这是一个比较好的入门路线。本文记录这次徒步的过程，给读者一个观察参考。&lt;/p&gt;
    
    </summary>
    
      <category term="游玩" scheme="https://www.playpi.org/categories/have-for-fun/"/>
    
    
      <category term="Guangzhou" scheme="https://www.playpi.org/tags/Guangzhou/"/>
    
      <category term="hike" scheme="https://www.playpi.org/tags/hike/"/>
    
      <category term="climbing" scheme="https://www.playpi.org/tags/climbing/"/>
    
  </entry>
  
  <entry>
    <title>HBase 异常：RpcRetryingCaller-Call exception</title>
    <link href="https://www.playpi.org/2019091701.html"/>
    <id>https://www.playpi.org/2019091701.html</id>
    <published>2019-09-17T13:23:49.000Z</published>
    <updated>2019-09-17T14:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>今天天气不错，我心情很好，但是在测试代码功能的时候遇到了一个问题，浪费了一些时间，感到惋惜。还好，最终解决了问题，只是集群环境的问题。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 我的本意是想写一个 <code>MapReduce</code> 程序来扫描 <code>HBase</code> 数据，统计一些信息，但是在测试的时候发现程序卡住了，等了几分钟之后开始出现连续的超时日志，我感觉是连接 <code>HBase</code> 超时，无法读取表的元信息。</p><p><code>MapReduce</code> 扫描数据报错，报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">18:06:43.022 [main] INFO  o.a.h.h.util.RegionSizeCalculator - Calculating region sizes for table &quot;YOUR_TABLE_NAME&quot;.</span><br><span class="line">18:07:52.298 [htable-pool2-t1] INFO  o.a.h.hbase.client.RpcRetryingCaller - Call exception, tries=10, retries=35, started=69237 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">18:08:12.336 [htable-pool2-t1] INFO  o.a.h.hbase.client.RpcRetryingCaller - Call exception, tries=11, retries=35, started=89279 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">18:08:32.358 [htable-pool2-t1] INFO  o.a.h.hbase.client.RpcRetryingCaller - Call exception, tries=12, retries=35, started=109301 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">18:08:52.522 [htable-pool2-t1] INFO  o.a.h.hbase.client.RpcRetryingCaller - Call exception, tries=13, retries=35, started=129465 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">18:09:12.560 [htable-pool2-t1] INFO  o.a.h.hbase.client.RpcRetryingCaller - Call exception, tries=14, retries=35, started=149503 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190917203629.png" alt="MapReduce 报错信息" title="MapReduce 报错信息"></p><p>此时我又去检查正在运行的 <code>Spark</code> 程序写入数据有没有问题，发现也是在写入 <code>HBase</code> 时有同样的错误，报错日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">19/09/17 18:22:49 INFO RpcRetryingCaller: Call exception, tries=10, retries=35, started=68431 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,14df3e2b1626e6e02fc1d772eb34f8ad,99999999999999&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">19/09/17 18:23:09 INFO RpcRetryingCaller: Call exception, tries=11, retries=35, started=88446 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,14df3e2b1626e6e02fc1d772eb34f8ad,99999999999999&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">19/09/17 18:23:29 INFO RpcRetryingCaller: Call exception, tries=12, retries=35, started=108564 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,14df3e2b1626e6e02fc1d772eb34f8ad,99999999999999&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">19/09/17 18:23:49 INFO RpcRetryingCaller: Call exception, tries=13, retries=35, started=128578 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,14df3e2b1626e6e02fc1d772eb34f8ad,99999999999999&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">19/09/17 18:24:09 INFO RpcRetryingCaller: Call exception, tries=14, retries=35, started=148657 ms ago, cancelled=false, msg=row &apos;YOUR_TABLE_NAME,14df3e2b1626e6e02fc1d772eb34f8ad,99999999999999&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190917203619.png" alt="Spark 报错信息" title="Spark 报错信息"></p><p>接着我想使用 <code>HBase</code> 自带的 <code>RowCounter</code> 执行 <code>MapReduce</code> 任务扫描数据，测试一下，使用命令：<br><code>hbase org.apache.hadoop.hbase.mapreduce.RowCounter &#39;YOUR_TABLE_NAME&#39;</code>。</p><p>结果也是超时报错，报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.apache.hadoop.hbase.client.RetriesExhaustedException: Failed after attempts=36, exceptions:</span><br><span class="line">Tue Sep 17 18:10:02 CST 2019, null, java.net.SocketTimeoutException: callTimeout=60000, callDuration=68315: row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line"></span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCallerWithReadReplicas.throwEnrichedException (RpcRetryingCallerWithReadReplicas.java:271)</span><br><span class="line">at org.apache.hadoop.hbase.client.ScannerCallableWithReplicas.call (ScannerCallableWithReplicas.java:203)</span><br><span class="line">at org.apache.hadoop.hbase.client.ScannerCallableWithReplicas.call (ScannerCallableWithReplicas.java:60)</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithoutRetries (RpcRetryingCaller.java:200)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientScanner.call (ClientScanner.java:320)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientScanner.nextScanner (ClientScanner.java:295)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientScanner.initializeScannerInConstruction (ClientScanner.java:160)</span><br><span class="line">at org.apache.hadoop.hbase.client.ClientScanner.&lt;init&gt;(ClientScanner.java:155)</span><br><span class="line">at org.apache.hadoop.hbase.client.HTable.getScanner (HTable.java:821)</span><br><span class="line">at org.apache.hadoop.hbase.client.MetaScanner.metaScan (MetaScanner.java:193)</span><br><span class="line">at org.apache.hadoop.hbase.client.MetaScanner.metaScan (MetaScanner.java:89)</span><br><span class="line">at org.apache.hadoop.hbase.client.MetaScanner.allTableRegions (MetaScanner.java:324)</span><br><span class="line">at org.apache.hadoop.hbase.client.HRegionLocator.getAllRegionLocations (HRegionLocator.java:88)</span><br><span class="line">at org.apache.hadoop.hbase.util.RegionSizeCalculator.init (RegionSizeCalculator.java:94)</span><br><span class="line">at org.apache.hadoop.hbase.util.RegionSizeCalculator.&lt;init&gt;(RegionSizeCalculator.java:81)</span><br><span class="line">at org.apache.hadoop.hbase.mapreduce.TableInputFormatBase.getSplits (TableInputFormatBase.java:256)</span><br><span class="line">at org.apache.hadoop.hbase.mapreduce.TableInputFormat.getSplits (TableInputFormat.java:237)</span><br><span class="line">at org.apache.hadoop.mapreduce.JobSubmitter.writeNewSplits (JobSubmitter.java:301)</span><br><span class="line">at org.apache.hadoop.mapreduce.JobSubmitter.writeSplits (JobSubmitter.java:318)</span><br><span class="line">at org.apache.hadoop.mapreduce.JobSubmitter.submitJobInternal (JobSubmitter.java:196)</span><br><span class="line">at org.apache.hadoop.mapreduce.Job$10.run (Job.java:1290)</span><br><span class="line">at org.apache.hadoop.mapreduce.Job$10.run (Job.java:1287)</span><br><span class="line">at java.security.AccessController.doPrivileged (Native Method)</span><br><span class="line">at javax.security.auth.Subject.doAs (Subject.java:422)</span><br><span class="line">at org.apache.hadoop.security.UserGroupInformation.doAs (UserGroupInformation.java:1709)</span><br><span class="line">at org.apache.hadoop.mapreduce.Job.submit (Job.java:1287)</span><br><span class="line">at org.apache.hadoop.mapreduce.Job.waitForCompletion (Job.java:1308)</span><br><span class="line">at org.apache.hadoop.hbase.mapreduce.RowCounter.main (RowCounter.java:210)</span><br><span class="line">Caused by: java.net.SocketTimeoutException: callTimeout=60000, callDuration=68315: row &apos;YOUR_TABLE_NAME,,00000000000000&apos; on table &apos;hbase:meta&apos; at region=hbase:meta,,1.1588230740, hostname=dev6,16020,1565930591664, seqNum=0</span><br><span class="line">at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithRetries (RpcRetryingCaller.java:159)</span><br><span class="line">at org.apache.hadoop.hbase.client.ResultBoundedCompletionService$QueueingFuture.run (ResultBoundedCompletionService.java:65)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run (Thread.java:748)</span><br><span class="line">Caused by: java.net.ConnectException: Connection refused</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190917203602.png" alt="RowCounter 报错信息" title="RowCounter 报错信息"></p><p>由此可以断定，<code>HBase</code> 集群有问题了。</p><h1 id="问题分析解决"><a href="# 问题分析解决" class="headerlink" title="问题分析解决"></a>问题分析解决 </h1><p> 首先查看集群的服务是不是还正常，一看果然不正常，<code>RegionServer</code> 已经挂了，那就好办了，直接重启即可。</p><p>由于是在测试环境，平时不太关注，所以没有注意到服务已经挂了，让运维人员花了 1 分钟帮忙重启一下，确认后没有问题。</p><p>最后打开 <code>RegionServer</code> 管理界面，查看集群信息，恢复正常。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190917203513.png" alt="RegionServer 状态正常" title="RegionServer 状态正常"></p><p>我的 <code>MapReduce</code> 任务又欢快地跑起来了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190917203533.png" alt="MapReduce 正常执行" title="MapReduce 正常执行"></p><p>再试了一下 <code>RowCounter</code> 任务，也可以正常执行。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190917203542.png" alt="RowCounter 正常执行" title="RowCounter 正常执行"></p><p>至此，这个小问题解决。</p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注 </h1><p> 在搜索资料的过程中，也有人说是以下原因，但是我这里不是这个原因，所以记录下来，仅供读者参考：</p><ul><li>添加 <code>jar</code> 包，<code>com.yammer.metrics</code> -&gt; <code>metrics-core</code></li><li><code>hosts</code> 添加 <code>ip</code> 映射</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天天气不错，我心情很好，但是在测试代码功能的时候遇到了一个问题，浪费了一些时间，感到惋惜。还好，最终解决了问题，只是集群环境的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="HBase" scheme="https://www.playpi.org/tags/HBase/"/>
    
      <category term="RegionServer" scheme="https://www.playpi.org/tags/RegionServer/"/>
    
      <category term="RowCounter" scheme="https://www.playpi.org/tags/RowCounter/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 自动安装 Shadowsocks 脚本</title>
    <link href="https://www.playpi.org/2019082801.html"/>
    <id>https://www.playpi.org/2019082801.html</id>
    <published>2019-08-28T15:48:21.000Z</published>
    <updated>2019-09-19T15:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>以前我整理过一篇博客，详细叙述了如何自己搭建梯子，图文并茂，可以参见：<a href="https://www.playpi.org/2018111601.html">使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）</a> 。里面有涉及到购买一台云服务器后该如何操作：初始化环境、安装 <code>Shadowsocks</code>、配置参数、安装防火墙、启动服务、检查服务状态等等步骤。</p><p>虽然过程很详细，只要几个命令就可以完成 <code>Shadowsocks</code> 服务的搭建，但是对于没有技术基础又不想折腾的读者来说，还是有点困难。所以我把安装过程整理成一个自动化的 <code>Shell</code> 脚本，读者下载下来之后，直接运行即可，在运行过程中如果需要询问交互，例如填写密码、端口号等，读者直接填写即可，或者直接使用默认的设置。</p><a id="more"></a><p>首先说明，使用这个自动化 <code>Shell</code> 脚本，零基础的读者也可以自行安装 <code>Shadowsocks</code>，整个安装过程不到五分钟，非常友好而高效，运行脚本后慢慢等待即可，当然别忘记填写必要信息。</p><p>本脚本已经被我上传至 <code>GitHub</code>，读者可以下载查看并使用：<a href="https://github.com/iplaypi/iplaypistudy/tree/master/iplaypistudy-normal/src/bin/20190828" target="_blank" rel="noopener">auto_deploy_shadowsocks.sh</a> ，需要注意的是，这个自动化 <code>Shell</code> 脚本只针对 <code>CentOS 7x64</code> 操作系统有效，其它操作系统我没有测试，不保证能用。所以为了稳妥起见，请读者还是参考我上面给出的那篇博客来创建云主机。</p><h1 id="自动化安装"><a href="# 自动化安装" class="headerlink" title="自动化安装"></a>自动化安装 </h1><p> 下载 <code>GitHub</code> 上面的脚本时，如果有类似 <code>Shell</code> 的环境，就不用浏览器下载了，在 <code>Shell</code> 中可以直接使用 <code>wget</code> 命令下载，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/iplaypi/iplaypistudy/master/iplaypistudy-normal/src/bin/20190828/auto_deploy_shadowsocks.sh</span><br></pre></td></tr></table></figure><p>下载下来后接着直接运行即可，使用 <code>sh auto_deploy_shadowsocks.sh</code> 。</p><p>下面简单描述自动化脚本的思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、提示用户输入端口号、密码，并读取输入，没有输入则使用默认值 </span><br><span class="line">2、利用端口号、密码，生成 /etc/shadowsocks.json 配置文件 </span><br><span class="line">3、安装 shadowsocks 以及其它组件：m2crypto、pip、firewalld</span><br><span class="line">4、启动防火墙，开启必要的端口 </span><br><span class="line">5、检测当前是否有运行的 shadowsocks 服务，有则杀死 </span><br><span class="line">6、后台启动 shadowsocks 服务 </span><br><span class="line">7、输出部署成功的信息，如果部署失败，需要进一步查看日志文件 </span><br><span class="line">8、处理 server 酱通知 </span><br></pre></td></tr></table></figure><p>脚本内容整理如下，重要的地方已经注释清楚【这里要特别注意脚本中的换行符号，一律使用 <code>\\n</code> 的形式，否则会引起错误】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 注意本脚本中的换行符号，一律使用 \n 的形式，否则会引起错误 </span><br><span class="line"># 日志路径，如果安装失败需要查看日志，是否有异常 / 报错信息 </span><br><span class="line">export log_path=/etc/auto_deploy_shadowsocks.log</span><br><span class="line"># 设置端口号，从键盘接收参数输入，默认为 2018,-e 参数转义开启高亮显示 </span><br><span class="line">echo -n -e &apos;\033 [36mPlease enter PORT [2018 default]:\033 [0m&apos;</span><br><span class="line">read port</span><br><span class="line">if [! -n &quot;$port&quot;];then</span><br><span class="line">    echo &quot;port will be set to 2018&quot;</span><br><span class="line">    port=2018</span><br><span class="line">else</span><br><span class="line">    echo &quot;port will be set to $port&quot;</span><br><span class="line">fi</span><br><span class="line"># 设置密码，从键盘接收参数输入，默认为 pengfeivpn,-e 参数转义开启高亮显示 </span><br><span class="line">echo -n -e &apos;\033 [36mPlease enter PASSWORD [pengfeivpn default]:\033 [0m&apos;</span><br><span class="line">read pwd</span><br><span class="line">if [! -n &quot;$pwd&quot;];then</span><br><span class="line">    echo &quot;password will be set to 123456&quot;</span><br><span class="line">    pwd=pengfeivpn</span><br><span class="line">else</span><br><span class="line">    echo &quot;password will be set to $pwd&quot;</span><br><span class="line">fi</span><br><span class="line"># 创建 shadowsocks.json 配置文件，只开一个端口，server 可以是 0.0.0.0</span><br><span class="line">echo &quot;****************start generate /etc/shadowsocks.json&quot;</span><br><span class="line">cat&gt;/etc/shadowsocks.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:$port,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;$pwd&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">echo &quot;****************start install shadowsocks and other tools&quot;</span><br><span class="line"># 安装 shadowsocks / 防火墙，携带 - y 参数表示自动同意安装，无需交互询问 </span><br><span class="line"># 日志全部输出到上面指定的日志文件中 </span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;********************************&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;start deploy shadowsocks,date is:&quot;$(date +% Y-% m-% d-% X) &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;********************************&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;******************start install m2crypto&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">ret=`yum install -y m2crypto python-setuptools &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;******************start install pip&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">ret=`easy_install pip &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;******************start install shadowsocks&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">ret=`pip install shadowsocks &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;******************start install firewalld&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">ret=`yum install -y firewalld &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;******************start start firewalld&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">ret=`systemctl start firewalld &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">echo &quot;&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line">echo &quot;******************start reload firewall&quot; &gt;&gt; $&#123;log_path&#125;</span><br><span class="line"># 开启端口 </span><br><span class="line">ret=`firewall-cmd --permanent --zone=public --add-port=22/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`firewall-cmd --permanent --zone=public --add-port=$port/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`firewall-cmd --reload &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">echo &quot;****************start check shadowsocks&quot;</span><br><span class="line"># 如果有相同功能的进程则先杀死，$? 表示上个命令的退出状态，或者函数的返回值 </span><br><span class="line">ps -ef | grep ssserver | grep shadowsocks | grep -v grep</span><br><span class="line">if [$? -eq 0];then</span><br><span class="line">    ps -ef | grep ssserver | grep shadowsocks | awk &apos;&#123; print $2 &#125;&apos; | xargs kill -9</span><br><span class="line">fi</span><br><span class="line"># 后台启动，-d 表示守护进程 </span><br><span class="line">/usr/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"># 启动成功 </span><br><span class="line">if [$? -eq 0];then</span><br><span class="line"># 获取本机 ip 地址 </span><br><span class="line">ip=`ip addr | grep &apos;state UP&apos; -A2 | tail -n1 | awk &apos;&#123;print $2&#125;&apos; | cut -f1 -d &apos;/&apos;`</span><br><span class="line">clear</span><br><span class="line">cat&lt;&lt;EOF</span><br><span class="line">***************Congratulation!*****************</span><br><span class="line">shadowsocks deployed successfully!</span><br><span class="line"></span><br><span class="line">IP:$ip</span><br><span class="line">PORT:$port</span><br><span class="line">PASSWORD:$pwd</span><br><span class="line">METHOD:aes-256-cfb</span><br><span class="line"></span><br><span class="line">*****************JUST ENJOY IT!****************</span><br><span class="line">EOF</span><br><span class="line"># 建议开启 server 酱自动通知，推送到微信，就可以直接复制信息转发给别人了 </span><br><span class="line"># 不开启请把以下内容注释掉，注释内容持续到 & apos;server 酱通知完成 & apos;</span><br><span class="line"># 关于 server 酱的使用请参考:https://sc.ftqq.com</span><br><span class="line"># 注意 server_key 不要泄露，泄漏后可以去官网重置 </span><br><span class="line">echo &quot;************** 开始处理 server 酱通知 & quot;</span><br><span class="line">server_key=SCU60861T303e1c479df6cea9e95fc54d210232565d7dbbf075750</span><br><span class="line"># 传输 2 个参数:text/desp,desp 使用 markdown 语法 (注意换行符要使用 2 个换行)</span><br><span class="line">cat&gt;./shadowsocks_msg.txt&lt;&lt;EOF</span><br><span class="line">text=shadowsocks 服务部署启动完成 </span><br><span class="line">&amp;desp=</span><br><span class="line">- IP 地址：$ip</span><br><span class="line"></span><br><span class="line">- 端口号：$port</span><br><span class="line"></span><br><span class="line">- 密码：$pwd</span><br><span class="line"></span><br><span class="line">- 加密方式：aes-256-cfb</span><br><span class="line">EOF</span><br><span class="line">curl -X POST --data-binary @./shadowsocks_msg.txt  https://sc.ftqq.com/$server_key.send</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;**************server 酱通知处理完成 & quot;</span><br><span class="line"># 失败 </span><br><span class="line">else</span><br><span class="line">clear</span><br><span class="line">cat&lt;&lt;EOF</span><br><span class="line">**************Failed,retry please!*************</span><br><span class="line"></span><br><span class="line">cat /etc/ss.log to get something you need.</span><br><span class="line"></span><br><span class="line">**************Failed,retry please!*************</span><br><span class="line">EOF</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本的输出信息如下【我手动设置端口号为 2019，密码使用默认值】，表示安装完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@playpi ~]# sh auto_deploy_shadowsocks.sh </span><br><span class="line">Please enter PORT [2018 default]:2019</span><br><span class="line">port will be set to 2019</span><br><span class="line">Please enter PASSWORD [pengfeivpn default]:</span><br><span class="line">password will be set to 123456</span><br><span class="line">****************start generate /etc/shadowsocks.json</span><br><span class="line">****************start install shadowsocks and other tools</span><br><span class="line">****************start check shadowsocks</span><br><span class="line">root     13980     1  0 11:07 ?        00:00:00 /usr/bin/python/usr/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">INFO: loading config from /etc/shadowsocks.json</span><br><span class="line">2019-09-29 11:09:29 INFO     loading libcrypto from libcrypto.so.10</span><br><span class="line">started</span><br><span class="line">***************Congratulation!*****************</span><br><span class="line">shadowsocks deployed successfully!</span><br><span class="line"></span><br><span class="line">IP:45.32.79.20</span><br><span class="line">PORT:2019</span><br><span class="line">PASSWORD:pengfeivpn</span><br><span class="line">METHOD:aes-256-cfb</span><br><span class="line"></span><br><span class="line">*****************JUST ENJOY IT!****************</span><br><span class="line">************** 开始处理 server 酱通知 </span><br><span class="line">&#123;&quot;errno&quot;:0,&quot;errmsg&quot;:&quot;success&quot;,&quot;dataset&quot;:&quot;done&quot;&#125;</span><br><span class="line">**************server 酱通知完成 </span><br><span class="line">[root@playpi ~]#</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190929211341.png" alt="自动安装成功" title="自动安装成功"></p><p>同时，<code>server</code> 酱也接收到通知，可以很方便地直接转发给需要的人了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190929211352.png" alt="server 酱的通知" title="server 酱的通知"></p><h1 id="自动更换端口重启"><a href="# 自动更换端口重启" class="headerlink" title="自动更换端口重启"></a>自动更换端口重启 </h1><p> 在使用 <code>Shadowsocks</code> 的时候，有时候会遇到一个问题，端口被封了【<code>ip</code> 被封另外说，只能销毁主机新建】，特别是国家严厉管控非法 <code>VPN</code> 的时候，当然我这是属于误封，因为我只是用来学习、测试接口，这时候解决办法也简单，尝试更换一个端口即可。</p><p>步骤其实很简单，停止服务、更改配置文件、开启新端口、重启服务，但是作为一个追求效率的人，我还是想把操作简化一下，最好敲下一行命令等着就行【执行脚本的前提是 <code>Shadowsocks</code> 以及相关工具已经安装完成】。</p><p>其实把前面的步骤稍微整理一下，就变成了一个简单的脚本，直接执行即可。脚本已经被我上传至 <code>GitHub</code>，在 <code>Shell</code> 中可以直接使用 <code>wget</code> 命令下载，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/iplaypi/iplaypistudy/master/iplaypistudy-normal/src/bin/20190828/auto_restart_shadowsocks.sh</span><br></pre></td></tr></table></figure><p>下载下来后接着直接运行即可，使用 <code>sh auto_restart_shadowsocks.sh</code> 。</p><p>下面简单描述自动化脚本的思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、提示用户输入端口号、密码，并读取输入，没有输入则使用默认值 </span><br><span class="line">2、利用端口号、密码，生成 /etc/shadowsocks.json 配置文件 </span><br><span class="line">3、启动防火墙，开启必要的端口（`Shadowsocks` 以及相关工具无需再安装）</span><br><span class="line">4、使用 stop 停止 shadowsocks 服务 </span><br><span class="line">5、再次检测当前是否有运行的 shadowsocks 服务，有则杀死 </span><br><span class="line">6、后台启动 shadowsocks 服务 </span><br><span class="line">7、输出部署成功的信息，如果部署失败，需要进一步查看日志文件 </span><br><span class="line">8、处理 server 酱通知 </span><br></pre></td></tr></table></figure><p>脚本内容整理如下，重要的地方已经注释清楚【这里要特别注意脚本中的换行符号，一律使用 <code>\\n</code> 的形式，否则会引起错误】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 注意本脚本中的换行符号，一律使用 \n 的形式，否则会引起错误 </span><br><span class="line"># 日志路径，如果安装失败需要查看日志，是否有异常 / 报错信息 </span><br><span class="line">export log_path=/etc/auto_restart_shadowsocks.log</span><br><span class="line"># 设置端口号，从键盘接收参数输入，默认为 2018,-e 参数转义开启高亮显示 </span><br><span class="line">echo -n -e &apos;\033 [36mPlease enter PORT [2018 default]:\033 [0m&apos;</span><br><span class="line">read port</span><br><span class="line">if [! -n &quot;$port&quot;];then</span><br><span class="line">    echo &quot;port will be set to 2018&quot;</span><br><span class="line">    port=2018</span><br><span class="line">else</span><br><span class="line">    echo &quot;port will be set to $port&quot;</span><br><span class="line">fi</span><br><span class="line"># 设置密码，从键盘接收参数输入，默认为 pengfeivpn,-e 参数转义开启高亮显示 </span><br><span class="line">echo -n -e &apos;\033 [36mPlease enter PASSWORD [pengfeivpn default]:\033 [0m&apos;</span><br><span class="line">read pwd</span><br><span class="line">if [! -n &quot;$pwd&quot;];then</span><br><span class="line">    echo &quot;password will be set to pengfeivpn&quot;</span><br><span class="line">    pwd=pengfeivpn</span><br><span class="line">else</span><br><span class="line">    echo &quot;password will be set to $pwd&quot;</span><br><span class="line">fi</span><br><span class="line"># 创建 shadowsocks.json 配置文件，只开一个端口，server 可以是 0.0.0.0</span><br><span class="line">echo &quot;****************start generate /etc/shadowsocks.json&quot;</span><br><span class="line">cat&gt;/etc/shadowsocks.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:$port,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;$pwd&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">echo &quot;****************start open port&quot;</span><br><span class="line"># 开启端口 </span><br><span class="line">ret=`firewall-cmd --permanent --zone=public --add-port=$port/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`firewall-cmd --reload &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line"># 正常停掉 shadowsocks 服务 </span><br><span class="line">echo &quot;****************start stop shadowsocks&quot;</span><br><span class="line">/usr/bin/ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line">echo &quot;****************start check shadowsocks&quot;</span><br><span class="line"># 如果有相同功能的进程则先杀死，$? 表示上个命令的退出状态，或者函数的返回值 </span><br><span class="line">ps -ef | grep ssserver | grep shadowsocks | grep -v grep</span><br><span class="line">if [$? -eq 0];then</span><br><span class="line">    ps -ef | grep ssserver | grep shadowsocks | awk &apos;&#123; print $2 &#125;&apos; | xargs kill -9</span><br><span class="line">fi</span><br><span class="line"># 后台启动，-d 表示守护进程 </span><br><span class="line">/usr/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"># 启动成功 </span><br><span class="line">if [$? -eq 0];then</span><br><span class="line"># 获取本机 ip 地址 </span><br><span class="line">ip=`ip addr | grep &apos;state UP&apos; -A2 | tail -n1 | awk &apos;&#123;print $2&#125;&apos; | cut -f1 -d &apos;/&apos;`</span><br><span class="line">clear</span><br><span class="line">cat&lt;&lt;EOF</span><br><span class="line">***************Congratulation!*****************</span><br><span class="line">shadowsocks restart successfully!</span><br><span class="line"></span><br><span class="line">IP:$ip</span><br><span class="line">PORT:$port</span><br><span class="line">PASSWORD:$pwd</span><br><span class="line">METHOD:aes-256-cfb</span><br><span class="line"></span><br><span class="line">*****************JUST ENJOY IT!****************</span><br><span class="line">EOF</span><br><span class="line"># 建议开启 server 酱自动通知，推送到微信，就可以直接复制信息转发给别人了 </span><br><span class="line"># 不开启请把以下内容注释掉，注释内容持续到 & apos;server 酱通知完成 & apos;</span><br><span class="line"># 关于 server 酱的使用请参考:https://sc.ftqq.com</span><br><span class="line"># 注意 server_key 不要泄露，泄漏后可以去官网重置 </span><br><span class="line">echo &quot;************** 开始处理 server 酱通知 & quot;</span><br><span class="line">server_key=SCU60861T303e1c479df6cea9e95fc54d210232565d7dbbf075750</span><br><span class="line"># 传输 2 个参数:text/desp,desp 使用 markdown 语法 (注意换行符要使用 2 个换行)</span><br><span class="line">cat&gt;./shadowsocks_msg.txt&lt;&lt;EOF</span><br><span class="line">text=shadowsocks 服务更换端口重新启动完成 </span><br><span class="line">&amp;desp=</span><br><span class="line">- IP 地址：$ip</span><br><span class="line"></span><br><span class="line">- 端口号：$port</span><br><span class="line"></span><br><span class="line">- 密码：$pwd</span><br><span class="line"></span><br><span class="line">- 加密方式：aes-256-cfb</span><br><span class="line">EOF</span><br><span class="line">curl -X POST --data-binary @./shadowsocks_msg.txt  https://sc.ftqq.com/$server_key.send</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;**************server 酱通知处理完成 & quot;</span><br><span class="line"># 失败 </span><br><span class="line">else</span><br><span class="line">clear</span><br><span class="line">cat&lt;&lt;EOF</span><br><span class="line">**************Failed,retry please!*************</span><br><span class="line"></span><br><span class="line">cat /etc/ss.log to get something you need.</span><br><span class="line"></span><br><span class="line">**************Failed,retry please!*************</span><br><span class="line">EOF</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本的输出信息如下【需要手动设置新的端口号，我设置为 2020，密码仍旧使用默认值】，表示重启完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@playpi ~]# sh auto_restart_shadowsocks.sh </span><br><span class="line">Please enter PORT [2018 default]:2020</span><br><span class="line">port will be set to 2020</span><br><span class="line">Please enter PASSWORD [pengfeivpn default]:</span><br><span class="line">password will be set to pengfeivpn</span><br><span class="line">****************start generate /etc/shadowsocks.json</span><br><span class="line">****************start open port</span><br><span class="line">****************start stop shadowsocks</span><br><span class="line">INFO: loading config from /etc/shadowsocks.json</span><br><span class="line">stopped</span><br><span class="line">****************start check shadowsocks</span><br><span class="line">INFO: loading config from /etc/shadowsocks.json</span><br><span class="line">2019-10-02 10:53:17 INFO     loading libcrypto from libcrypto.so.10</span><br><span class="line">started</span><br><span class="line">***************Congratulation!*****************</span><br><span class="line">shadowsocks restart successfully!</span><br><span class="line"></span><br><span class="line">IP:45.32.79.20</span><br><span class="line">PORT:2020</span><br><span class="line">PASSWORD:pengfeivpn</span><br><span class="line">METHOD:aes-256-cfb</span><br><span class="line"></span><br><span class="line">*****************JUST ENJOY IT!****************</span><br><span class="line">************** 开始处理 server 酱通知 </span><br><span class="line">&#123;&quot;errno&quot;:0,&quot;errmsg&quot;:&quot;success&quot;,&quot;dataset&quot;:&quot;done&quot;&#125;</span><br><span class="line">**************server 酱通知处理完成 </span><br><span class="line">[root@playpi ~]#</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191002185742.png" alt="重启成功" title="重启成功"></p><p>同时，<code>server</code> 酱也接收到通知，可以很方便地直接转发给需要的人了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191002185749.png" alt="server 酱的通知" title="server 酱的通知"></p><h1 id="监控服务"><a href="# 监控服务" class="headerlink" title="监控服务"></a>监控服务 </h1><p> 鉴于国家管控越来越严格，有时候会误伤到我们的 <code>VPS</code>，毕竟我只是用来学习技术、测试接口，没有做什么违法的事，有时候突然挂掉了我也不知道，直到需要用到的时候才发现已经挂掉了，这时候还要去折腾，重启甚至更换 <code>ip</code>，影响心情，也影响做事的效率。</p><p>那么有没有可能做一个简单的监控服务，每隔一段时间检测一下服务是否正常，如果不正常则发送通知。如果连续多次不正常，则发送通知提醒更换端口重启；如果是 <code>ip</code> 被封，此时重启没有用了，应该发送通知，提醒重新更换主机。</p><p>使用 <code>Shell</code> 可以做一个简化的版本，脚本已经被我上传至 <code>GitHub</code>，在 <code>Shell</code> 中可以直接使用 <code>wget</code> 命令下载，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/iplaypi/iplaypistudy/master/iplaypistudy-normal/src/bin/20190828/auto_monitor_shadowsocks.sh</span><br></pre></td></tr></table></figure><p>下载下来后接着直接运行即可，使用 <code>sh auto_monitor_shadowsocks.sh</code> 。</p><p>当然，这个监控脚本是要放在常用的主机上面运行，或者是在自己的电脑后台运行，但是为了确保一直后台运行，还是放在远程服务器上比较好，例如公司的公共服务器、阿里云主机等，这样就可以一直运行并监控【确保运行在家庭的网络环境中或者公司的网络环境中，否则监控结果没有意义】。</p><p>下面简单描述自动化脚本的思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、执行脚本时输入 ip、端口号、周期，然后每隔指定时间按照如下流程检测一次 </span><br><span class="line">2、使用 ping 检测 ip 是否可用 </span><br><span class="line">3、如果 ip 不可用，通过 server 酱通知；如果 ip 可用，进一步检测端口是否可用 </span><br><span class="line">4、如果端口不可用，记录并通过 server 酱通知；如果端口可用，不做操作 </span><br><span class="line">5、步骤 4 中如果端口不可用连续超过 3 次，才发送通知 </span><br><span class="line">6、如果更换了 ip 或者端口，此监控脚本需要重启，从头重新开始检测 </span><br></pre></td></tr></table></figure><p>脚本内容整理如下，重要的地方已经注释清楚【这里要特别注意脚本中的换行符号，一律使用 <code>\\n</code> 的形式，否则会引起错误】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 脚本接收 3 个参数:ip/port/ 执行周期 (默认 10 分钟), 切记放在后台运行 </span><br><span class="line"># 注意本脚本中的换行符号，一律使用 \n 的形式，否则会引起错误 </span><br><span class="line"># 日志路径，如果安装失败需要查看日志，是否有异常 / 报错信息 </span><br><span class="line"># 最少 2 个参数，否则直接退出 </span><br><span class="line">if [2 -gt $#];then</span><br><span class="line">  echo &quot;must enter ip and port&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line">ip=$1</span><br><span class="line">port=$2</span><br><span class="line">log_path=/etc/auto_monitor_shadowsocks.log</span><br><span class="line"># 设置执行周期，默认 10 分钟，如果参数有指定则使用 </span><br><span class="line">circle_time=$3</span><br><span class="line">if [-z $circle_time];then</span><br><span class="line">  circle_time=10m</span><br><span class="line">fi</span><br><span class="line">echo &quot;ip will be set to [$ip],port will be set to [$port],circle_time will be set to [$circle_time]&quot;</span><br><span class="line"># 变量，标记是否通知以及通知内容 </span><br><span class="line">notice=0</span><br><span class="line">notice_msg=&quot;&quot;</span><br><span class="line"># 变量，标记 ip / 端口的失败次数 </span><br><span class="line">ip_fail_num=0</span><br><span class="line">port_fail_num=0</span><br><span class="line"># while 循环 </span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">  # 查看 ip 是否正常 </span><br><span class="line">  ping=`ping -c 1 $ip |grep loss |awk &apos;&#123;print $6&#125;&apos; |awk -F &quot;%&quot; &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">  # ip 不可用 </span><br><span class="line">  if [$ping -eq 100];then</span><br><span class="line">    ip_fail_num=`expr $ip_fail_num + 1`</span><br><span class="line">    echo ping [$ip] at $(date +% Y-% m-% d% t% X) fail &gt;&gt; $log_path</span><br><span class="line">    notice=1</span><br><span class="line">    notice_msg=`echo ping [$ip] at $(date +% Y-% m-% d% t% X) 失败，累计次数：[$ip_fail_num]，请更换主机 `</span><br><span class="line">    #ip 可用 </span><br><span class="line">  else</span><br><span class="line">    echo ping [$ip] at $(date +% Y-% m-% d% t% X) ok &gt;&gt; $log_path</span><br><span class="line">    ip_fail_num=0</span><br><span class="line">    # 接着判断端口是否可用，使用 nc 工具，超时时间为 20 秒 </span><br><span class="line">    `nc -v -z -w 20 $ip $port`</span><br><span class="line">    # 端口不可用 </span><br><span class="line">    if [0 -ne $?];then</span><br><span class="line">      port_fail_num=`expr $port_fail_num + 1`</span><br><span class="line">      echo nc [$ip:$port] at $(date +% Y-% m-% d% t% X) fail &gt;&gt; $log_path</span><br><span class="line">      if [$port_fail_num -gt 3];then</span><br><span class="line">        notice=1</span><br><span class="line">        notice_msg=`echo nc [$ip:$port] at $(date +% Y-% m-% d% t% X) 失败，累计次数：[$port_fail_num]，请更换端口 `</span><br><span class="line">      fi</span><br><span class="line">    # 端口可用 </span><br><span class="line">    else</span><br><span class="line">      echo nc [$ip:$port] at $(date +% Y-% m-% d% t% X) ok &gt;&gt; $log_path</span><br><span class="line">      port_fail_num=0</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"># 建议开启 server 酱自动通知，推送到微信 </span><br><span class="line"># 不开启请把以下内容注释掉，注释内容持续到 & apos;server 酱通知完成 & apos;</span><br><span class="line"># 关于 server 酱的使用请参考:https://sc.ftqq.com</span><br><span class="line"># 注意 server_key 不要泄露，泄漏后可以去官网重置 </span><br><span class="line">if [1 -eq $notice];then</span><br><span class="line">  echo &quot;************** 开始处理 server 酱通知 & quot; &gt;&gt; $log_path</span><br><span class="line">  server_key=SCU60861T303e1c479df6cea9e95fc54d210232565d7dbbf075750</span><br><span class="line">  # 传输 2 个参数:text/desp,desp 使用 markdown 语法 (注意换行符要使用 2 个换行)</span><br><span class="line">cat&gt;./shadowsocks_msg.txt&lt;&lt;EOF</span><br><span class="line">text=shadowsocks 定时监控服务消息 </span><br><span class="line">&amp;desp=</span><br><span class="line">$notice_msg</span><br><span class="line">EOF</span><br><span class="line">  curl -X POST --data-binary @./shadowsocks_msg.txt https://sc.ftqq.com/$server_key.send &gt;&gt; $log_path</span><br><span class="line">  echo &quot;&quot; &gt;&gt; $log_path</span><br><span class="line">  echo &quot;**************server 酱通知处理完成 & quot; &gt;&gt; $log_path</span><br><span class="line">  notice=0</span><br><span class="line">  notice_msg=&quot;&quot;</span><br><span class="line">fi</span><br><span class="line">sleep $circle_time</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行脚本后，每隔 10 分钟检测一下 <code>ip</code> 或者端口是否可以正常访问。如果正常什么都不做；如果端口不正常则记录，如果端口连续 3 次不正常则发送故障报告，提醒更换端口；如果 <code>ip</code> 不正常则发送故障报告，提醒更换主机。</p><p>下面列举一些 <code>server</code> 酱的通知示例。</p><p>端口连续不可用。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191003005805.png" alt="端口连续不可用" title="端口连续不可用"></p><p><code>ip</code> 不可用。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20191003005759.png" alt="ip 不可用" title="ip 不可用"></p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注</h1><p>1、Server 酱的使用有限制，每天限制 1000 条信息，所以千万不能写个死循环狂发信息，会被拉黑的。</p><p>2、使用 <code>wget</code> 下载文件时，如果本地文件已经存在，会自动新建一个文件，文件很多，有时候会显得很乱，如果想覆盖下载，可以使用 <code>-N</code> 参数，或者使用 <code>-O your_file_name</code> 参数指定本地文件名。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;以前我整理过一篇博客，详细叙述了如何自己搭建梯子，图文并茂，可以参见：&lt;a href=&quot;https://www.playpi.org/2018111601.html&quot;&gt;使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）&lt;/a&gt; 。里面有涉及到购买一台云服务器后该如何操作：初始化环境、安装 &lt;code&gt;Shadowsocks&lt;/code&gt;、配置参数、安装防火墙、启动服务、检查服务状态等等步骤。&lt;/p&gt;&lt;p&gt;虽然过程很详细，只要几个命令就可以完成 &lt;code&gt;Shadowsocks&lt;/code&gt; 服务的搭建，但是对于没有技术基础又不想折腾的读者来说，还是有点困难。所以我把安装过程整理成一个自动化的 &lt;code&gt;Shell&lt;/code&gt; 脚本，读者下载下来之后，直接运行即可，在运行过程中如果需要询问交互，例如填写密码、端口号等，读者直接填写即可，或者直接使用默认的设置。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Shell" scheme="https://www.playpi.org/tags/Shell/"/>
    
      <category term="shadowsocks" scheme="https://www.playpi.org/tags/shadowsocks/"/>
    
      <category term="firewalld" scheme="https://www.playpi.org/tags/firewalld/"/>
    
      <category term="Shadowsocks" scheme="https://www.playpi.org/tags/Shadowsocks/"/>
    
      <category term="CentOS" scheme="https://www.playpi.org/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>使用 http 接口删除 Elasticsearch 集群的索引</title>
    <link href="https://www.playpi.org/2019082101.html"/>
    <id>https://www.playpi.org/2019082101.html</id>
    <published>2019-08-21T15:00:47.000Z</published>
    <updated>2019-08-22T15:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在工作中遇到需要定期关闭、删除 <code>Elasticsearch</code> 集群索引的需求，关闭索引或者删除索引是一个很简单的操作，直接向 <code>Elasticsearch</code> 集群发送一个请求即可。而且，为了实现批量删除，可以一次性发送多个索引名称，使用逗号分隔即可，甚至可以使用通配符【需要 <code>Elasticsearch</code> 集群的相关设置开启】，会直接删掉满足通配符条件的索引。</p><p>本文基于最简单的一个场景：单个索引的关闭、删除，使用 <code>Java</code> 编程语言、<code>HTTP</code> 接口，尝试关闭、删除 <code>Elasticsearch</code> 集群的索引，属于入门级别，开发环境基于 <code>Elasticsearch v1.7.5</code>，这是一个很旧的版本，<code>JDK v1.8</code>。</p><a id="more"></a><p>首先声明，本文内容是基于 <code>Elasticsearch v1.7.5</code>，这是一个很旧的版本，目前各个公司应该只有在一些历史遗留的项目中使用，一般大家都会使用 <code>v5.x</code>、<code>v6.x</code> 之类的版本了。此外，在 <code>v6.x</code> 及以上版本取消了索引 <code>type</code> 的概念，在那个场景下可以随便删除一个索引，而不用再考虑单个索引 <code>index</code> 下面存在的多个 <code>type</code> 的情况，没有误删除的风险。</p><h1 id="背景介绍"><a href="# 背景介绍" class="headerlink" title="背景介绍"></a>背景介绍 </h1><p> 我的目的只有两个：关闭索引、删除索引，是不是很简单的问题。</p><p>回归到我的具体业务，其实就是由于历史数据的积压，创建了很多个索引，而这些数据平时又没有用处，特别是比较久远的数据，根本不会有人用到，留着它们纯属浪费磁盘空间。</p><p>仔细分析、调研，对于最近几个月的数据，还会有一些价值，偶尔有人翻看，其实可以先关闭索引，如果确实有人需要，再临时打开。但是对于已经存在一年以上的数据，不会有人用到，可以说是无人关心、无人问津，这种数据对应的索引就应该被删除，不需要保留。</p><p>那么为了实现这个需求，可以写一个定时程序来处理。</p><h1 id="技术分析"><a href="# 技术分析" class="headerlink" title="技术分析"></a>技术分析 </h1><p> 根据以上的想法，我去查看了 <code>Elasticsearch</code> 的官方文档，发现有非常简单的 <code>HTTP</code> 接口可以使用，我也决定使用它。但是需要注意，在 <code>Elasticsearch</code> 中只能删除整个 <code>index</code>，而不能只是删除 <code>index</code> 下面的某个 <code>type</code>。也就是说只要对某个 <code>index</code> 执行删除操作，则此 <code>index</code> 下面的所有 <code>type</code> 都会被一起删除，所以这是一个有点危险的操作，读者需要慎重执行，千万不要只想着 <strong>一顿操作猛如虎 </strong>，最终沦落为 <strong>不领工资快跑路 </strong>的境地，或者造成 <strong>明天去一趟财务室 </strong>的严重后果。</p><p>参考官方文档内容如下：</p><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-delete-index.html" target="_blank" rel="noopener">indices-delete-index</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-open-close.html" target="_blank" rel="noopener">indices-open-close</a></li></ul><p>看文档很明显，我需要使用三个 <code>HTTP</code> 接口，请读者继续往下看。</p><h2 id="删除索引"><a href="# 删除索引" class="headerlink" title="删除索引"></a>删除索引 </h2><p> 删除索引，使用 <code>curl -XDELETE http://localhost:9200/your_index</code> 接口即可，把主机地址、端口号、索引名称更换成实际的取值即可。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190823232341.png" alt="删除索引文档" title="删除索引文档"></p><p>如果想一次性删除多个索引，可以传入多个索引名称，使用逗号连接，例如：<code>index1,index2,index3</code>，这样就可以一次性删除，但是索引也不能太多，我在自己的集群测试，只能传入 20 个，再多会被忽略，不会被删除。</p><p>当然，为了方便用户使用，<code>Elasticsearch</code> 也是支持通配符的，例如使用：<br><code>curl -XDELETE http://localhost:9200/_all</code>、<br><code>curl -XDELETE http://localhost:9200/*</code><br>就可以把所有的索引删除。其中，<code>_all</code>、<code>*</code> 就是通配符，匹配所有的索引名称，显然这是一个极度危险的操作，如果做了真的是只能 <strong>删库跑路 </strong>。</p><p>另外还有一种比较安全的通配符，就是前缀匹配，例如使用 <code>curl -XDELETE http://localhost:9200/test-*</code> 就可以把以 <code>test-</code> 开头的索引删除，不会删除不满足这个匹配条件的索引。</p><p>当然，是有办法可以避免这种潜在的危险操作，那就是关闭通配符的功能，在 <code>Elasticsearch</code> 的配置文件 <code>elasticsearch.yml</code> 中，有一个 <code>action.destructive_requires_name=true</code> 参数，控制着 <code>_all</code>、<code>*</code> 这两个通配符的开启还是关闭【配置为 true 表示拒绝通配符，只能匹配特定的索引名称】。</p><p>除了直接更改配置文件，需要重启 <code>Elasticsearch</code> 集群，也可以通过 <strong>动态变更参数 </strong>接口来改变这个参数的取值，这样就不用重启集群。但是，这一特性需要 <code>v2.x</code> 以上的版本才会支持，参考官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-update-settings.html" target="_blank" rel="noopener">cluster-update-settings</a> 。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190823232359.png" alt="动态更新配置文档" title="动态更新配置文档"></p><p>以下使用配置举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl XPUT http://localhost:9200/_cluster/settings -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">    永久生效 </span><br><span class="line">    &quot;persistent&quot; : &#123;</span><br><span class="line">        &quot;action.destructive_requires_name&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    本次生效，重启集群后失效 </span><br><span class="line">    &quot;transient&quot; : &#123;</span><br><span class="line">        &quot;iaction.destructive_requires_name&quot; : true </span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>其实仔细想想，关闭通配符可以保证数据安全，但是却给操作带来了一定的麻烦，这个需要读者自己权衡。</p><h2 id="开启关闭索引"><a href="# 开启关闭索引" class="headerlink" title="开启关闭索引"></a>开启关闭索引 </h2><p> 开启、关闭索引的接口比较简单，如下：</p><ul><li>开启索引，<code>curl -XPOST http://localhost:9200/your_index/_open</code></li><li>关闭索引，<code>curl -XPOST http://localhost:9200/your_index/_close</code></li></ul><p>把主机地址、端口号、索引名称更换成实际的取值即可。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190823232821.png" alt="开启关闭索引文档" title="开启关闭索引文档"></p><p>这里的通配符使用方式与上面的一致，不再赘述。</p><h1 id="代码实现"><a href="# 代码实现" class="headerlink" title="代码实现"></a>代码实现 </h1><p> 技术分析完毕，开始使用代码实现，这样就可以在服务器起一个定时程序，用来定时关闭一些索引，定时删除一些索引，以后只需要定期检查有无误操作即可。</p><p>代码逻辑比较简单，使用参数封装 <code>HTTP</code> 请求，然后发送给 <code>Elasticsearch</code> 集群，再解析返回的数据，来判断操作是否成功。</p><p>代码示例我已经放在 <code>GitHub</code> 上面，仅供参考：<a href="https://github.com/iplaypi/iplaypistudy/tree/master/iplaypistudy-elasticsearch/src/main/java/org/playpi/study/client" target="_blank" rel="noopener">CleanEsClusterClient.java</a> ，搜索 <strong>CleanEsClusterClient</strong> 类即可，此外，核心的处理类是 <strong>EsClusterUtil</strong>，里面封装了主要逻辑。</p><p>下面使用删除索引的 <code>HTTP</code> 请求处理来展示一下代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 删除指定的索引 </span><br><span class="line">     * 索引可以批量传入，使用逗号分隔即可 </span><br><span class="line">     *</span><br><span class="line">     * @param hostport</span><br><span class="line">     * @param indexName</span><br><span class="line">     * @param useSsl    是否使用 https 协议 </span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">public static Boolean deleteIndex (String hostport, String indexName, Boolean useSsl) &#123;</span><br><span class="line">String url = &quot;http://&quot; + hostport + &quot;/&quot; + indexName;</span><br><span class="line">String resultStr = HttpUtil.getHttpResult (url, null, HttpUtil.HTTP_METHOD.DELETE, useSsl);</span><br><span class="line">Map&lt;String, Object&gt; resultMap = new Gson ().fromJson (resultStr, Map.class);</span><br><span class="line">if (null != resultMap &amp;&amp; Boolean.valueOf (resultMap.getOrDefault (&quot;acknowledged&quot;, false).toString ())) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190823234735.png" alt="删除索引代码示例" title="删除索引代码示例"></p><p>可以看到只有几行代码，其中 <code>HttpUtil</code> 是一个工具类，也可以在 <code>GitHub</code> 项目中搜索。</p><h1 id="使用命令发送请求"><a href="# 使用命令发送请求" class="headerlink" title="使用命令发送请求"></a>使用命令发送请求 </h1><p> 演示完了代码，下面演示使用 <code>curl</code> 命令的方式来操作 <code>Elasticsearch</code> 集群，与 <code>Java</code> 代码发送 <code>HTTP</code> 请求的效果是一样的，我这里只是简单演示关闭索引的操作。</p><p>使用如下命令向我的 <code>Elasticsearch</code> 集群发送一个关闭索引的请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://dev2:9200/test-index-v2/_close</span><br></pre></td></tr></table></figure><p>发送成功后，可以看到返回结果，关闭成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;acknowledged&quot;:true&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190823234220.png" alt="发送命令返回结果" title="发送命令返回结果"></p><p>去 <code>Elasticsearch</code> 集群看一下索引的状态，索引 <code>test-index-v2</code> 的确已经被关闭了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190823234312.png" alt="v2 索引被关闭" title="v2 索引被关闭"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在工作中遇到需要定期关闭、删除 &lt;code&gt;Elasticsearch&lt;/code&gt; 集群索引的需求，关闭索引或者删除索引是一个很简单的操作，直接向 &lt;code&gt;Elasticsearch&lt;/code&gt; 集群发送一个请求即可。而且，为了实现批量删除，可以一次性发送多个索引名称，使用逗号分隔即可，甚至可以使用通配符【需要 &lt;code&gt;Elasticsearch&lt;/code&gt; 集群的相关设置开启】，会直接删掉满足通配符条件的索引。&lt;/p&gt;&lt;p&gt;本文基于最简单的一个场景：单个索引的关闭、删除，使用 &lt;code&gt;Java&lt;/code&gt; 编程语言、&lt;code&gt;HTTP&lt;/code&gt; 接口，尝试关闭、删除 &lt;code&gt;Elasticsearch&lt;/code&gt; 集群的索引，属于入门级别，开发环境基于 &lt;code&gt;Elasticsearch v1.7.5&lt;/code&gt;，这是一个很旧的版本，&lt;code&gt;JDK v1.8&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="Elasticsearch" scheme="https://www.playpi.org/tags/Elasticsearch/"/>
    
      <category term="Java" scheme="https://www.playpi.org/tags/Java/"/>
    
      <category term="HTTP" scheme="https://www.playpi.org/tags/HTTP/"/>
    
      <category term="curl" scheme="https://www.playpi.org/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令总结</title>
    <link href="https://www.playpi.org/2019080701.html"/>
    <id>https://www.playpi.org/2019080701.html</id>
    <published>2019-08-07T15:39:06.000Z</published>
    <updated>2019-08-07T15:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>在软件工程师的工具列表中，<code>Git</code> 肯定是少不了的，作为分布式版本控制系统，<code>Git</code> 在目前非常流行，可以说，掌握 <code>Git</code> 的使用是工程师的基本功。而且，<code>Git</code> 也会为我们带来诸多的便利，根本离不开它。本文会记录一些常用的 <code>Git</code> 命令，不仅可以自查，也可以帮助读者。</p><p>另外，说明一下，关于远程仓库的选择，目前有多种多样，例如：<code>GitHub</code>、<code>GitLab</code>、<code>Gitee</code>【码云】、<code>coding</code> 等等，读者自行选择。其中，最流行的莫过于 <code>GitHub</code>，在全球非常受欢迎，被微软收购后也没有大家想象的那么可怕，反而更加开源了，现在都可以免费使用 3 个私有仓库了，可见微软还是愿意拥抱开源世界的。</p><p>本文中的远程仓库地址格式会以 <code>GitHub</code> 的 <code>HTTPS</code> 协议为准，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/your_user_name/your_project_name.git</span><br></pre></td></tr></table></figure><p>需要用户输入用户名、密码。</p><p>当然，还有一种格式是 <code>SSH</code> 协议的，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:your_user_name/your_project_name.git</span><br></pre></td></tr></table></figure><p>需要用户在本地生成秘钥，读者使用时可以自行选择。</p><a id="more"></a><h1 id="下载安装"><a href="# 下载安装" class="headerlink" title="下载安装"></a>下载安装 </h1><p> 为了使用 <code>Git</code>，本地肯定要先安装好，在次不再赘述，请读者根据自己的操作系统类型选择合适的版本。<code>Git</code> 客户端下载官方网站：<a href="https://git-scm.com" target="_blank" rel="noopener">git-scm</a> 。</p><p>这里需要注意 <strong>回车换行符 </strong>的标准选择问题，需要先了解回车符【Carriage Return】、换行符【Line Feed】这两个概念，在计算机出现之前，为了解决打字机换行时的字符丢失问题，研发人员发明了这两个符号，回车符号告诉打字机把打印头定位在左边界，换行符号告诉打字机把纸向下移一行。</p><p>但是后来计算机出现后，科学家觉得用两个符号浪费存储空间【当时的存储硬件很昂贵】，保留一个符号就可以，这时候分歧出现了，也就导致现在的多种局面：在 <code>Mac</code> 系统里，每行结尾只有回车符 <code>CR</code>，即 <code>\\r</code>；在 <code>Unix</code> 系统里，每行结尾只有换行符 <code>LF</code>，即 <code>\\n</code>；在 <code>Windows</code> 系统里，每行结尾有回车换行两个符号 <code>CR LF</code>，即 <code>\\r\\n</code> 。</p><p>这就会导致一个问题，在不同操作系统之间传输文本文件，打开后行会错乱，或者行尾多了不可见符号。</p><p>而通过 <code>Git</code> 管理项目时，一般都是代码文件、配置文件，远程仓库如果是 <code>Unix</code> 系统，那么文本文件的每行末尾都是换行符。而当我们本地开发时，用的是 <code>Windows</code> 系统或者 <code>Mac</code> 系统，而且伴随着代码更新、代码推送，多种符号会相互混在一起，就会显得很混乱。不过不用担心，在 <code>Git</code> 中可以设置回车换行符号的标准，在安装客户端时，选择当前操作系统对应的标准，那么每次在 <code>pull</code>、<code>push</code> 时，<code>Git</code> 会自动转换回车换行符号，保证一致性，这样在跨操作系统编辑文件时也不用担心这两个符号的问题。</p><h1 id="初始化"><a href="# 初始化" class="headerlink" title="初始化"></a>初始化 </h1><p> 对于新建的本地文件【以及文件夹】来说，需要初始化并关联到远程仓库【例如在 <code>GitHub</code> 新建了一个空白项目】，然后才能方便管理这个项目，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 进入项目目录 </span><br><span class="line">cd your_project_dir</span><br><span class="line"># 初始化 </span><br><span class="line">git init</span><br><span class="line"># 添加所有文件 </span><br><span class="line">git add .</span><br><span class="line"># 提交到本地仓库 </span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"># 关联到远程仓库 </span><br><span class="line">git remote add origin https://github.com/your_user_name/your_project_name.git</span><br><span class="line"># 推送更新到远程仓库 </span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>如果本地的文件夹已经是一个标准 <code>Git</code> 项目，并且没有关联到任何远程分支，则直接关联即可，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关联到远程仓库 </span><br><span class="line">git remote add origin https://github.com/your_user_name/your_project_name.git</span><br><span class="line"># 推送更新到远程仓库 </span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>需要注意，如果远程仓库已经初始化【例如在 <code>GitHub</code> 上面新建一个包含 <code>README</code> 文件的项目】，本地仓库也已经初始化【执行 <code>init</code>】，此时关联后进行提交或者拉取更新会失败。<code>git pull</code> 返回错误 <code>fatal: refusing to merge unrelated histories</code>，提示仓库混乱【本地、远程是两个不同的仓库】，不能拉取；而 <code>git push</code> 则返回 <code>error: failed to push some refs to xx</code>，也不能提交。</p><p>此时不用担心，可以使用参数 <code>git pull origin master --allow-unrelated-histories</code> 来拉取远程仓库的内容，并合并所有内容，紧接着就可以提交本地的变更了。</p><h1 id="检出仓库"><a href="# 检出仓库" class="headerlink" title="检出仓库"></a>检出仓库 </h1><p> 如果本地目录是空白的，还没有任何项目，则需要从远程仓库克隆项目到本地，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从远程仓库克隆项目，或者说是检出代码 </span><br><span class="line">git clone https://github.com/your_user_name/your_project_name.git</span><br><span class="line"># 进入项目目录 </span><br><span class="line">cd your_project_dir</span><br></pre></td></tr></table></figure><h1 id="添加提交更新"><a href="# 添加提交更新" class="headerlink" title="添加提交更新"></a>添加提交更新 </h1><p> 如果更新了代码，或者新增了文件，需要提交更新，这样才能与别人合作开发项目，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 添加文件，对于新增的文件而言 </span><br><span class="line">git add your_file_name</span><br><span class="line"># 点号表示添加本目录所有文件 </span><br><span class="line">git add .</span><br><span class="line"># 提交变更到本地仓库，适当添加注释 </span><br><span class="line">git commit -m &apos;commit message&apos;</span><br><span class="line"># 当然，仅仅提交到本地仓库还不够，还需要推送到远程仓库 </span><br><span class="line">git push</span><br><span class="line"># 在推送时可以指定分支，不指定则表示当前分支 </span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h1 id="拉取更新"><a href="# 拉取更新" class="headerlink" title="拉取更新"></a>拉取更新 </h1><p> 如果在和别人合作开发的过程中，需要拉取别人的变更到本地，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 拉取更新 (如果遇到代码冲突会麻烦，往下看)</span><br><span class="line">git pull</span><br><span class="line"># git pull 其实相当于 2 个步骤 </span><br><span class="line">git fetch</span><br><span class="line">git merge</span><br><span class="line"># 如果 merge 遇到冲突，需要手动解决 </span><br><span class="line"># 1 - 改代码，把冲突文件改掉，可以使用 git diff &lt;source_branch&gt; &lt;target_branch&gt; 比较不同点 </span><br><span class="line"># 2 - 使用 git add your_file 标记改动完成 </span><br><span class="line"># 3 - 使用 git commit -m &quot;conflict fixed&quot; 提交冲突解决后的变更 </span><br></pre></td></tr></table></figure><h1 id="管理分支"><a href="# 管理分支" class="headerlink" title="管理分支"></a>管理分支 </h1><p> 如果在开发过程中多人协作，肯定会有多个分支，此时涉及到管理分支的问题，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 新建分支并切换过去 </span><br><span class="line">git checkout -b your_branch_name</span><br><span class="line"># 切换到指定的分支 </span><br><span class="line">git checkout your_branch_name</span><br><span class="line"># 删除分支，切记不能删除当前分支，必须先切换到别的分支 </span><br><span class="line">git branch -d your_branch_name</span><br><span class="line"># 将分支推送到远程仓库，不推送别人不可见 </span><br><span class="line">git push origin your_branch_name</span><br><span class="line"># 当然，如果是处在当前分支，推送可以省略参数 </span><br><span class="line">git push</span><br><span class="line"># 合并指定分支到当前分支 </span><br><span class="line">git merge your_branch_name</span><br></pre></td></tr></table></figure><p>当然，此种情况有可能也会遇到代码冲突问题，参见 <strong>拉取更新 </strong>小节，需要手动解决冲突。</p><h1 id="冲突解决"><a href="# 冲突解决" class="headerlink" title="冲突解决"></a>冲突解决 </h1><p> 参见 <strong>拉取更新 </strong>小节，需要手动解决冲突。</p><h1 id="更换关联远程分支"><a href="# 更换关联远程分支" class="headerlink" title="更换关联远程分支"></a>更换关联远程分支 </h1><p> 如果本地代码，已经关联了远程分支，但是想更换远程分支，例如想从 <code>GitHub</code> 切换到 <code>GitLab</code>，或者想在不同的项目之间切换。则需要先解除对远程分支的关联，再关联到新的远程分支，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 解除对远程仓库的关联 </span><br><span class="line">git remote remove origin</span><br><span class="line"># 关联到新的远程仓库 </span><br><span class="line">git remote add origin https://github.com/your_user_name/your_project_name.git</span><br><span class="line"># 接下来写代码、提交即可 </span><br></pre></td></tr></table></figure><h1 id="强制更新覆盖本地修改"><a href="# 强制更新覆盖本地修改" class="headerlink" title="强制更新覆盖本地修改"></a>强制更新覆盖本地修改 </h1><p> 有些时候我们只想要 <code>Git</code> 远程仓库的代码，而对于本地的项目中修改不做任何理会【即本地的修改不提交，放弃不要了】，这时候就需要用到 <code>Git pull</code> 的强制覆盖，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取远程最新的版本，或者使用 git fetch origin 也行 </span><br><span class="line">git fetch --all</span><br><span class="line"># 或者直接使用 git reset --hard HEAD 也行 </span><br><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br><span class="line"># 如果只想更改某个文件 (不会影响新文件、已经 commit 的文件)</span><br><span class="line">git checkout -- your_file_name</span><br></pre></td></tr></table></figure><h1 id="保存用户名密码"><a href="# 保存用户名密码" class="headerlink" title="保存用户名密码"></a>保存用户名密码 </h1><p><code>Git</code> 可以将用户名、密码和仓库链接保存在硬盘中，而不用在每次 <code>git push</code> 的时候都输入密码。保存密码到硬盘只要一条命令就可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper store</span><br></pre></td></tr></table></figure><p> 当 <code>git push</code> 的时候输入一次用户名和密码后，就会被记录下来，以后不用再次输入。但是，这样保存的密码是明文的，保存在用户家目录的 <code>~/.git-credentials</code> 文件中，读者可以查看内容，使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.git-credentials</span><br></pre></td></tr></table></figure><p>由于这种方式密码是明文存储在文件中的，所以不安全，还是推荐大家使用 <code>SSH</code> 的方式。</p><p>此外，如果想手动设置用户名、邮箱，可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 如果项目的环境众多，就不要带 --global 参数，否则全局的参数设置会影响到其它 Git 项目 </span><br><span class="line">git config --global user.name [username]</span><br><span class="line">git config --global user.email [email]</span><br></pre></td></tr></table></figure><h1 id="管理标签"><a href="# 管理标签" class="headerlink" title="管理标签"></a>管理标签 </h1><p> 在软件开发的过程中，创建标签是很有必要的，可以跟踪当前的开发进度，出问题也能及时回退。可以按照如下流程操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建标签，标签名字为 1.0.1,commit_id 是当次提交唯一标识 </span><br><span class="line">git tag 1.0.1 commit_id</span><br><span class="line"># 当然，这里的 commit_id 会很长，不用全部写出来，一般 6-10 位足够了，只要保证它是唯一的就行 </span><br><span class="line"># 如果需要获取 commit_id, 可以使用 log 命令 </span><br><span class="line">git log</span><br></pre></td></tr></table></figure><h1 id="一些建议"><a href="# 一些建议" class="headerlink" title="一些建议"></a>一些建议 </h1><p> 在使用 <code>Git</code> 的时候，会有一些隐藏的小功能，可以增加使用体验，下面列出几个：</p><ul><li>自带的图形化工具，使用 <code>gitk</code> 命令即可 </li><li> 设置彩色的内容输出，使用 <code>git config color.ui true</code> 设置 </li><li> 查看历史记录时，只显示一行注释信息，使用 <code>git config format.pretty oneline</code> 设置 </li><li> 添加文件时，如果想使用询问交互的模式，使用 <code>git add -i</code>，其实就是加了一个 <code>-i</code> 参数 </li></ul><p> 此外，在使用 <code>Git</code> 相关的命令时，由于需要反复操作，时间久了会觉得很麻烦，因为每个命令都很长，由多个单词组成，每次都敲一遍还是很低效的。那么有没有什么好办法呢？其实可以合理利用 <code>Linux</code> 系统的别名特性，把自己常用的命令收集起来，分别给它们创建别名，这样在使用时只要简单敲几个字母就行。</p><p>我一般是在家目录下的 <code>.bashrc</code> 文件中指定别名，这样每次登录时会自动加载，可以直接在会话终端使用，关于 <code>Git</code> 的别名内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias gp=&apos;git pull&apos;</span><br><span class="line">alias gb=&apos;git branch&apos;</span><br><span class="line">alias gc=&apos;git checkout&apos;</span><br><span class="line">alias gcs=&apos;git config credential.helper store&apos;</span><br><span class="line">alias gcfgn=&apos;git config --global user.name &apos;</span><br><span class="line">alias gcfge=&apos;git config --global user.email &apos;</span><br></pre></td></tr></table></figure><p>设置别名后，直接使用 <code>gp</code> 就相当于调用了 <code>git pull</code>，这就很方便了，其它命令也是类似的效果，读者可以根据自己的需要灵活设置。</p><h1 id="资源推荐"><a href="# 资源推荐" class="headerlink" title="资源推荐"></a>资源推荐 </h1><p> 下面列出一些常见的资源、网站、工具等信息，可能对读者有帮助：</p><ul><li><code>git-tower</code> 工具，可视化管理，官网：<a href="https://www.git-tower.com" target="_blank" rel="noopener">git-tower</a></li><li><code>sourcetree</code> 工具，可视化管理，官网：<a href="https://www.sourcetreeapp.com" target="_blank" rel="noopener">sourcetreeapp</a></li><li><code>GitHub desktop</code> 工具，可视化管理，官网：<a href="https://desktop.github.com" target="_blank" rel="noopener">desktop</a></li><li><code>Git</code> 社区参考书：<a href="https://book.git-scm.com" target="_blank" rel="noopener">book.git-scm</a></li><li><code>GitHub</code> 帮助文档：<a href="https://help.github.com" target="_blank" rel="noopener">help.github</a></li><li>像 <code>Git</code> 一样思考：<a href="http://think-like-a-git.net" target="_blank" rel="noopener">think-like-a-git</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;在软件工程师的工具列表中，&lt;code&gt;Git&lt;/code&gt; 肯定是少不了的，作为分布式版本控制系统，&lt;code&gt;Git&lt;/code&gt; 在目前非常流行，可以说，掌握 &lt;code&gt;Git&lt;/code&gt; 的使用是工程师的基本功。而且，&lt;code&gt;Git&lt;/code&gt; 也会为我们带来诸多的便利，根本离不开它。本文会记录一些常用的 &lt;code&gt;Git&lt;/code&gt; 命令，不仅可以自查，也可以帮助读者。&lt;/p&gt;&lt;p&gt;另外，说明一下，关于远程仓库的选择，目前有多种多样，例如：&lt;code&gt;GitHub&lt;/code&gt;、&lt;code&gt;GitLab&lt;/code&gt;、&lt;code&gt;Gitee&lt;/code&gt;【码云】、&lt;code&gt;coding&lt;/code&gt; 等等，读者自行选择。其中，最流行的莫过于 &lt;code&gt;GitHub&lt;/code&gt;，在全球非常受欢迎，被微软收购后也没有大家想象的那么可怕，反而更加开源了，现在都可以免费使用 3 个私有仓库了，可见微软还是愿意拥抱开源世界的。&lt;/p&gt;&lt;p&gt;本文中的远程仓库地址格式会以 &lt;code&gt;GitHub&lt;/code&gt; 的 &lt;code&gt;HTTPS&lt;/code&gt; 协议为准，即：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://github.com/your_user_name/your_project_name.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要用户输入用户名、密码。&lt;/p&gt;&lt;p&gt;当然，还有一种格式是 &lt;code&gt;SSH&lt;/code&gt; 协议的，即：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git@github.com:your_user_name/your_project_name.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要用户在本地生成秘钥，读者使用时可以自行选择。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Git" scheme="https://www.playpi.org/tags/Git/"/>
    
      <category term="pull" scheme="https://www.playpi.org/tags/pull/"/>
    
      <category term="push" scheme="https://www.playpi.org/tags/push/"/>
    
      <category term="commit" scheme="https://www.playpi.org/tags/commit/"/>
    
  </entry>
  
  <entry>
    <title>记录一次关于 log4j 的 ClassNotFoundException 异常</title>
    <link href="https://www.playpi.org/2019073001.html"/>
    <id>https://www.playpi.org/2019073001.html</id>
    <published>2019-07-29T17:04:36.000Z</published>
    <updated>2019-08-04T17:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>本来一个正常的 <code>Java</code> 项目，某一次运行的时候发现了一个异常：<br><code>java.lang.ClassNotFoundException: org.apache.log4j.DailyRollingFileAppender</code>，<br>我觉得很奇怪，这种常用的类怎么可能会缺失。但是，<strong> 代码之多，无奇不有 </strong>，遇到这种奇怪的问题也是检验我技术高低的良机，看我怎么步步排查，找到问题所在。本文开发环境基于 <code>Java v1.8+</code>、<code>Spark v1.6.x</code>、<code>Maven v3.5.x</code> 。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 场景描述：一个常规的 <code>Java</code> 项目，单线程处理数据，一直以来都正常运行，某一天我做了小小的代码改动，接着运行就报错。</p><p>错误日志信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">log4j:ERROR Could not instantiate class [org.apache.log4j.DailyRollingFileAppender].</span><br><span class="line">java.lang.ClassNotFoundException: org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">at java.net.URLClassLoader.findClass (URLClassLoader.java:381)</span><br><span class="line">at java.lang.ClassLoader.loadClass (ClassLoader.java:424)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass (Launcher.java:338)</span><br><span class="line">at java.lang.ClassLoader.loadClass (ClassLoader.java:357)</span><br><span class="line">at java.lang.Class.forName0 (Native Method)</span><br><span class="line">at java.lang.Class.forName (Class.java:264)</span><br><span class="line">at org.apache.log4j.helpers.Loader.loadClass (Loader.java:178)</span><br><span class="line">at org.apache.log4j.helpers.OptionConverter.instantiateByClassName (OptionConverter.java:317)</span><br><span class="line">at org.apache.log4j.helpers.OptionConverter.instantiateByKey (OptionConverter.java:120)</span><br><span class="line">at org.apache.log4j.PropertyConfigurator.parseAppender (PropertyConfigurator.java:629)</span><br><span class="line">at org.apache.log4j.PropertyConfigurator.parseCategory (PropertyConfigurator.java:612)</span><br><span class="line">at org.apache.log4j.PropertyConfigurator.configureRootCategory (PropertyConfigurator.java:509)</span><br><span class="line">at org.apache.log4j.PropertyConfigurator.doConfigure (PropertyConfigurator.java:415)</span><br><span class="line">at org.apache.log4j.PropertyConfigurator.doConfigure (PropertyConfigurator.java:441)</span><br><span class="line">at org.apache.log4j.helpers.OptionConverter.selectAndConfigure (OptionConverter.java:468)</span><br><span class="line">at org.apache.log4j.LogManager.&lt;clinit&gt;(LogManager.java:122)</span><br><span class="line">at org.slf4j.impl.Log4jLoggerFactory.getLogger (Log4jLoggerFactory.java:64)</span><br><span class="line">at org.slf4j.LoggerFactory.getLogger (LoggerFactory.java:285)</span><br><span class="line">at org.slf4j.LoggerFactory.getLogger (LoggerFactory.java:305)</span><br><span class="line">at com.xxx.yyy.client.hbase.HBaseUtils.&lt;clinit&gt;(HBaseUtils.java:36)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804183345.png" alt="错误日志片段截图" title="错误日志片段截图"></p><p>错误日志很多，主要看这一行信息：<br><code>java.lang.ClassNotFoundException: org.apache.log4j.DailyRollingFileAppender</code>，<br>找不到 <code>DailyRollingFileAppender</code> 这个类，即类缺失。显然，这不可能是代码改动引起的问题，这种情况可能是虚拟机没有加载到类，或者加载了多个版本不一致的类导致冲突。</p><p>查了很多网上的相同问题，都说是依赖包缺失，但是我觉得不太可能，因为这个 <code>Java</code> 项目中的其它模块都能正常使用【使用多个 <code>Maven</code> 模块管理整个 <code>Java</code> 项目，它们的环境一致】，于是想办法验证一下。</p><p>先在 <code>Java</code> 项目中搜索类，可以看到能搜索到，说明不会缺失【此处不考虑打包过程中移除的情况】。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804183506.png" alt="全局搜索类" title="全局搜索类"></p><p>再使用 <code>mvn dependency:tree</code> 生成依赖树信息，在依赖树信息中搜索查看，也能看到关于 <code>slf4j</code> 的两个依赖包以及关于 <code>log4j</code> 的一个依赖包，说明没有缺失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[INFO] |  |  +- org.slf4j:slf4j-api:jar:1.7.10:compile</span><br><span class="line">[INFO] |  |  +- org.slf4j:slf4j-log4j12:jar:1.7.10:compile</span><br><span class="line">...</span><br><span class="line">[INFO] +- log4j:log4j:jar:1.2.12:compile</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804183531.png" alt="查看 slf4j 相关类" title="查看 slf4j 相关类"></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804183539.png" alt="查看 log4j 相关类" title="查看 log4j 相关类"></p><p>根据上面的操作分析，依赖没有缺失，而且，从搜索结果看只有一个类，从依赖树信息中看也没有多版本冲突，此时看似陷入了僵局。</p><h1 id="问题分析解决"><a href="# 问题分析解决" class="headerlink" title="问题分析解决"></a>问题分析解决 </h1><p> 我努力回想改动了什么代码或者配置才会导致这个问题，使用 <code>Git</code> 查一下，通过查看提交历史记录，发现了一处微小的改动，在 <code>Maven</code> 子模块的 <code>pom.xml</code> 文件中。这也是造成这个问题的罪魁祸首，下面详细说明。</p><p>其实，此时需要考虑一个问题，本机查看的项目代码和打包后的可能不一样，比如冲突问题导致的版本选择，或者插件造成的部分无效依赖被移除等原因会造成前后差异。</p><p>我也一直在回想我改动了什么代码或者配置，才触发了这个问题，果然，通过 <code>Git</code> 的提交记录找到了蛛丝马迹。</p><p>通过仔细的对比，发现了问题所在，原来在 <code>pom.xml</code> 文件中，使用了 <code>maven-shade-plugin</code> 插件进行依赖瘦身，导致将 <code>slf4j</code>、<code>log4j</code> 相关的依赖全部被移除。归根结底，还是因为我在代码中没有使用 <code>slf4j</code>、<code>log4j</code> 的相关类【但是在父类中使用了】，<code>maven-shade-plugin</code> 插件误以为这两个依赖都是无用的，就全部移除了。等到程序启动运行的时候，发现找不到相关的类了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804183620.png" alt="shade 插件配置" title="shade 插件配置"></p><p><code>pom.xml</code> 配置信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- shade 构件，打包时可以：包含依赖构件，重命名包名避免冲突，移除特定的类避免冲突 --&gt;</span><br><span class="line">&lt;!-- 具体参考:http://maven.apache.org/plugins/maven-shade-plugin/--&gt;</span><br><span class="line">&lt;!-- &lt;minimizeJar&gt;true&lt;/minimizeJar&gt; 可以自动移除无用的类，瘦身 jar 包 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;!-- 绑定 Maven 的 package 阶段 --&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;shade&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">      &lt;!-- 详细配置项 --&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;!-- 自动移除无用的依赖，坑：项目没用到 slf4j, 但是依赖的父类用到，却被移除 --&gt;</span><br><span class="line">        &lt;!--&lt;minimizeJar&gt;true&lt;/minimizeJar&gt;--&gt;</span><br><span class="line">        &lt;!-- 将指定文件以 append 方式加入到构建的 jar 包中 --&gt;</span><br><span class="line">        &lt;transformers&gt;</span><br><span class="line">          &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;</span><br><span class="line">            &lt;resource&gt;reference.conf&lt;/resource&gt;</span><br><span class="line">          &lt;/transformer&gt;</span><br><span class="line">        &lt;/transformers&gt;</span><br><span class="line">        &lt;!-- 过滤匹配到的文件 --&gt;</span><br><span class="line">        &lt;filters&gt;</span><br><span class="line">          &lt;filter&gt;</span><br><span class="line">            &lt;artifact&gt;*:*&lt;/artifact&gt;</span><br><span class="line">            &lt;excludes&gt;</span><br><span class="line">              &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;</span><br><span class="line">              &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;</span><br><span class="line">              &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;</span><br><span class="line">            &lt;/excludes&gt;</span><br><span class="line">          &lt;/filter&gt;</span><br><span class="line">        &lt;/filters&gt;</span><br><span class="line">        &lt;!-- 附加所有构件，并指定后缀名，与主程序 jar 包区分开 --&gt;</span><br><span class="line">        &lt;shadedArtifactAttached&gt;true&lt;/shadedArtifactAttached&gt;</span><br><span class="line">        &lt;shadedClassifierName&gt;jar-with-dependencies&lt;/shadedClassifierName&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;minimizeJar&gt;true&lt;/minimizeJar&gt;</code> 这个配置决定了打包的依赖保留还是移除，我把它配置为 <code>true</code>，打包时会自动帮我移除无用的依赖包，其中包括 <code>log4j</code>、<code>slf4j</code>，也就导致了本文开头的问题。</p><p>看来，<code>maven-shade-plugin</code> 插件的依赖瘦身功能，还是要慎用，像今天这种情况就很是莫名其妙，只能靠细心、靠经验来发现问题、解决问题，如果是别人的代码还真难发现。</p><p>解决方法很简单，只要把这个配置移除【或者设置为 <code>false</code>】，问题就解决了。还有另外一种解决方式，在代码中显式使用 <code>log4j</code> 的相关类，其实真实是使用 <code>slf4j</code> 里面的实现类，这样打包时 <code>maven-shade-plugin</code> 插件则不会移除相关的类。</p><h1 id="问题总结"><a href="# 问题总结" class="headerlink" title="问题总结"></a>问题总结 </h1><p> 在这种 <code>ClassNotFoundException</code> 异常现象的分析过程中，可以借助一款工具：<a href="https://alibaba.github.io/arthas" target="_blank" rel="noopener">Arthas（阿尔萨斯）</a> ，这是一款由 <strong>阿里巴巴 </strong>开源的一款 <code>Java</code> 诊断工具，深受开发者喜爱。</p><p>它可以解决类似如下的问题：</p><ul><li>这个类从哪个 <code>jar</code> 包加载的？为什么会报各种类相关的 <code>Exception</code>？</li><li>我改的代码为什么没有执行到？难道是我没 <code>commit</code>？分支搞错了？</li><li>遇到问题无法在线上 <code>debug</code>，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 <code>debug</code>，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到 <code>JVM</code> 的实时运行状态？</li></ul><p>比如针对我这个场景，我就可以快速查到 <code>DailyRollingFileAppender</code> 这个类有没有被虚拟机加载，以及从哪个 <code>jar</code> 包加载的。可以快速发现：虚拟机中并没有加载这个类，这个时候就可以断定类缺失，然后转换思路去查为什么类缺失。如果在项目中搜索、查看依赖树信息都没有发现类缺失的迹象，就可以怀疑是不是打包过程中被移除了，甚至可以怀疑是不是上传了错误的 <code>jar</code> 包去执行程序。</p><p>这样就可以一步一步、有理有据地分析问题，直到解决问题，不至于全程懵逼，靠经验与猜测去碰运气。显然，解决问题的过程肯定是目的明确而且高效的。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;本来一个正常的 &lt;code&gt;Java&lt;/code&gt; 项目，某一次运行的时候发现了一个异常：&lt;br&gt;&lt;code&gt;java.lang.ClassNotFoundException: org.apache.log4j.DailyRollingFileAppender&lt;/code&gt;，&lt;br&gt;我觉得很奇怪，这种常用的类怎么可能会缺失。但是，&lt;strong&gt; 代码之多，无奇不有 &lt;/strong&gt;，遇到这种奇怪的问题也是检验我技术高低的良机，看我怎么步步排查，找到问题所在。本文开发环境基于 &lt;code&gt;Java v1.8+&lt;/code&gt;、&lt;code&gt;Spark v1.6.x&lt;/code&gt;、&lt;code&gt;Maven v3.5.x&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Spark" scheme="https://www.playpi.org/tags/Spark/"/>
    
      <category term="Maven" scheme="https://www.playpi.org/tags/Maven/"/>
    
      <category term="log4j" scheme="https://www.playpi.org/tags/log4j/"/>
    
      <category term="slf4j" scheme="https://www.playpi.org/tags/slf4j/"/>
    
      <category term="ClassNotFoundException" scheme="https://www.playpi.org/tags/ClassNotFoundException/"/>
    
      <category term="DailyRollingFileAppender" scheme="https://www.playpi.org/tags/DailyRollingFileAppender/"/>
    
      <category term="maven-shade-plugin" scheme="https://www.playpi.org/tags/maven-shade-plugin/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vultr 创建云主机详细步骤</title>
    <link href="https://www.playpi.org/2019072801.html"/>
    <id>https://www.playpi.org/2019072801.html</id>
    <published>2019-07-27T17:20:23.000Z</published>
    <updated>2019-08-03T17:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>我在以前的一篇博客中，详细记录了自己搭建翻墙梯子的过程，参考：<br><a href="https://www.playpi.org/2018111601.html">使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）</a> ，其中，我还顺便留下了我的 <code>Vultr</code> 推广链接：<br><a href="https://www.vultr.com/?ref=7443790" target="_blank" rel="noopener">我的 10 美元推广链接 </a> 。可能是因为这篇博客的流量还不错，基本每个月都会有几个人通过我的推广链接注册，当然，注册后真正使用的人只有 1-2 个。</p><p> 我看了一下我的账户，平均每个月都会收到一份有效注册所带来的优惠券，大概可以给我带来 <code>$10</code> 的收入，足够抵消我的月租消费了，这也是注册 <code>Vultr</code> 后并真正使用 <code>Vultr</code> 的人带给我的收入，我觉得这是意外的惊喜。</p><p>所以，本着分享的理念以及「吃饭」的需要，我推荐大家使用 <code>Vultr</code>，但是担心可能有些读者第一次使用 <code>Vultr</code>，系统又是英文的，不太熟悉。在此，我把节点的创建过程再整理出来，图文并茂，并说明注意事项，给读者参考。读者参考本文一步一步操作，就可以从零开始创建 <code>Vultr</code> 主机，只需要再花费 <code>$10</code> 就可以使用半年的 <code>Vultr</code> 云主机。至于搭建梯子的过程还是请继续参考上面给出的以前的博客内容：<a href="https://www.playpi.org/2018111601.html">使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）</a> 。</p><p><strong>声明 </strong>：2019 年 08 月 09 日发现 <code>Vultr</code> 官方不会再赠送 <code>$10</code> 的代金券给新注册用户，只会给我发放代金券，但是 <code>$25</code> 的代金券仍然有效，请读者选择 <code>$25</code> 对应的链接打开注册，以免错失了代金券。</p><a id="more"></a><p>首先声明，本文中的文字与截图整理于 2019 年 07 月 26 日到 2019 年 08 月 03 日，以后 <code>Vultr</code> 这个产品的界面或者功能可能会变化，所以请读者以实际使用时的产品为准，本文仅供参考。但是我觉得无论 <code>Vultr</code> 这个产品再怎么变，本文描述的这几大核心功能也不会变，最多就是界面操作的变化，读者可以放心参考使用。</p><h1 id="开篇推荐"><a href="# 开篇推荐" class="headerlink" title="开篇推荐"></a>开篇推荐 </h1><p> 使用 <code>Vultr</code> 的云主机，最好选择洛杉矶地区的或者日本的服务器，我亲自测试这两个地区的服务器最稳定，已经推荐给很多人，而且网速相对来说较好，我的推广链接【可以获取 10 美元的代金券，只要充值 10 美元就能使用】：<a href="https://www.vultr.com/?ref=7443790" target="_blank" rel="noopener">我的 10 美元推广链接 </a> ，官网链接也在这里：<a href="https://my.vultr.com" target="_blank" rel="noopener">Vultr</a> 。</p><p> 这里再多说点，如果使用上面的推广链接注册 <code>Vultr</code> 帐号，可以获取 10 美元的代金券，需要在 30 天之内使用，使用的条件就是充值 10 美元以上的钱。例如充值 10 美元就会获取 20 美元的帐号余额，这些钱如果购买 3.5 美元的主机可以使用半年了，挺划算的。</p><p>此外还有一个限时的大优惠，如果准备长期使用 <code>Vultr</code>，肯定要充值多一点，我这里有一个限时的推广链接：<a href="https://www.vultr.com/?ref=7861302-4F" target="_blank" rel="noopener">我的 25 美元推广链接 </a> ，可以获取 25 美元的代金券，使用条件就是充值 25 美元以上的金额。假如充值了 25 美元，总共获取 50 美元入账，购买 3.5 美元的主机可以使用 14 个多月，适合长期使用 <code>Vultr</code> 的。</p><p> 以下列举 <code>Vultr</code> 的五大好处：</p><ul><li><strong>扣费灵活 </strong>，<code>Vultr</code> 有一个好处就是主机的费用并不是按照月份扣除的，而是按照天扣除的，每天扣除的费用是 <strong>月租 / 30</strong>。例如你的主机只用了 10 天，然后销毁不用了，实际只会扣除月租 1/3 的钱，这种方式很是灵活，哪怕主机的 <code>IP</code> 地址被屏蔽了也可以销毁重新生成一个，并不会浪费钱。它不像国内的云服务商，一般是按照月份扣费的。</li><li><strong>主机管理灵活 </strong>，它不像国内的云服务商，购买一台云主机后，直接先扣费，然后分配一台主机，<code>IP</code> 地址是固定的，如果有问题只能重启。而在 <code>Vultr</code> 中是可以随意创建、销毁虚拟主机的，根据你自己的需求，选择配置、主机机房位置、操作系统，几分钟就可以生成一台主机，如果用了几天觉得不好，或者 <code>IP</code> 地址被封，再销毁重新创建即可，<code>Vultr</code> 只会扣除你几天的费用，非常人性化。</li><li><strong>价格优惠 </strong>，根据配置的不同，价格有多个档次，有 <code>$2.5 / 月 </code>（只有 <code>IP6</code> 地址）、<code>$3.5 / 月</code>、<code>$5 / 月</code> 等等，更贵的也有，一般个人使用选择这三个中的一个就够用了，但是要注意便宜的经常售罄，而且最便宜的只支持 <code>IP6</code>，慎用。大家如果看到没有便宜的主机了不用着急，可以先买了贵的用着，反正费用是按照天数扣除的，等后续发现便宜的套餐赶紧购买，同时把贵的主机给销毁，不会亏钱的。</li><li><strong> 付费方式灵活 </strong>，付费方式除了支持常见的 <strong>Paypal</strong>、<strong> 信用卡 </strong>等方式，它还支持 <strong>比特比 </strong>、<strong> 支付宝 </strong>、<strong> 微信 </strong>等方式。就问你是不是很人性化，作为一家国外的公司，还特意支持 <strong>支付宝 </strong>、<strong> 微信 </strong>的方式支付，也从侧面反映了随着中国的日益强大，中国的电子支付方式正在走向全球，越来越流行。</li><li><strong>机房分布全球 </strong>，它的机房位置遍布全球，例如 <strong>日本 </strong>、<strong> 新加坡 </strong>、<strong> 澳大利亚 </strong>、<strong> 美国 </strong>、<strong> 德国 </strong>、<strong> 英国 </strong>、<strong> 加拿大 </strong>，读者根据网络的需求可以灵活选择。</li></ul><p>至于使用 <code>Vultr</code> 云主机做什么，我想最大的用处就是自行搭建梯子，可以参考我以前的博客内容：<a href="https://www.playpi.org/2018111601.html">使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）</a> 。</p><h1 id="产品介绍"><a href="# 产品介绍" class="headerlink" title="产品介绍"></a>产品介绍 </h1><p> 首先来看一下官网主页，官网主页地址为：<a href="https://my.vultr.com" target="_blank" rel="noopener">Vultr</a> ，目前看官网的 UI 和几个月前相比有变化，颜色在视觉上加深了，图标显得更加拟物化。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184837.png" alt="官网首页截图" title="官网首页截图"></p><p>登录的时候需要特别注意，它的验证码非常丧心病狂，一般是六位，而且很难看清楚，更加让人抓狂的是，有时候看不清还不能换一个，只能在输入认证错误后再重新输入，这种用户体验比不上国内的厂商。当然，在常用的网络环境中，<code>Vultr</code> 会检测出当前为常用网络，从而跳过验证码验证这一步骤，所以有时候不需要输入验证码。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184912.png" alt="登录验证码" title="登录验证码"></p><p>登录成功后，进入到主页，默认是在 <code>Products</code> 模块下面的 <code>Instances</code> 标签页。读者可以看到我这里已经有主机显示出来，如果读者是第一次注册后登录进去或者还没有创建主机的话，是看不到类似于我这里图中的 <code>Server</code> 列表的。不过不用着急，后面我会带领读者一步一步进行主机的创建。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803185111.png" alt="Vultr 系统主页" title="Vultr 系统主页"></p><p>先来熟悉一下系统的所有模块与常用功能，毕竟界面是全英文的，读者熟悉后方便在后续的操作中熟练找到需要的模块与功能。</p><p>注意查看上面的首页图，读者也可以在登录进入系统之后，随便点击浏览一下。先看左侧列表，分为五个大模块：<code>Products</code>、<code>Billing</code>、<code>Support</code>、<code>Affiliate</code>、<code>Account</code>，下面简单描述一下这五个大模块，读者看完后在心里可以有一个基本的概念：</p><ul><li><code>Products</code>：<strong> 产品管理 </strong>模块，在里面可以管理主机、登录密钥、DNS、系统快照等信息，最常用的就是主机的创建、查看、销毁 </li><li><code>Billing</code>：<strong> 账单管理 </strong> 模块，在里面可以查看历史消费记录、支付方式，最常用的就是欠费充值、查看历史消费记录 </li><li><code>Support</code>：<strong> 系统支持 </strong> 模块，可以在里面浏览一些常见问题，或者联系客服，一般情况下用不到，目前无需关心 </li><li><code>Affiliate</code>：<strong> 营销推广 </strong> 模块，可以利用 <code>Vultr</code> 为你生成的唯一链接，拉取新用户注册使用，然后就会给你返代金券，可抵扣消费，一般情况下用不到，不过可以分享给身边的人试试 </li><li><code>Account</code>：<strong> 帐号信息 </strong> 模块，包括姓名、地址、邮箱等信息，每月的扣费记录会以账单的形式发送到你的邮箱，这个模块除了第一次设置，以后基本用不到，一般情况下每个月看一次邮箱即可 </li></ul><h1 id="产品管理"><a href="# 产品管理" class="headerlink" title="产品管理"></a> 产品管理 </h1><p><strong> 产品管理 </strong>里面的功能很多，但是对于我这样需求简单的人来说，不需要那么多功能，我只需要创建主机、系统快照这两个功能足够，所以我也只会介绍这两个功能。</p><h2 id="主机创建"><a href="# 主机创建" class="headerlink" title="主机创建"></a>主机创建 </h2><p> 在 <code>Products</code> 模块的 <code>Instances</code> 标签页中，可以看到 <code>Server</code> 列表，也就是用户创建的主机列表，如果还没有创建，则显示为空。看看我的主机列表，已经有一台主机，如下图。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024429.png" alt="我的主机列表" title="我的主机列表"></p><p>读者可以注意到右侧有一个蓝色背景的圆形按钮，如果把鼠标的光标放上去，会显示 <code>Deploy New Server</code>，它就是用来创建主机的，下面我将一步一步演示创建的过程。</p><p>点击上述蓝色按钮，会进入 <code>Deploy New Instance</code> 配置界面，读者在 <code>Choose Server</code> 中首先选择 <code>Cloud Compute</code>，它表示 <strong>云主机 </strong>，也就是虚拟主机，它旁边还有三个产品类型可以忽略。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024414.png" alt="选择云主机" title="选择云主机"></p><p>接着在 <code>Server Location</code> 中选择机房位置，这个要根据网络的需要请读者自行选择，如果你在中国大陆，需要搭建梯子，建议选择日本或者美国洛杉矶的机房位置，我这里以日本为例。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024359.png" alt="选择机房位置" title="选择机房位置"></p><p>继续往下看，在 <code>Server Type</code> 中选择操作系统类型，我选择 <code>CentOS 7x64</code>。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024345.png" alt="选择操作系统" title="选择操作系统"></p><p>在 <code>Server Size</code> 中选择主机配置，同时也代表价格，我选择 <code>$5/mon</code>，表示每个月费用五美元，再详细看一下机器的配置：<code>25GB SSD</code> 表示固态硬盘大小、<code>$0.007/h</code> 表示每小时费用 0.007 美元、<code>1 CPU</code> 表示机器的 CPU 为一核、<code>1024MB Memory</code> 表示机器的内存大小、<code>1000GB Bandwidth</code> 表示机器的流量大小。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024328.png" alt="选择配置" title="选择配置"></p><p>最后的 <code>Additional Features</code>、<code>Startup Script</code>、<code>SSH Keys</code>、<code>Server Hostname &amp; Label</code> 可以不用设置，如果读者对 <code>Linux</code> 服务器有一定的了解并且会简单操作，可以在 <code>Startup Script</code> 设置启动脚本用来安装需要的软件环境，也可以在 <code>SSH Keys</code> 中设置密钥用来后续的免密登录，在此不在赘述。</p><p>一切设置完成后，点击右下角的 <code>Deploy Now</code> 蓝色按钮，接着等待几分钟即可。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024308.png" alt="点击创建主机" title="点击创建主机"></p><p>在等待的过程中，可以回到前面的 <code>Instances</code> 标签页中查看 <code>Server</code> 列表，可以看到刚刚创建的机器正在初始化。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024248.png" alt="主机正在初始化" title="主机正在初始化"></p><p>大概需要几分钟的时间，主机就创建完成。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024229.png" alt="主机创建完成" title="主机创建完成"></p><p>主机创建完成，最重要的事情就是要得知它的 <code>IP</code> 地址、登录密码，才能进行下一步的操作。<code>IP</code> 地址其实在 <code>Server</code> 列表中已经可以看到，是 <code>198.13.59.132</code>，也可以直接点击主机，进入到主机的详情页。或者点击最右侧的三个点，选择 <code>Server Details</code> 进入主机的详情页。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024209.png" alt="进入主机详情页" title="进入主机详情页"></p><p>在 <code>Overview</code> 标签页，此时可以看到更多关于主机的信息，包括 <code>IP</code> 地址、登录用户名、登录密码、流量使用情况、CPU 消耗监控、当前扣费情况。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024153.png" alt="查看主机详情页" title="查看主机详情页"></p><h2 id="系统快照"><a href="# 系统快照" class="headerlink" title="系统快照"></a>系统快照 </h2><p> 前面主机创建的过程读者看了可能会觉得很麻烦，需要设置那么多东西，如果以后机器有问题需要重新创建还要来一遍，体验多不好。况且，如果机器上面安装了一些软件，设置了一些参数，从头再来很麻烦的，有没有简单的方式可以复制一台已经存在的主机呢，除了 <code>IP</code> 地址不一样，其它配置完全一致，并且还要保留机器上面的软件、参数等信息。</p><p>可以，当然可以，接下来，<strong> 系统快照 </strong>功能就要出场了。<strong> 系统快照 </strong>其实就是把操作系统在某一时刻的状态保存下来，包括系统的配置、安装的软件、参数的配置，生成的系统快照就可以随时重复使用，就像克隆一样。</p><p>为了使用系统快照，必须先创建系统快照，在主机的详情页中，有一个 <code>Snapshots</code> 标签页，就是用来创建系统快照的。先在文本框中填入一个名字，用来标记这一个系统快照，然后点击右侧的 <code>Take Snapshot</code> 开始创建。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024054.png" alt="创建系统快照" title="创建系统快照"></p><p>在创建的过程中，可以在 <code>Products</code> 模块中的 <code>Snapshots</code> 标签页中查看系统快照的生成状态，这个过程一般需要很长时间，根据系统的复杂度而定。当然，如果系统中没有安装任何软件，创建起来还是很快的，几分钟就行。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804033858.png" alt="查看系统快照的生成状态" title="查看系统快照的生成状态"></p><p>等系统快照创建完成，使用系统快照就简单得多了，在创建云主机的过程中，不需要选择那么多的参数，选择机房位置后，在 <code>Server Type</code> 中点击 <code>Snapshot</code> 标签页，可以看到系统快照列表，从中选择一个自己需要的系统快照，直接生成即可。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804024026.png" alt="利用快照创建主机" title="利用快照创建主机"></p><p>使用系统快照创建的主机，除了机房位置、<code>IP</code> 地址与系统快照中的不一样，其它配置信息都是一样，也包括原来的软件、系统配置。</p><h1 id="账单管理"><a href="# 账单管理" class="headerlink" title="账单管理"></a>账单管理 </h1><p><strong> 账单管理 </strong>模块包含设置支付方式、充值、消费记录查看等功能，一般都会用到充值功能，用户使用这种虚拟服务一般不会充值太多的钱，可能半年或者一年才会充值一次。</p><h2 id="支付方式选择"><a href="# 支付方式选择" class="headerlink" title="支付方式选择"></a>支付方式选择 </h2><p> 支付方式就是用户选择使用什么方式来支付，设置好就行，以后除非更换支付方式，否则再也用不到这个功能。除了常规的 <strong>信用卡 </strong>、<strong>Paypal</strong> 支付方式，<code>Vultr</code> 还支持 <strong>支付宝 </strong>、<strong> 微信 </strong>、<strong> 比特比 </strong>支付方式，这支付体验对于中国用户来说简直太友好了，直接下单扫码分分钟就能完成。</p><p>在 <code>Billing</code> 模块选择 <code>Make Payment</code> 标签页，可以看到左侧列表中有多种支付方式可以选择，我这里已经绑定了信用卡。其中，<code>Credit Card</code> 表示信用卡、<code>Bitcoin</code> 表示比特币、<code>Alipay</code> 表示支付宝，<code>Wechat Pay</code> 表示微信支付，读者可以自行选择。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804012211.png" alt="设置支付方式" title="设置支付方式"></p><p>绑定具体的支付方式时，需要填写帐号信息，读者根据要求填写即可。</p><h2 id="查看历史消费记录"><a href="# 查看历史消费记录" class="headerlink" title="查看历史消费记录"></a>查看历史消费记录 </h2><p> 查看历史消费记录，就是为了对对账，看看有没有额外的乱扣费现象，一般情况下通过邮箱查看就行，不用特意登录 <code>Vultr</code> 里面看。</p><p>不过，账单默认是不会被发送到邮箱的，也不会通知用户，需要提前设置好通知方式，在 <code>Billing</code> 模块中的 <code>History</code> 标签页最底部有一个通知方式设置，选择通过邮箱发送即可，这个邮箱帐号是在 <code>Account</code> 模块中设置的，可以参考下文的相关内容。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804012240.png" alt="设置账单通知方式" title="设置账单通知方式"></p><p>选择 <code>Billing</code> 模块中的 <code>Histroy</code> 标签页，可以看到我的消费记录，八月一日扣除了我七月份的费用，总计 <code>$3.5</code>，这算是很便宜的主机配置，以前我用的是 <code>$5</code> 的主机，后来发现流量用不完就换了便宜的主机。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804012307.png" alt="消费记录查看" title="消费记录查看"></p><p>接着再看看我的邮箱，收到了费用扣除账单通知，一共扣除 <code>$3.5</code>。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804012337.png" alt="邮箱收到账单通知" title="邮箱收到账单通知"></p><p>仔细看 <code>History</code> 标签页中的历史清单，可以发现其中还有一些是进账，这种情况可能是自己充值，或者是邀请新用户使用 <code>Vultr</code> 带来的代金券。可以看到在七月份有两笔钱进账，总计二十美元，这明确记得我在七月份没有充值，应该是 <code>Vultr</code> 发放给我的代金券，如果按照 <code>$5 / 月 </code> 计算，这笔钱可以抵扣我四个月的主机费用了。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190804012349.png" alt="二十美元代金券收入" title="二十美元代金券收入"></p><h1 id="系统支持"><a href="# 系统支持" class="headerlink" title="系统支持"></a> 系统支持 </h1><p> 我自始至终只使用了两次这个模块，都是为了调整我的消费额度，前提是必须把需求说明清楚，并整理成英文，然后类似于提交 <strong>工单 </strong>一样把需求从后台发给客服。我的需求就是把我的月消费额度下调至 <code>$15 / 月 </code>，主机节点个数下调至 3 个，这样可以防止由于自己误操作导致的费用消耗过多，或者密码泄漏被人滥用。当然，这些情况理论上都不会发生，我只是图一个安心而已。</p><p> 有了自己的需求，我整理了一段简单的说明，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">New Instance Limit:</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">New Monthly Instances Cost Limit:</span><br><span class="line">15</span><br><span class="line"></span><br><span class="line">Intended Usage:</span><br><span class="line">I want to increase my limit of instance cost,15 is my choose.</span><br></pre></td></tr></table></figure><p>然后在 <code>Support</code> 模块中，选择 <code>Tickets</code> 功能。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184502.png" alt="Tickets 功能" title="Tickets 功能"></p><p>可以看到在右上角有一个 <code>Open New Ticket</code> 按钮，是用来新建工单的，点击它。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184551.png" alt="新建 Ticket 按钮" title="新建 Ticket 按钮"></p><p>在跳转到的内容填写页面中填写你的需求即可，需要选择问题类型、主机、标题、内容，填写完成后点击下方的 <code>Open Ticket</code> 按钮即可。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184624.png" alt="填写详细信息并提交 Ticket" title="填写详细信息并提交 Ticket"></p><p>接下来就是等待了，客服不会及时回复的，一般需要等待 1 个工作日【24 个小时】。而且由于时差的原因，客服一般是在半夜回复，我们只能等到第二天再看。</p><p>提交后也可以在工单列表中查看历史工单，并可以随时打开进行补充，它就像一个聊天对话系统，但不是实时的，读者要做的就是等待。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184701.png" alt="查看历史 Tickets" title="查看历史 Tickets"></p><p>给你们看一下客服给我的回复，提交工单、客服回复前后相差 32 个小时，这效率也是挺低的，还好这个功能基本不会用到，要不然等这么久会疯掉的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hello, </span><br><span class="line"></span><br><span class="line">The limits have been set as requested.</span><br><span class="line"></span><br><span class="line">Please let us know if you need further assistance. Our team is here and always happy to help.</span><br><span class="line"></span><br><span class="line">Thank you for choosing Vultr!</span><br><span class="line"></span><br><span class="line">Best Regards,</span><br><span class="line">Nachelle</span><br><span class="line">Vultr.com</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803184728.png" alt="客服给我的回复" title="客服给我的回复"></p><p>我这个申请的调整结果可以在 <code>Billing</code> 模块中的 <code>Limits</code> 标签页中查看，主机个数、消费上线都已经调整成我希望的。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803194606.png" alt="查看调整的结果" title="查看调整的结果"></p><h1 id="营销推广"><a href="# 营销推广" class="headerlink" title="营销推广"></a>营销推广 </h1><p><strong> 营销推广 </strong>模块里面的功能基本不会用到，除非你能邀请到别人注册并充值使用 <code>Vultr</code> 这个产品，这样的话 <code>Vultr</code> 就会返给你代金券，可以抵扣消费，但是不能提现。</p><p>所以我在此只简单介绍其中的两个小功能：分享链接、用户统计。</p><h2 id="分享链接"><a href="# 分享链接" class="headerlink" title="分享链接"></a>分享链接 </h2><p> 分享链接，就是把 <code>Vultr</code> 为你生成的唯一链接分享出去，别人点击你的链接注册后，就算作是你带来的用户，如果注册用户又充值并且在 <code>Vultr</code> 里面消费，你就会收到代金券。然而，用户只是注册是不行的，不算作有效用户，毕竟随便找几个邮箱就可以注册了，必须充值使用才算。</p><p>在 <code>Affilicate</code> 模块中，选择 <code>Linking Code</code> 标签页，就可以看到 <code>Vultr</code> 为你生成的唯一链接了。例如我的唯一链接是：<a href="https://www.vultr.com/?ref=7443790" target="_blank" rel="noopener">我的 Vultr $10 代金券链接 </a> ，文本形式则是：<code>https://www.vultr.com/?ref=7443790</code>，如下图。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803193050.png" alt="我的唯一链接" title="我的唯一链接"></p><h2 id="用户统计"><a href="# 用户统计" class="headerlink" title="用户统计"></a> 用户统计 </h2><p> 用户统计就是查看自己邀请到的用户点击、用户注册、用户消费情况，选择 <code>Stats</code> 标签页，可以看到每个月的点击用户、注册用户、消费用户数据，并且 <code>Vultr</code> 已经使用条形统计图的方式展示出来。以此可以查看自己为 <code>Vultr</code> 带来的用户，以及自己能不能有代金券的收入。</p><p>看看我的用户统计，七月份比较惨淡，共有二十多个用户点击了我的链接，但是只有一个用户注册了，至于这个用户有没有充值继续使用还不确定，要等两个月之后才能判断。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803193109.png" alt="七月份用户统计" title="七月份用户统计"></p><h1 id="帐号信息"><a href="# 帐号信息" class="headerlink" title="帐号信息"></a>帐号信息 </h1><p> 帐号信息在 <code>Account</code> 模块中设置，能用到的也就是个人简介，在 <code>Profile</code> 标签页中。而且这个模块一般用不到，读者无需关心。</p><p>我也就是填写姓名、邮箱、地址等信息。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190803204627.png" alt="个人简介设置" title="个人简介设置"></p><p>其中，邮箱帐号是很有必要的，在 <strong>账单管理 </strong>中设置账单的通知方式时，使用的就是这里填写的邮箱帐号，这样我每个月才会收到 <code>Vultr</code> 发来的扣费通知。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;我在以前的一篇博客中，详细记录了自己搭建翻墙梯子的过程，参考：&lt;br&gt;&lt;a href=&quot;https://www.playpi.org/2018111601.html&quot;&gt;使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）&lt;/a&gt; ，其中，我还顺便留下了我的 &lt;code&gt;Vultr&lt;/code&gt; 推广链接：&lt;br&gt;&lt;a href=&quot;https://www.vultr.com/?ref=7443790&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的 10 美元推广链接&lt;/a&gt; 。可能是因为这篇博客的流量还不错，基本每个月都会有几个人通过我的推广链接注册，当然，注册后真正使用的人只有 1-2 个。&lt;/p&gt;&lt;p&gt;我看了一下我的账户，平均每个月都会收到一份有效注册所带来的优惠券，大概可以给我带来 &lt;code&gt;$10&lt;/code&gt; 的收入，足够抵消我的月租消费了，这也是注册 &lt;code&gt;Vultr&lt;/code&gt; 后并真正使用 &lt;code&gt;Vultr&lt;/code&gt; 的人带给我的收入，我觉得这是意外的惊喜。&lt;/p&gt;&lt;p&gt;所以，本着分享的理念以及「吃饭」的需要，我推荐大家使用 &lt;code&gt;Vultr&lt;/code&gt;，但是担心可能有些读者第一次使用 &lt;code&gt;Vultr&lt;/code&gt;，系统又是英文的，不太熟悉。在此，我把节点的创建过程再整理出来，图文并茂，并说明注意事项，给读者参考。读者参考本文一步一步操作，就可以从零开始创建 &lt;code&gt;Vultr&lt;/code&gt; 主机，只需要再花费 &lt;code&gt;$10&lt;/code&gt; 就可以使用半年的 &lt;code&gt;Vultr&lt;/code&gt; 云主机。至于搭建梯子的过程还是请继续参考上面给出的以前的博客内容：&lt;a href=&quot;https://www.playpi.org/2018111601.html&quot;&gt;使用 Vultr 搭建 Shadowsocks（VPS 搭建 SS）&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;声明 &lt;/strong&gt;：2019 年 08 月 09 日发现 &lt;code&gt;Vultr&lt;/code&gt; 官方不会再赠送 &lt;code&gt;$10&lt;/code&gt; 的代金券给新注册用户，只会给我发放代金券，但是 &lt;code&gt;$25&lt;/code&gt; 的代金券仍然有效，请读者选择 &lt;code&gt;$25&lt;/code&gt; 对应的链接打开注册，以免错失了代金券。&lt;/p&gt;
    
    </summary>
    
      <category term="知识改变生活" scheme="https://www.playpi.org/categories/knowledge-for-life/"/>
    
    
      <category term="Shadowsocks" scheme="https://www.playpi.org/tags/Shadowsocks/"/>
    
      <category term="Vultr" scheme="https://www.playpi.org/tags/Vultr/"/>
    
      <category term="VPS" scheme="https://www.playpi.org/tags/VPS/"/>
    
      <category term="vps" scheme="https://www.playpi.org/tags/vps/"/>
    
      <category term="Affiliate" scheme="https://www.playpi.org/tags/Affiliate/"/>
    
      <category term="cloud" scheme="https://www.playpi.org/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>番茄鸡蛋面做法总结 - 酸汤口味</title>
    <link href="https://www.playpi.org/2019072701.html"/>
    <id>https://www.playpi.org/2019072701.html</id>
    <published>2019-07-26T17:31:57.000Z</published>
    <updated>2019-07-28T17:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>面食是中国常见的一种传统主食，馒头、饼、包子、馍、面条、面叶，使用面粉做出来的类型多种多样。其中，<strong> 面条 </strong>可谓是最为流行，无论东北、西北、东南、西南、中原、华南，都可以看到 <strong>面条 </strong>身影，形式丰富，口味不一，这更是中华民族劳动人民智慧的结晶。</p><p>其中，<strong> 汤面 </strong>又是一派，汤面最重要的是什么，除了面条本身之外，最重要的是汤。而汤，是非常难做的，耗时长且配料讲究，不仅要选骨头，还要放大料，一般一锅好汤都要熬制两个小时以上，更甚者要熬制四个小时。一般家庭吃面条是不可能这么折腾的，那么我这里有一种更为简单的方法：使用番茄鸡蛋做酸汤，再配合面条，做一碗酸汤面。这种方法操作起来简单，耗时短，又能保留汤的美味，适合自己在家做，本文记录做法总结。</p><a id="more"></a><h1 id="引言"><a href="# 引言" class="headerlink" title="引言"></a>引言 </h1><p> 我在网络上看到全国很多卖的火爆的汤面，看自媒体介绍，看采访报道，都是注重讲究汤的制作，还自夸是祖传，几十年积累改良下来的，无论他们怎么说，这可见汤的重要性。</p><p>在广州的上下九、老西关，也各有一家不错的广式汤面，汤真的很不错，年头也比较久。</p><p>目前市面上为什么很多快餐店的汤面、汤粉都不好吃，就是汤不行。我记得小时候在江南一带生活过一段时间，那里的快餐店的外墙上都会印着 <strong>民以食为天、面以汤为鲜 </strong>作为广告语，而且他们的汤做的真不错，一碗简单的青菜面都很好吃，例如上海清汤面。另外他们的小馄饨也很好吃，也是取决于汤很好，不过现在很难找到这么好吃的了。</p><p>当然，也要考虑到成本，现在如果你舍得消费 40-50 元人民币去吃一碗面，在广州还是能找到比较美味的面的，比如上下九、老西关那两家，此外以前还有一家上海风味的店：<strong> 寻人启示 </strong>【在兆佳业广场，不知道现在还开不开】，味道也很正宗。</p><p>汤固然很重要，但是普通人在家里做面条，不可能耗费那么多精力去熬制一锅汤出来，熬出来只做几碗面也很浪费。此时，可以有两个选择：</p><p>一个是购买 <strong>号称高汤的调料 </strong>，也就是使用一些浓缩骨粉、香料、调料混合制成的面汤专用调料，煮面的时候放在水里，可以把面汤调制成美味鲜香的汤。我小时候用过，当时觉得挺好吃的，但是现在吃起来明显味道不对，而且我担心健康问题。</p><p>二是直接购买 <strong>浓缩高汤液体 </strong>，一般的冷藏的，号称使用原汤制作，买回来尽快使用，不宜旧存，价格比较高，而且我也担心健康问题。</p><p>除了这些有没有其他选择了呢，有，那就是我下面的重点，最简单的番茄鸡蛋汤。这种汤做法简单，汤味鲜美，用来下面最合适。</p><h1 id="食材准备"><a href="# 食材准备" class="headerlink" title="食材准备"></a>食材准备 </h1><p> 以下食材适合 2 人食用，我自己吃是直接吃了一盆：</p><ul><li>番茄 2 个，选择粉的，不要脆的 </li><li> 手工新鲜面条 1 斤，最好是刚做出来的湿面条，实在没有挂面也可以，挂面就用不了 1 斤，半斤足够 </li><li> 鸡蛋 1-2 个 </li><li> 食用盐 </li><li> 其它配菜任选，例如青菜、酱牛肉、榨菜、牛肉丸 </li></ul><p> 番茄 2 个 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810222908.jpg" alt="番茄 2 个" title="番茄 2 个"></p><p> 手工湿面条 1 斤 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810222918.jpg" alt="手工湿面条 1 斤" title="手工湿面条 1 斤"></p><h1 id="制作步骤"><a href="# 制作步骤" class="headerlink" title="制作步骤"></a> 制作步骤 </h1><p> 从食材准备到出锅装盘，大概需要 20 分钟即可。</p><h2 id="番茄去皮切丁"><a href="# 番茄去皮切丁" class="headerlink" title="番茄去皮切丁"></a>番茄去皮切丁 </h2><p> 番茄切十字花刀，把番茄放在沸水中煮 1 分钟，并使用勺子不断浇番茄上半部分，然后就很容易去皮了。去皮后切丁，放在盘子中备用。</p><p>番茄切丁 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223007.jpg" alt="番茄切丁" title="番茄切丁"></p><h2 id="番茄丁下油锅"><a href="# 番茄丁下油锅" class="headerlink" title="番茄丁下油锅"></a> 番茄丁下油锅 </h2><p> 如果有吃鸡蛋面汤的需求，先把鸡蛋炒好，捣碎备用，番茄炒好后再放进去，一起煮汤。但是我是直接吃煎蛋，所以这里不放鸡蛋了。</p><p>开锅，加花生油，烧热后加入切好的番茄丁，快速翻炒，大概炒 1-2 分钟，番茄丁会产生糊状的酱汁，就可以准备加水了。</p><p>炒制番茄丁 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223120.jpg" alt="炒制番茄丁" title="炒制番茄丁"></p><h2 id="加水煮沸"><a href="# 加水煮沸" class="headerlink" title="加水煮沸"></a> 加水煮沸 </h2><p> 立马加适量水，稍微搅拌一下，接着煮沸。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223144.jpg" alt="加水煮沸" title="加水煮沸"></p><h2 id="下面条"><a href="# 下面条" class="headerlink" title="下面条"></a>下面条 </h2><p> 汤煮沸后开始加面条，注意要一点一点加，并及时搅拌，否则面条很容易粘连，那一锅面条就废了，如果感觉水量不够要及时加水，不要犹豫。</p><p>下面条 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223241.jpg" alt="下面条" title="下面条"></p><p> 适当搅拌防止粘连 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223310.jpg" alt="适当搅拌防止粘连" title="适当搅拌防止粘连"></p><h2 id="煮沸后加冷水"><a href="# 煮沸后加冷水" class="headerlink" title="煮沸后加冷水"></a> 煮沸后加冷水 </h2><p> 接着就是等待煮沸，此时需要反复三次煮沸，第一次煮沸后稍微加一点冷水，防止冒锅，后两次煮沸只要打开锅盖散气即可。<strong> 注意，这时候别忘记加盐。</strong></p><p>第一次煮沸加冷水 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223336.jpg" alt="第一次煮沸加冷水" title="第一次煮沸加冷水"></p><h2 id="出锅装盆"><a href="# 出锅装盆" class="headerlink" title="出锅装盆"></a> 出锅装盆 </h2><p> 最终出锅，装盆，一盆香喷喷的酸汤面就做好了。</p><p>配上煎蛋，再切几个牛肉丸，人间美味。注意，我这不是普通的碗，我这是盆，这一盆吃下去我真的有点撑了。我一开始就不想混鸡蛋在里面，怕汤喝不完浪费了，于是只放了番茄做酸汤，另外煎了一个鸡蛋。</p><p>一大盆被我吃光 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223431.jpg" alt="一大盆被我吃光" title="一大盆被我吃光"></p><h2 id="其它方式"><a href="# 其它方式" class="headerlink" title="其它方式"></a> 其它方式 </h2><p> 如果觉得汤里少了点什么，也可以选择一开始炒鸡蛋捣碎，然后放入汤中。别小看简单的鸡蛋番茄，做出来的汤非常好喝，一口气我可以喝两碗。</p><p>锅里的样子 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223452.jpg" alt="锅里的样子" title="锅里的样子"></p><p> 出锅装盆的样子 </p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190810223504.jpg" alt="出锅装盆的样子" title="出锅装盆的样子"></p><h1 id="注意事项"><a href="# 注意事项" class="headerlink" title="注意事项"></a> 注意事项 </h1><p>1、番茄品种一定要选择 <strong> 粉 </strong>的，不要 <strong>脆 </strong>的，这样更容易熬制出美味的酸汤。</p><p>2、面条下锅后一定要迅速搅拌一下，防止面条粘连，特别是挂面，很容易就是一坨，导致里面的煮不熟。</p><p>3、关于面条的选择，我更倾向于选择手工湿面条，更好吃，挂面不好吃。</p><p>4、这种酸汤千万不要浪费，最好全喝了，营养又健康。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;面食是中国常见的一种传统主食，馒头、饼、包子、馍、面条、面叶，使用面粉做出来的类型多种多样。其中，&lt;strong&gt; 面条 &lt;/strong&gt;可谓是最为流行，无论东北、西北、东南、西南、中原、华南，都可以看到 &lt;strong&gt;面条 &lt;/strong&gt;身影，形式丰富，口味不一，这更是中华民族劳动人民智慧的结晶。&lt;/p&gt;&lt;p&gt;其中，&lt;strong&gt; 汤面 &lt;/strong&gt;又是一派，汤面最重要的是什么，除了面条本身之外，最重要的是汤。而汤，是非常难做的，耗时长且配料讲究，不仅要选骨头，还要放大料，一般一锅好汤都要熬制两个小时以上，更甚者要熬制四个小时。一般家庭吃面条是不可能这么折腾的，那么我这里有一种更为简单的方法：使用番茄鸡蛋做酸汤，再配合面条，做一碗酸汤面。这种方法操作起来简单，耗时短，又能保留汤的美味，适合自己在家做，本文记录做法总结。&lt;/p&gt;
    
    </summary>
    
      <category term="菜谱" scheme="https://www.playpi.org/categories/cookbook/"/>
    
    
      <category term="patato" scheme="https://www.playpi.org/tags/patato/"/>
    
      <category term="noodles" scheme="https://www.playpi.org/tags/noodles/"/>
    
      <category term="egg" scheme="https://www.playpi.org/tags/egg/"/>
    
      <category term="sugar" scheme="https://www.playpi.org/tags/sugar/"/>
    
  </entry>
  
  <entry>
    <title>git pull 失败：RPC failed;SSL_ERROR_SYSCALL errno 10054</title>
    <link href="https://www.playpi.org/2019072301.html"/>
    <id>https://www.playpi.org/2019072301.html</id>
    <published>2019-07-23T15:06:33.000Z</published>
    <updated>2019-07-23T17:06:33.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:11 GMT+0800 (China Standard Time) --><p>众所周知，<code>Git</code> 是一款非常流行的版本控制工具，现在的项目开发基本都离不开它，否则项目的协作开发将寸步难行，甚至会有专门的项目管理职位来规范项目的开发协作。如果不使用 <code>Git</code>，我的博客整理工作也会增加难度与复杂度，不得不说，我已经离不开它了。今天碰到一个关于 <code>Git</code> 的很奇怪的错误，本文记录解决的过程，整理完感觉经验技能又增长了。</p><a id="more"></a><h1 id="问题出现"><a href="# 问题出现" class="headerlink" title="问题出现"></a>问题出现 </h1><p> 我换了一台电脑，把项目代码下载下来，正常的 <code>clone</code> 后，一直使用，过了几天，突然出现下面的问题。</p><p>在使用 <code>git pull</code> 命令同步最新代码时报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: unpack-objects failed</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190724014935.png" alt="git pull 报错信息" title="git pull 报错信息"></p><p>我仔细观察了整个过程，一开始还是正常的，百分比进度在变化，然后就卡在那里一直不再动，最后就报错，紧接着 <code>pull</code> 流程被终止。</p><p>初步看起来像是网络不好或者文件内容太大导致的网络连接超时失败。</p><p>按照可能是网络问题这个方向，我重试了多次，全部都是 <code>git pull</code> 失败，然后我换成其它项目再做相同的操作就正常，我陷入了沉思：应该和环境无关，只和项目有关，这个 <code>git pull</code> 失败的项目到底有什么特殊之处。</p><p>突然，我一拍脑门，想起来了，这个项目前一天晚上被我 <code>commit</code> 了很多张图片，应该有 100 张以上，总计 <code>200MB</code> 大小，看来这是问题所在。</p><h1 id="问题分析解决"><a href="# 问题分析解决" class="headerlink" title="问题分析解决"></a>问题分析解决 </h1><p> 循着这个线索，使用报错关键词 <code>RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</code> 去 <code>stackoverflow</code> 搜索一下，发现很多人都遇到过这个问题。原因在于 <code>http</code> 通信缓存设置的值太小，恰好我的项目是使用 <code>http</code> 协议进行 <code>pull</code> 的，而没有使用 <code>ssh</code> 的方式。</p><p>这时候的解决方式就是设置一下缓存大小，参数名为：<code>http.postBuffer</code>，把它的值设置大一点【注意它的单位是 B，字节，进位是 1024 制的】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 500MB, 如果配合使用 --global 参数可以全局生效 </span><br><span class="line">git config http.postBuffer 524288000</span><br><span class="line"># 1GB</span><br><span class="line">git config http.postBuffer 1048576000</span><br></pre></td></tr></table></figure><p>根据官网对 <code>http.postBuffer</code> 这个参数的解释说明：</p><blockquote><p>Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system. For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.</p></blockquote><p>附官网链接：<a href="https://git-scm.com/docs/git-config" target="_blank" rel="noopener">https://git-scm.com/docs/git-config</a> ，参见对参数 <code>http.postBuffer</code> 的解释。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190724015009.png" alt="Git 官网对于缓存参数的解释说明" title="Git 官网对于缓存参数的解释说明"></p><p>可以看到这个参数的默认值为：<code>1 MiB</code>，对大部分项目都是合理的，但是对于我这个一次疯狂 <code>commit</code> 很多张图片的项目就无能为力了。</p><p>配置完成后，也可以在项目的 <code>.git/config</code> 配置文件中查看这个参数的信息【如果设置了全局生效，则需要在家目录中寻找这个配置文件，即 <code>home</code> 目录】。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://github.com/iplaypi/sources-playpi.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[gui]</span><br><span class="line">wmstate = normal</span><br><span class="line">geometry = 1061x563+30+30 233 255</span><br><span class="line">[credential]</span><br><span class="line">helper = store</span><br><span class="line">[user]</span><br><span class="line">name = iplaypi</span><br><span class="line">email = playpi@qq.com</span><br><span class="line">[http]</span><br><span class="line">postBuffer = 524288000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190724015105.png" alt="查看 Git 项目的配置信息" title="查看 Git 项目的配置信息"></p><p>好，接下来再进行 <code>pull</code> 操作，可以看到，最终正常了，没有再出问题【一开始我设置的是 500MB，还是不行，接着改为 1GB 就可以了】。由于网络速度问题或者中国大陆访问 <code>GitHub</code> 缓慢的原因，这次正常的 <code>pull</code> 使用了将近四十分钟才完成，等得我着急。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190724015342.png" alt="pull 正常同步更新" title="pull 正常同步更新"></p><p>可见，真的是我这个项目的内容太大了，同步的时候 <code>http</code> 通信缓存不足，导致出错。</p><h1 id="问题总结"><a href="# 问题总结" class="headerlink" title="问题总结"></a>问题总结 </h1><p>1、此外，还有一个压缩参数：<code>core.compression</code>，可以用来设置压缩率，有 11 个取值。当然，如果把项目内容压缩了，由于压缩操作本身就会很耗时，会导致下载速度变慢，下载同步过程总的耗时也会随之增加。</p><p> 官网说明：</p><blockquote><p>An integer -1..9, indicating a default compression level. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If set, this provides a default to other compression variables, such as core.looseCompression and pack.compression.</p></blockquote><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190724015140.png" alt="Git 官网对于压缩参数的解释说明" title="Git 官网对于压缩参数的解释说明"></p><p>2、我当前使用的是 <code>http</code> 方式，其实还有一种 <code>ssh</code> 方式，更方便，可以试试。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:11 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;众所周知，&lt;code&gt;Git&lt;/code&gt; 是一款非常流行的版本控制工具，现在的项目开发基本都离不开它，否则项目的协作开发将寸步难行，甚至会有专门的项目管理职位来规范项目的开发协作。如果不使用 &lt;code&gt;Git&lt;/code&gt;，我的博客整理工作也会增加难度与复杂度，不得不说，我已经离不开它了。今天碰到一个关于 &lt;code&gt;Git&lt;/code&gt; 的很奇怪的错误，本文记录解决的过程，整理完感觉经验技能又增长了。&lt;/p&gt;
    
    </summary>
    
      <category term="基础技术知识" scheme="https://www.playpi.org/categories/basic-technical-knowledge/"/>
    
    
      <category term="Git" scheme="https://www.playpi.org/tags/Git/"/>
    
      <category term="PRC" scheme="https://www.playpi.org/tags/PRC/"/>
    
      <category term="SSL" scheme="https://www.playpi.org/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>使用 Java 获取 HBase 中多版本数据的方法</title>
    <link href="https://www.playpi.org/2019071101.html"/>
    <id>https://www.playpi.org/2019071101.html</id>
    <published>2019-07-11T15:35:05.000Z</published>
    <updated>2019-08-11T15:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --><p>最近工作比较繁忙，在处理需求、写代码的过程中踩到了一些坑，不过问题都被我一个一个解决了，所以最近三周都没有更新博客内容。不过，我是整理了提纲、打了草稿，近期会陆续整理出来。今天就先整理出来一个简单的知识点：使用 <code>Java API</code> 从 <code>HBase</code> 中获取多版本【Version 的概念】数据的方法，开发环境基于 <code>JDK v1.8</code>、<code>HBase v1.1.2</code>、<code>Zookeeper v3.4.6</code>，在演示过程中还会使用原生的 <code>HBase Shell</code> 进行配合，加深理解。</p><a id="more"></a><h1 id="入门概念"><a href="# 入门概念" class="headerlink" title="入门概念"></a>入门概念 </h1><p> 先列举一些关于 <code>HBase</code> 的基础概念，有助于继续阅读下文，如果不太了解需要先回顾一下：</p><ul><li>列式分布式数据库，基于 <code>Google BigTable</code> 论文开发，适合海量的数据存储 </li><li>Rowkey、Column Family、Qualifier、Timestamp、Cell、Version 的概念</li><li>HBase Shell、Java API、Phoenix</li></ul><h1 id="示例代码"><a href="# 示例代码" class="headerlink" title="示例代码"></a> 示例代码 </h1><p> 下面的演示会以 <code>HBase Shell</code>、<code>Java API</code> 这两种方式分别进行，便于读者理解。</p><h2 id="建表造数据"><a href="# 建表造数据" class="headerlink" title="建表造数据"></a>建表造数据 </h2><p> 为了使用 <code>Java API</code> 获取多版本数据，我要先做一些基础工作：创建表、造数据、造多版本数据。为了尽量简化数据的复杂度，以及能让读者理解，我准备了 2 条数据，下面使用一个表格来整理这 2 条数据，读者可以看得更清晰：</p><table><thead><tr><th style="text-align:center">Rowkey</th><th style="text-align:center">Column Family</th><th style="text-align:center">Qualifier</th><th style="text-align:center">Version</th><th style="text-align:center">Value</th></tr></thead><tbody><tr><td style="text-align:center">row01</td><td style="text-align:center">cf</td><td style="text-align:center">name</td><td style="text-align:center">1</td><td style="text-align:center">JIM</td></tr><tr><td style="text-align:center">row01</td><td style="text-align:center">cf</td><td style="text-align:center">name</td><td style="text-align:center">2</td><td style="text-align:center">Jack</td></tr><tr><td style="text-align:center">row02</td><td style="text-align:center">cf</td><td style="text-align:center">name</td><td style="text-align:center">1</td><td style="text-align:center">Lucy</td></tr><tr><td style="text-align:center">row02</td><td style="text-align:center">cf</td><td style="text-align:center">age</td><td style="text-align:center">1</td><td style="text-align:center">20</td></tr></tbody></table><p>从上表可以看出，一共 2 条数据，<code>row01</code> 有 1 列，2 个版本，<code>row02</code> 有 2 列，1 个版本。下面使用原生的 <code>HBase Shell</code> 开始逐步建表、造数据。</p><p>1、进入交互式客户端 </p><p> 使用 <code>hbase shell</code> 进入交互式客户端，在输出的日志中可以看到当前环境 <code>HBase</code> 的版本号。</p><p>登录成功后终端显示：</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192301.png" alt="登录成功" title="登录成功"></p><p>2、创建表：学生表 </p><p> 使用 <code>create &#39;TB_HBASE_STUDENT&#39;,&#39;cf&#39;</code> 创建一张表，为了便于后面的操作，表名最好使用大写形式，否则涉及到表名的操作需要加单引号。由于 <code>HBase</code> 是列式存储结构，所以创建表时不需要指定具体的列名称，只要指定 <code>Column Family</code> 名称即可。</p><p>执行后终端显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 row (s) in 2.5260 seconds</span><br><span class="line"> =&gt; Hbase::Table - TB_HBASE_STUDENT</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192317.png" alt="创建表" title="创建表"></p><p>3、查看表结构 </p><p> 使用 <code>describe &#39;TB_HBASE_STUDENT&#39;</code> 查看表结构，执行后终端显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Table TB_HBASE_STUDENT is ENABLED</span><br><span class="line">TB_HBASE_STUDENT</span><br><span class="line">COLUMN FAMILIES DESCRIPTION</span><br><span class="line">&#123;NAME =&gt; &apos;cf&apos;, BLOOMFILTER =&gt; &apos;ROW&apos;, VERSIONS =&gt; &apos;1&apos;, IN_MEMORY =&gt; &apos;false&apos;, KEEP_DELETED_CELLS =&gt; &apos;FALSE&apos;, DATA_BLOCK_ENCODING =&gt; &apos;NONE&apos;, TTL =&gt; &apos;FOREVER&apos;, COMPRESSION =&gt; &apos;NONE&apos;, MIN_VERSIONS =&gt; &apos;0&apos;, BLOCKCACHE =&gt; &apos;true&apos;, BLOCKSIZE =&gt; &apos;65536&apos;, REPLICATION_SCOPE =&gt; &apos;0&apos;&#125;</span><br><span class="line">1 row (s) in 0.0390 seconds</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192331.png" alt="查看表结构" title="查看表结构"></p><p>可以看到表的基本信息，其中 <code>Column Family</code> 名称为 <code>cf</code>，最大版本 <code>VERSIONS</code> 为 1，这会导致只会存储一个版本的列数据，当再次插入数据的时候，后面的值会覆盖掉前面的值。</p><p>4、修改最大版本 </p><p> 为了满足我的需求，需要更改表，把 <code>cf</code> 的最大版本数 <code>VERSIONS</code> 增加，设置为 3 。使用 <code>alter &#39;TB_HBASE_STUDENT&#39;,{NAME=&gt;&#39;cf&#39;,VERSIONS=&gt;3}</code> 命令即可。执行后终端显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Updating all regions with the new schema...</span><br><span class="line">0/1 regions updated.</span><br><span class="line">1/1 regions updated.</span><br><span class="line">Done.</span><br><span class="line">0 row (s) in 3.7710 seconds</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192344.png" alt="修改最大版本数" title="修改最大版本数"></p><p>修改成功后，我使用 <code>describe &#39;TB_HBASE_STUDENT&#39;</code> 再次查看表结构，终端显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Table TB_HBASE_STUDENT is ENABLED</span><br><span class="line">TB_HBASE_STUDENT</span><br><span class="line">COLUMN FAMILIES DESCRIPTION</span><br><span class="line">&#123;NAME =&gt; &apos;cf&apos;, BLOOMFILTER =&gt; &apos;ROW&apos;, VERSIONS =&gt; &apos;3&apos;, IN_MEMORY =&gt; &apos;false&apos;, KEEP_DELETED_CELLS =&gt; &apos;FALSE&apos;, DATA_BLOCK_ENCODING =&gt; &apos;NONE&apos;, TTL =&gt; &apos;FOREVER&apos;, COMPRESSION =&gt; &apos;NONE&apos;, MIN_VERSIONS =&gt; &apos;0&apos;, BLOCKCACHE =&gt; &apos;true&apos;, BLOCKSIZE =&gt; &apos;65536&apos;, REPLICATION_SCOPE =&gt; &apos;0&apos;&#125;</span><br><span class="line">1 row (s) in 0.0380 seconds</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192357.png" alt="再次查看表结构" title="再次查看表结构"></p><p>这次可以看到，<code>VERSIONS =&gt; &#39;3&#39;</code> 表示 <code>cf</code> 已经支持存储 3 个版本的数据了。</p><p>5、插入 2 条数据 </p><p><code>HBase</code> 的插入数据功能是使用 <code>put</code> 命令，每次插入 1 列，根据上述表格数据格式，需要执行 4 次 <code>put</code> 操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">put &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&apos;cf:name&apos;,&apos;JIM&apos;</span><br><span class="line">put &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&apos;cf:name&apos;,&apos;Jack&apos;</span><br><span class="line">put &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:name&apos;,&apos;Lucy&apos;</span><br><span class="line">put &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:age&apos;,&apos;20&apos;</span><br></pre></td></tr></table></figure><p> 执行后终端显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.8.7-p357 :012 &gt;   put &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&apos;cf:name&apos;,&apos;JIM&apos;</span><br><span class="line">0 row (s) in 0.1600 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :013 &gt; put &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&apos;cf:name&apos;,&apos;Jack&apos;</span><br><span class="line">0 row (s) in 0.0180 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :014 &gt; put &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:name&apos;,&apos;Lucy&apos;</span><br><span class="line">0 row (s) in 0.0160 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :015 &gt; put &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:age&apos;,&apos;20&apos;</span><br><span class="line">0 row (s) in 0.0180 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :016 &gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192412.png" alt="插入 2 条数据" title="插入 2 条数据"></p><h2 id="命令行查看"><a href="# 命令行查看" class="headerlink" title="命令行查看"></a>命令行查看 </h2><p>1、先尝试使用 <code>get</code> 命令来获取这 2 条数据，分别执行 3 次 <code>get</code> 操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:name&apos;</span><br><span class="line">get &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:age&apos;</span><br><span class="line">get &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&apos;cf:name&apos;</span><br></pre></td></tr></table></figure><p> 执行后终端显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.8.7-p357 :026 &gt;   get &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:name&apos;</span><br><span class="line">COLUMN                CELL</span><br><span class="line">cf:name               timestamp=1566118670447, value=Lucy</span><br><span class="line"></span><br><span class="line">1 row (s) in 0.0160 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :027 &gt; get &apos;TB_HBASE_STUDENT&apos;,&apos;row02&apos;,&apos;cf:age&apos;</span><br><span class="line">COLUMN                CELL</span><br><span class="line">cf:age                timestamp=1566118677185, value=20</span><br><span class="line"></span><br><span class="line">1 row (s) in 0.0060 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :028 &gt; get &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&apos;cf:name&apos;</span><br><span class="line">COLUMN                CELL</span><br><span class="line">cf:name               timestamp=1566118661397, value=Jack</span><br><span class="line"></span><br><span class="line">1 row (s) in 0.0080 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :029 &gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192431.png" alt="读取数据" title="读取数据"></p><p>可以看到，此时并没有获取到 <code>row01</code> 的 2 个版本的数据，只获取了最新版本的结果。</p><p>2、使用 <code>get</code> 获取多版本数据，执行 <code>get</code> 时需要加上 <code>VERSIONS</code> 相关的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&#123;COLUMN=&gt;&apos;cf:name&apos;,VERSIONS=&gt;3&#125;</span><br></pre></td></tr></table></figure><p>执行后终端显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.8.7-p357 :029 &gt; get &apos;TB_HBASE_STUDENT&apos;,&apos;row01&apos;,&#123;COLUMN=&gt;&apos;cf:name&apos;,VERSIONS=&gt;3&#125;</span><br><span class="line">COLUMN                CELL</span><br><span class="line">cf:name               timestamp=1566118661397, value=Jack</span><br><span class="line">cf:name               timestamp=1566118652009, value=JIM</span><br><span class="line"></span><br><span class="line">2 row (s) in 0.0140 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :030 &gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192445.png" alt="读取多版本数据" title="读取多版本数据"></p><p>可以看到，2 个版本的数据都读取出来了。</p><p>3、使用 <code>scan</code> 扫描数据 </p><p> 此外还有一个 <code>scan</code> 命令可以扫描表中的数据，使用 <code>scan &#39;TB_HBASE_STUDENT&#39;,{LIMIT=&gt;5}</code> 尝试扫描 5 条数据出来。</p><p>执行后终端显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.8.7-p357 :031 &gt;   scan &apos;TB_HBASE_STUDENT&apos;,&#123;LIMIT=&gt;5&#125;</span><br><span class="line">ROW                   COLUMN+CELL</span><br><span class="line">row01                 column=cf:name, timestamp=1566118661397, value=Jack</span><br><span class="line">row02                 column=cf:age, timestamp=1566118677185, value=20</span><br><span class="line">row02                 column=cf:name, timestamp=1566118670447, value=Lucy</span><br><span class="line"></span><br><span class="line">2 row (s) in 0.0420 seconds</span><br><span class="line"></span><br><span class="line">1.8.7-p357 :032 &gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192456.png" alt="扫描数据" title="扫描数据"></p><p>由于表中只有 2 条数据，所以只显示出 2 条，而且 <code>scan</code> 默认也是获取最新版本的数据结果。</p><p>4、如果想退出 <code>HBase Shell</code> 交互式客户端，使用 <code>!quit</code> 命令即可。</p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192505.png" alt="退出客户端" title="退出客户端"></p><h2 id="代码示例"><a href="# 代码示例" class="headerlink" title="代码示例"></a>代码示例 </h2><p> 上面使用原生的 <code>HBase Shell</code> 操作演示了创建表、插入数据、读取数据的过程，下面将使用 <code>Java API</code> 演示读取数据的过程，而创建表、插入数据的过程就不再演示。</p><p>这里需要特别注意，为了正常使用 <code>Java API</code> 的相关接口，<code>Java</code> 项目需要依赖 <code>hbase-client</code>、<code>commons-configuration</code>、<code>hadoop-auth</code>、<code>hadoop-hdfs</code> 等组件。我的代码已经上传至 <code>GitHub</code>，详见：<a href="https://github.com/iplaypi/iplaypistudy/tree/master/iplaypistudy-hbase/src/main/java/org/playpi/study/test" target="_blank" rel="noopener">TestHBase.java</a> ，搜索类名 <code>TestHBase</code> 即可。</p><p>1、代码示例 </p><p> 代码结构比较简单，分为：构造查询请求、发送请求、解析结果输出几部分，注释中也注明了各个部分的作用，总计也就 50 行代码左右。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * HBase Java API Get 测试 </span><br><span class="line">     */</span><br><span class="line">public void testGet () &#123;</span><br><span class="line">String hTableName = &quot;TB_HBASE_STUDENT&quot;;</span><br><span class="line">IplaypiStudyConfig configuration = IplaypiStudyConfig.getInstance ();</span><br><span class="line">byte [] cfbyte = &quot;cf&quot;.getBytes ();</span><br><span class="line">byte [] col01byte = &quot;name&quot;.getBytes ();</span><br><span class="line">byte [] col02byte = &quot;age&quot;.getBytes ();</span><br><span class="line">try &#123;</span><br><span class="line">// 构造查询请求，2 条数据，多个版本 </span><br><span class="line">List&lt;Get&gt; getList = Lists.newArrayList ();</span><br><span class="line">Get get = new Get (Bytes.toBytes (&quot;row01&quot;));</span><br><span class="line">get.addColumn (cfbyte, col01byte);</span><br><span class="line">// 设置最大版本数，默认为 1</span><br><span class="line">get.setMaxVersions (3);</span><br><span class="line">getList.add (get);</span><br><span class="line">Get get2 = new Get (Bytes.toBytes (&quot;row02&quot;));</span><br><span class="line">get2.addColumn (cfbyte, col01byte);</span><br><span class="line">get2.addColumn (cfbyte, col02byte);</span><br><span class="line">getList.add (get2);</span><br><span class="line">// 发送请求，获取结果 </span><br><span class="line">HTable hTable = new HTable (configuration, hTableName);</span><br><span class="line">Result [] resultArr = hTable.get (getList);</span><br><span class="line">/**</span><br><span class="line">             * 以下有两种解析结果的方法 </span><br><span class="line">             * 1 - 通过 Result 类的 getRow () 和 getValue () 两个方法，只能获取最新版本 </span><br><span class="line">             * 2 - 通过 Result 类的 rawCells () 方法返回一个 Cell 数组，可以获取多个版本，如果使用 getColumnCells 可以指定列 </span><br><span class="line">             * 注意，高版本不再建议使用 KeyValue 的方式，注释中有说明 </span><br><span class="line">             */</span><br><span class="line">// 1-</span><br><span class="line">log.info (&quot;====get result by first method&quot;);</span><br><span class="line">for (Result result : resultArr) &#123;</span><br><span class="line">log.info (&quot;&quot;);</span><br><span class="line">log.info (&quot;--------&quot;);</span><br><span class="line">String rowStr = Bytes.toString (result.getRow ());</span><br><span class="line">log.info (&quot;====row:[&#123;&#125;]&quot;, rowStr);</span><br><span class="line">// 如果包含 name 列，则获取输出 </span><br><span class="line">if (result.containsColumn (cfbyte, col01byte)) &#123;</span><br><span class="line">String valStr = Bytes.toString (result.getValue (cfbyte, col01byte));</span><br><span class="line">log.info (&quot;====name:[&#123;&#125;],getValue&quot;, valStr);</span><br><span class="line">// 以下方式不建议使用，但是可以获取多版本 </span><br><span class="line">List&lt;KeyValue&gt; keyValueList = result.getColumn (cfbyte, col01byte);</span><br><span class="line">for (KeyValue keyValue : keyValueList) &#123;</span><br><span class="line">log.info (&quot;====name:[&#123;&#125;],getColumn -&gt; getValue&quot;, Bytes.toString (keyValue.getValue ()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 如果包含 age 列，则获取输出 </span><br><span class="line">if (result.containsColumn (cfbyte, col02byte)) &#123;</span><br><span class="line">String valStr = Bytes.toString (result.getValue (cfbyte, col02byte));</span><br><span class="line">log.info (&quot;====age:[&#123;&#125;],getValue&quot;, valStr);</span><br><span class="line">// 以下方式不建议使用，但是可以获取多版本 </span><br><span class="line">List&lt;KeyValue&gt; keyValueList = result.getColumn (cfbyte, col02byte);</span><br><span class="line">for (KeyValue keyValue : keyValueList) &#123;</span><br><span class="line">log.info (&quot;====age:[&#123;&#125;],getColumn -&gt; getValue&quot;, Bytes.toString (keyValue.getValue ()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 2-</span><br><span class="line">log.info (&quot;&quot;);</span><br><span class="line">log.info (&quot;====get result by second method&quot;);</span><br><span class="line">for (Result result : resultArr) &#123;</span><br><span class="line">log.info (&quot;&quot;);</span><br><span class="line">log.info (&quot;--------&quot;);</span><br><span class="line">String rowStr = Bytes.toString (result.getRow ());</span><br><span class="line">log.info (&quot;====row:[&#123;&#125;]&quot;, rowStr);</span><br><span class="line">//name 列 </span><br><span class="line">List&lt;Cell&gt; cellList = result.getColumnCells (cfbyte, col01byte);</span><br><span class="line">// 1 个 cell 就是 1 个版本 </span><br><span class="line">for (Cell cell : cellList) &#123;</span><br><span class="line">// 高版本不建议使用 </span><br><span class="line">log.info (&quot;====name:[&#123;&#125;],getValue&quot;, Bytes.toString (cell.getValue ()));</span><br><span class="line">//getValueArray: 数据的 byte 数组 </span><br><span class="line">//getValueOffset:rowkey 在数组中的索引下标 </span><br><span class="line">//getValueLength:rowkey 的长度 </span><br><span class="line">String valStr = Bytes.toString (cell.getValueArray (), cell.getValueOffset (), cell.getValueLength ());</span><br><span class="line">log.info (&quot;====name:[&#123;&#125;],[getValueArray,getValueOffset,getValueLength]&quot;, valStr);</span><br><span class="line">log.info (&quot;====timestamp:[&#123;&#125;],cell&quot;, cell.getTimestamp ());</span><br><span class="line">&#125;</span><br><span class="line">//age 列不演示了，省略...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (IOException e) &#123;</span><br><span class="line">log.error (&quot;!!!!error: &quot; + e.getMessage (), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、运行结果 </p><p> 执行运行，可以看到结果输出，与数据表中一致，多版本数据结果也可以全部获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:58: ====get result by first method</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:60: </span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:61: --------</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:63: ====row:[row01]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:67: ====name:[Jack],getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:71: ====name:[Jack],getColumn -&gt; getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:71: ====name:[JIM],getColumn -&gt; getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:60: </span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:61: --------</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:63: ====row:[row02]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:67: ====name:[Lucy],getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:71: ====name:[Lucy],getColumn -&gt; getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:77: ====age:[20],getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:81: ====age:[20],getColumn -&gt; getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:86: </span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:87: ====get result by second method</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:89: </span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:90: --------</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:92: ====row:[row01]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:98: ====name:[Jack],getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:103: ====name:[Jack],[getValueArray,getValueOffset,getValueLength]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:104: ====timestamp:[1566118661397],cell</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:98: ====name:[JIM],getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:103: ====name:[JIM],[getValueArray,getValueOffset,getValueLength]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:104: ====timestamp:[1566118652009],cell</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:89: </span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:90: --------</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:92: ====row:[row02]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:98: ====name:[Lucy],getValue</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:103: ====name:[Lucy],[getValueArray,getValueOffset,getValueLength]</span><br><span class="line">2019-08-18_17:54:18 [main] INFO test.TestHBase:104: ====timestamp:[1566118670447],cell</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192521.png" alt="Java 程序运行结果" title="Java 程序运行结果"></p><h1 id="备注"><a href="# 备注" class="headerlink" title="备注"></a>备注 </h1><p>1、在使用 <code>Java API</code> 时注意低版本、高版本之间的差异，必要时及时升级，就像上文代码中的 <code>Result.getColumn</code>、<code>KeyValue.getValue ()</code>、<code>Cell.getValue ()</code> 这几个方法。</p><p>2、<code>Phoenix</code> 是一款基于 <code>HBase</code> 的工具，在 <code>HBase</code> 之上提供了 <code>OLTP</code> 相关的功能，例如完全的 <code>ACID</code> 支持、<code>SQL</code>、二级索引等，此外 <code>Phoenix</code> 还提供了标准的 <code>JDBC</code> 的 <code>API</code>。在使用 <code>Phoenix</code> 时，可以很方便地像操作 <code>SQL</code> 那样操作 <code>HBase</code>。</p><p> 使用 <code>Phoenix</code> 创建表、查询数据示例如图。</p><p>创建表，使用：<br><code>CREATE TABLE IF NOT EXISTS TB_HBASE_STUDENT (&quot;pk&quot;varchar primary key,&quot;cf&quot;.&quot;name&quot;varchar,&quot;cf&quot;.&quot;age&quot;varchar);</code></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192546.png" alt="使用 Phoenix 创建表" title="使用 Phoenix 创建表"></p><p>查询示例，使用：<br><code>select * from&quot;TB_HBASE_STUDENT&quot;limit 5;</code></p><p><img src="https://raw.githubusercontent.com/iplaypi/img-playpi/master/img/2019/20190818192540.png" alt="使用 Phoenix 查询" title="使用 Phoenix 查询"></p><p>3、本示例的代码放在 <code>GirHub</code>，详见：<a href="https://github.com/iplaypi/iplaypistudy/tree/master/iplaypistudy-hbase/src/main/java/org/playpi/study/test" target="_blank" rel="noopener">TestHBase.java</a> ，搜索类名 <code>TestHBase</code> 即可。参考 <code>GitHub</code> 的代码时，注意在 <code>iplaypistudy-common-config</code> 模块中增加自己的配置文件，如果开发环境的版本不匹配，也要升级版本，在 <code>pom.xml</code> 更改即可。</p><p>4、想要使用 <code>HBase Shell</code> 删除表时，必须先使用 <code>disable YOUR_TABLE_NAME</code> 来禁用表，然后再使用 <code>drop YOUR_TABLE_NAME</code> 删除表，直接删除表是不被允许的。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 23 2020 23:35:12 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;最近工作比较繁忙，在处理需求、写代码的过程中踩到了一些坑，不过问题都被我一个一个解决了，所以最近三周都没有更新博客内容。不过，我是整理了提纲、打了草稿，近期会陆续整理出来。今天就先整理出来一个简单的知识点：使用 &lt;code&gt;Java API&lt;/code&gt; 从 &lt;code&gt;HBase&lt;/code&gt; 中获取多版本【Version 的概念】数据的方法，开发环境基于 &lt;code&gt;JDK v1.8&lt;/code&gt;、&lt;code&gt;HBase v1.1.2&lt;/code&gt;、&lt;code&gt;Zookeeper v3.4.6&lt;/code&gt;，在演示过程中还会使用原生的 &lt;code&gt;HBase Shell&lt;/code&gt; 进行配合，加深理解。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据技术知识" scheme="https://www.playpi.org/categories/big-data-technical-knowledge/"/>
    
    
      <category term="Java" scheme="https://www.playpi.org/tags/Java/"/>
    
      <category term="HBase" scheme="https://www.playpi.org/tags/HBase/"/>
    
      <category term="version" scheme="https://www.playpi.org/tags/version/"/>
    
  </entry>
  
</feed>
